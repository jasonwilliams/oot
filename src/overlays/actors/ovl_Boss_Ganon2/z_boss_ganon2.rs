#![allow(dead_code, mutable_transmutes, non_camel_case_types, non_snake_case,
         non_upper_case_globals, unused_assignments, unused_mut)]
#![register_tool(c2rust)]
#![feature(const_raw_ptr_to_usize_cast, const_transmute, register_tool)]
extern "C" {
    #[no_mangle]
    fn fabsf(f: f32_0) -> f32_0;
    #[no_mangle]
    fn sqrtf(f: f32_0) -> f32_0;
    #[no_mangle]
    fn osSyncPrintf(fmt: *const libc::c_char, _: ...);
    #[no_mangle]
    fn func_8002836C(globalCtx: *mut GlobalContext, pos: *mut Vec3f,
                     velocity: *mut Vec3f, accel: *mut Vec3f,
                     primColor: *mut Color_RGBA8, envColor: *mut Color_RGBA8,
                     scale: s16, scaleStep: s16, life: s16);
    #[no_mangle]
    fn TitleCard_InitBossName(globalCtx: *mut GlobalContext,
                              titleCtx: *mut TitleCardContext,
                              texture: *mut libc::c_void, x: s16, y: s16,
                              width: u8_0, height: u8_0);
    #[no_mangle]
    fn Actor_SetScale(actor: *mut Actor, scale: f32_0);
    #[no_mangle]
    fn Actor_MoveForward(actor: *mut Actor);
    #[no_mangle]
    fn func_8002DF54(globalCtx: *mut GlobalContext, actor: *mut Actor,
                     arg2: u8_0) -> s32;
    #[no_mangle]
    fn Actor_UpdateBgCheckInfo(globalCtx: *mut GlobalContext,
                               actor: *mut Actor, wallCheckHeight: f32_0,
                               wallCheckRadius: f32_0,
                               ceilingCheckHeight: f32_0, flags: s32);
    #[no_mangle]
    fn func_8002EABC(object: *mut Vec3f, eye: *mut Vec3f,
                     lightDir: *mut Vec3f, gfxCtx: *mut GraphicsContext)
     -> *mut Hilite;
    #[no_mangle]
    fn func_8002F6D4(globalCtx: *mut GlobalContext, actor: *mut Actor,
                     arg2: f32_0, arg3: s16, arg4: f32_0, arg5: u32_0);
    #[no_mangle]
    fn Audio_PlayActorSound2(actor: *mut Actor, sfxId: u16_0);
    #[no_mangle]
    fn Actor_SpawnAsChild(actorCtx: *mut ActorContext, parent: *mut Actor,
                          globalCtx: *mut GlobalContext, actorId: s16,
                          posX: f32_0, posY: f32_0, posZ: f32_0, rotX: s16,
                          rotY: s16, rotZ: s16, params: s16) -> *mut Actor;
    #[no_mangle]
    fn Actor_SpawnFloorDustRing(globalCtx: *mut GlobalContext,
                                actor: *mut Actor, posXZ: *mut Vec3f,
                                radius: f32_0, amountMinusOne: s32,
                                randAccelWeight: f32_0, scale: s16,
                                scaleStep: s16, useLighting: u8_0);
    #[no_mangle]
    fn func_80033E88(actor: *mut Actor, globalCtx: *mut GlobalContext,
                     arg2: s16, arg3: s16);
    #[no_mangle]
    fn Rand_ZeroFloat(f: f32_0) -> f32_0;
    #[no_mangle]
    fn Rand_CenteredFloat(f: f32_0) -> f32_0;
    #[no_mangle]
    fn Collider_InitJntSph(globalCtx: *mut GlobalContext,
                           collider: *mut ColliderJntSph) -> s32;
    #[no_mangle]
    fn Collider_DestroyJntSph(globalCtx: *mut GlobalContext,
                              collider: *mut ColliderJntSph) -> s32;
    #[no_mangle]
    fn Collider_SetJntSph(globalCtx: *mut GlobalContext,
                          dest: *mut ColliderJntSph, actor: *mut Actor,
                          src: *mut ColliderJntSphInit,
                          elements: *mut ColliderJntSphElement) -> s32;
    #[no_mangle]
    fn CollisionCheck_SetAT(globalCtx: *mut GlobalContext,
                            colChkCtx: *mut CollisionCheckContext,
                            collider: *mut Collider) -> s32;
    #[no_mangle]
    fn CollisionCheck_SetAC(globalCtx: *mut GlobalContext,
                            colChkCtx: *mut CollisionCheckContext,
                            collider: *mut Collider) -> s32;
    #[no_mangle]
    fn CollisionCheck_SetOC(globalCtx: *mut GlobalContext,
                            colChkCtx: *mut CollisionCheckContext,
                            collider: *mut Collider) -> s32;
    #[no_mangle]
    fn CollisionCheck_SpawnShieldParticlesMetal(globalCtx: *mut GlobalContext,
                                                v: *mut Vec3f);
    #[no_mangle]
    fn func_80064520(globalCtx: *mut GlobalContext,
                     csCtx: *mut CutsceneContext);
    #[no_mangle]
    fn func_80064534(globalCtx: *mut GlobalContext,
                     csCtx: *mut CutsceneContext);
    #[no_mangle]
    fn Math_CosS(angle: s16) -> f32_0;
    #[no_mangle]
    fn Math_SinS(angle: s16) -> f32_0;
    #[no_mangle]
    fn Rand_S16Offset(base: s16, range: s16) -> s16;
    #[no_mangle]
    fn Math_ApproachF(pValue: *mut f32_0, target: f32_0, fraction: f32_0,
                      step: f32_0);
    #[no_mangle]
    fn Math_ApproachZeroF(pValue: *mut f32_0, fraction: f32_0, step: f32_0);
    #[no_mangle]
    fn Math_ApproachS(pValue: *mut s16, target: s16, scale: s16, step: s16);
    #[no_mangle]
    fn func_80078884(sfxId: u16_0);
    #[no_mangle]
    fn func_80078914(arg0: *mut Vec3f, sfxId: u16_0);
    #[no_mangle]
    fn Gfx_SetFog(gfx: *mut Gfx, r: s32, g: s32, b: s32, a: s32, near: s32,
                  far: s32) -> *mut Gfx;
    #[no_mangle]
    fn func_80093D18(gfxCtx: *mut GraphicsContext);
    #[no_mangle]
    fn func_80093D84(gfxCtx: *mut GraphicsContext);
    #[no_mangle]
    fn Gfx_TexScroll(gfxCtx: *mut GraphicsContext, x: u32_0, y: u32_0,
                     width: s32, height: s32) -> *mut Gfx;
    #[no_mangle]
    fn Gfx_TwoTexScroll(gfxCtx: *mut GraphicsContext, tile1: s32, x1: u32_0,
                        y1: u32_0, width1: s32, height1: s32, tile2: s32,
                        x2: u32_0, y2: u32_0, width2: s32, height2: s32)
     -> *mut Gfx;
    #[no_mangle]
    fn Object_GetIndex(objectCtx: *mut ObjectContext, objectId: s16) -> s32;
    #[no_mangle]
    fn Object_IsLoaded(objectCtx: *mut ObjectContext, bankIndex: s32) -> s32;
    #[no_mangle]
    fn SkelAnime_DrawFlexOpa(globalCtx: *mut GlobalContext,
                             skeleton: *mut *mut libc::c_void,
                             jointTable: *mut Vec3s, dListCount: s32,
                             overrideLimbDraw: OverrideLimbDrawOpa,
                             postLimbDraw: PostLimbDrawOpa,
                             arg: *mut libc::c_void);
    #[no_mangle]
    fn Animation_GetLastFrame(animation: *mut libc::c_void) -> s16;
    #[no_mangle]
    fn SkelAnime_InitFlex(globalCtx: *mut GlobalContext,
                          skelAnime: *mut SkelAnime,
                          skeletonHeaderSeg: *mut FlexSkeletonHeader,
                          animation: *mut AnimationHeader,
                          jointTable: *mut Vec3s, morphTable: *mut Vec3s,
                          limbCount: s32) -> s32;
    #[no_mangle]
    fn SkelAnime_Update(skelAnime: *mut SkelAnime) -> s32;
    #[no_mangle]
    fn Animation_MorphToPlayOnce(skelAnime: *mut SkelAnime,
                                 animation: *mut AnimationHeader,
                                 morphFrames: f32_0);
    #[no_mangle]
    fn Animation_MorphToLoop(skelAnime: *mut SkelAnime,
                             animation: *mut AnimationHeader,
                             morphFrames: f32_0);
    #[no_mangle]
    fn Animation_OnFrame(skelAnime: *mut SkelAnime, frame: f32_0) -> s32;
    #[no_mangle]
    fn SkelAnime_Free(skelAnime: *mut SkelAnime,
                      globalCtx: *mut GlobalContext);
    #[no_mangle]
    fn func_800A9F6C(_: f32_0, _: u8_0, _: u8_0, _: u8_0);
    #[no_mangle]
    fn Gameplay_SetFog(globalCtx: *mut GlobalContext, gfx: *mut Gfx)
     -> *mut Gfx;
    #[no_mangle]
    fn Gameplay_CreateSubCamera(globalCtx: *mut GlobalContext) -> s16;
    #[no_mangle]
    fn Gameplay_ChangeCameraStatus(globalCtx: *mut GlobalContext, camId: s16,
                                   status: s16) -> s16;
    #[no_mangle]
    fn Gameplay_GetCamera(globalCtx: *mut GlobalContext, camId: s16)
     -> *mut Camera;
    #[no_mangle]
    fn Gameplay_CameraSetAtEye(globalCtx: *mut GlobalContext, camId: s16,
                               at: *mut Vec3f, eye: *mut Vec3f) -> s32;
    #[no_mangle]
    fn Gameplay_CameraSetAtEyeUp(globalCtx: *mut GlobalContext, camId: s16,
                                 at: *mut Vec3f, eye: *mut Vec3f,
                                 up: *mut Vec3f) -> s32;
    #[no_mangle]
    fn func_800C08AC(globalCtx: *mut GlobalContext, camId: s16, arg2: s16);
    #[no_mangle]
    fn Graph_Alloc(gfxCtx: *mut GraphicsContext, size: size_t)
     -> *mut libc::c_void;
    #[no_mangle]
    fn Graph_OpenDisps(dispRefs: *mut *mut Gfx, gfxCtx: *mut GraphicsContext,
                       file: *const libc::c_char, line: s32);
    #[no_mangle]
    fn Graph_CloseDisps(dispRefs: *mut *mut Gfx, gfxCtx: *mut GraphicsContext,
                        file: *const libc::c_char, line: s32);
    #[no_mangle]
    fn Math_Atan2S(x: f32_0, y: f32_0) -> s16;
    #[no_mangle]
    fn Matrix_Push();
    #[no_mangle]
    fn Matrix_Pop();
    #[no_mangle]
    fn Matrix_Mult(mf: *mut MtxF, mode: u8_0);
    #[no_mangle]
    fn Matrix_Translate(x: f32_0, y: f32_0, z: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_Scale(x: f32_0, y: f32_0, z: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_RotateX(x: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_RotateY(y: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_RotateZ(z: f32_0, mode: u8_0);
    #[no_mangle]
    fn Matrix_NewMtx(gfxCtx: *mut GraphicsContext, file: *mut libc::c_char,
                     line: s32) -> *mut Mtx;
    #[no_mangle]
    fn Matrix_MultVec3f(src: *mut Vec3f, dest: *mut Vec3f);
    #[no_mangle]
    fn func_800D1FD4(mf: *mut MtxF);
    #[no_mangle]
    static mut gSegments: [u32_0; 16];
    #[no_mangle]
    static mut gSaveContext: SaveContext;
    #[no_mangle]
    fn Audio_QueueSeqCmd(bgmID: u32_0);
    #[no_mangle]
    fn Audio_StopSfxById(sfxId: u32_0);
    #[no_mangle]
    fn sinf(_: f32_0) -> f32_0;
    #[no_mangle]
    fn Rand_ZeroOne() -> f32_0;
    #[no_mangle]
    fn cosf(_: f32_0) -> f32_0;
    #[no_mangle]
    fn Message_CloseTextbox(_: *mut GlobalContext);
    #[no_mangle]
    fn Message_StartTextbox(globalCtx: *mut GlobalContext, textId: u16_0,
                            actor: *mut Actor);
    #[no_mangle]
    fn Message_GetState(msgCtx: *mut MessageContext) -> u8_0;
    #[no_mangle]
    static mut object_ganon_Tex_00A8E0: [u64_0; 0];
    #[no_mangle]
    static mut object_ganon_DL_00BE90: [Gfx; 0];
    #[no_mangle]
    static mut gDorfSkel: FlexSkeletonHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_003B1C: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_007288: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_008EB8: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_00ADD0: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_00CAF8: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_00DFF0: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_00E8EC: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_00FFE4: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Tex_01E188: [u64_0; 0];
    #[no_mangle]
    static mut object_ganon2_Tex_01E988: [u64_0; 0];
    #[no_mangle]
    static mut object_ganon2_Tex_01EA08: [u64_0; 0];
    #[no_mangle]
    static mut object_ganon2_Tex_021A90: [u64_0; 0];
    #[no_mangle]
    static mut object_ganon2_Skel_025970: FlexSkeletonHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_026510: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_026AF4: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_027824: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_02A848: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_0334F8: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_034278: AnimationHeader;
    #[no_mangle]
    static mut object_ganon2_Anim_0353C0: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime3_Anim_000BFC: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime3_Anim_002168: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime3_Anim_0028A8: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime3_Anim_002E6C: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime3_Anim_003754: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime3_Anim_003F38: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime3_Anim_010380: AnimationHeader;
    #[no_mangle]
    static mut object_ganon_anime3_Anim_0147E0: AnimationHeader;
    #[no_mangle]
    static mut gGanonRubbleDL: [Gfx; 0];
    #[no_mangle]
    static mut gEffUnknown12Tex: [u64_0; 0];
    #[no_mangle]
    static mut gEffUnknown10Tex: [u64_0; 0];
}
pub type s8 = libc::c_schar;
pub type u8_0 = libc::c_uchar;
pub type s16 = libc::c_short;
pub type u16_0 = libc::c_ushort;
pub type s32 = libc::c_int;
pub type u32_0 = libc::c_uint;
pub type u64_0 = libc::c_ulonglong;
pub type f32_0 = libc::c_float;
pub type Mtx_t = [[libc::c_long; 4]; 4];
#[derive(Copy, Clone)]
#[repr(C)]
pub union Mtx {
    pub m: Mtx_t,
    pub c2rust_unnamed: C2RustUnnamed,
    pub forc_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed {
    pub intPart: [[u16_0; 4]; 4],
    pub fracPart: [[u16_0; 4]; 4],
}
pub type MtxF_t = [[libc::c_float; 4]; 4];
#[derive(Copy, Clone)]
#[repr(C)]
pub union MtxF {
    pub mf: MtxF_t,
    pub c2rust_unnamed: C2RustUnnamed_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub xx: libc::c_float,
    pub yx: libc::c_float,
    pub zx: libc::c_float,
    pub wx: libc::c_float,
    pub xy: libc::c_float,
    pub yy: libc::c_float,
    pub zy: libc::c_float,
    pub wy: libc::c_float,
    pub xz: libc::c_float,
    pub yz: libc::c_float,
    pub zz: libc::c_float,
    pub wz: libc::c_float,
    pub xw: libc::c_float,
    pub yw: libc::c_float,
    pub zw: libc::c_float,
    pub ww: libc::c_float,
}
pub type size_t = libc::c_ulong;
pub type OSPri = s32;
pub type OSId = s32;
#[derive(Copy, Clone)]
#[repr(C)]
pub union __OSfp {
    pub f: C2RustUnnamed_1,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub f_odd: f32_0,
    pub f_even: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __OSThreadContext {
    pub at: u64_0,
    pub v0: u64_0,
    pub v1: u64_0,
    pub a0: u64_0,
    pub a1: u64_0,
    pub a2: u64_0,
    pub a3: u64_0,
    pub t0: u64_0,
    pub t1: u64_0,
    pub t2: u64_0,
    pub t3: u64_0,
    pub t4: u64_0,
    pub t5: u64_0,
    pub t6: u64_0,
    pub t7: u64_0,
    pub s0: u64_0,
    pub s1: u64_0,
    pub s2: u64_0,
    pub s3: u64_0,
    pub s4: u64_0,
    pub s5: u64_0,
    pub s6: u64_0,
    pub s7: u64_0,
    pub t8: u64_0,
    pub t9: u64_0,
    pub gp: u64_0,
    pub sp: u64_0,
    pub s8: u64_0,
    pub ra: u64_0,
    pub lo: u64_0,
    pub hi: u64_0,
    pub sr: u32_0,
    pub pc: u32_0,
    pub cause: u32_0,
    pub badvaddr: u32_0,
    pub rcp: u32_0,
    pub fpcsr: u32_0,
    pub fp0: __OSfp,
    pub fp2: __OSfp,
    pub fp4: __OSfp,
    pub fp6: __OSfp,
    pub fp8: __OSfp,
    pub fp10: __OSfp,
    pub fp12: __OSfp,
    pub fp14: __OSfp,
    pub fp16: __OSfp,
    pub fp18: __OSfp,
    pub fp20: __OSfp,
    pub fp22: __OSfp,
    pub fp24: __OSfp,
    pub fp26: __OSfp,
    pub fp28: __OSfp,
    pub fp30: __OSfp,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct __OSThreadprofile {
    pub flag: u32_0,
    pub count: u32_0,
    pub time: u64_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSThread {
    pub next: *mut OSThread,
    pub priority: OSPri,
    pub queue: *mut *mut OSThread,
    pub tlnext: *mut OSThread,
    pub state: u16_0,
    pub flags: u16_0,
    pub id: OSId,
    pub fp: s32,
    pub thprof: *mut __OSThreadprofile,
    pub context: __OSThreadContext,
}
pub type OSMesg = *mut libc::c_void;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSMesgQueue {
    pub mtqueue: *mut OSThread,
    pub fullqueue: *mut OSThread,
    pub validCount: s32,
    pub first: s32,
    pub msgCount: s32,
    pub msg: *mut OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSTask_t {
    pub type_0: u32_0,
    pub flags: u32_0,
    pub ucode_boot: *mut u64_0,
    pub ucode_boot_size: u32_0,
    pub ucode: *mut u64_0,
    pub ucode_size: u32_0,
    pub ucode_data: *mut u64_0,
    pub ucode_data_size: u32_0,
    pub dram_stack: *mut u64_0,
    pub dram_stack_size: u32_0,
    pub output_buff: *mut u64_0,
    pub output_buff_size: *mut u64_0,
    pub data_ptr: *mut u64_0,
    pub data_size: u32_0,
    pub yield_data_ptr: *mut u64_0,
    pub yield_data_size: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union OSTask {
    pub t: OSTask_t,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViCommonRegs {
    pub ctrl: u32_0,
    pub width: u32_0,
    pub burst: u32_0,
    pub vSync: u32_0,
    pub hSync: u32_0,
    pub leap: u32_0,
    pub hStart: u32_0,
    pub xScale: u32_0,
    pub vCurrent: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViFieldRegs {
    pub origin: u32_0,
    pub yScale: u32_0,
    pub vStart: u32_0,
    pub vBurst: u32_0,
    pub vIntr: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSViMode {
    pub type_0: u8_0,
    pub comRegs: OSViCommonRegs,
    pub fldRegs: [OSViFieldRegs; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSContPad {
    pub button: u16_0,
    pub stick_x: s8,
    pub stick_y: s8,
    pub errno: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vtx_t {
    pub ob: [libc::c_short; 3],
    pub flag: libc::c_ushort,
    pub tc: [libc::c_short; 2],
    pub cn: [libc::c_uchar; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vtx_tn {
    pub ob: [libc::c_short; 3],
    pub flag: libc::c_ushort,
    pub tc: [libc::c_short; 2],
    pub n: [libc::c_schar; 3],
    pub a: libc::c_uchar,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Vtx {
    pub v: Vtx_t,
    pub n: Vtx_tn,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Tri {
    pub flag: libc::c_uchar,
    pub v: [libc::c_uchar; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vp_t {
    pub vscale: [libc::c_short; 4],
    pub vtrans: [libc::c_short; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Vp {
    pub vp: Vp_t,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Light_t {
    pub col: [libc::c_uchar; 3],
    pub pad1: libc::c_char,
    pub colc: [libc::c_uchar; 3],
    pub pad2: libc::c_char,
    pub dir: [libc::c_schar; 3],
    pub pad3: libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Ambient_t {
    pub col: [libc::c_uchar; 3],
    pub pad1: libc::c_char,
    pub colc: [libc::c_uchar; 3],
    pub pad2: libc::c_char,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Hilite_t {
    pub x1: libc::c_int,
    pub y1: libc::c_int,
    pub x2: libc::c_int,
    pub y2: libc::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Light {
    pub l: Light_t,
    pub force_structure_alignment: [libc::c_longlong; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Ambient {
    pub l: Ambient_t,
    pub force_structure_alignment: [libc::c_longlong; 1],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Lightsn {
    pub a: Ambient,
    pub l: [Light; 7],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Hilite {
    pub h: Hilite_t,
    pub force_structure_alignment: [libc::c_long; 4],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gdma {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "par", ty = "libc::c_uint", bits = "8..=15")]
    #[bitfield(name = "len", ty = "libc::c_uint", bits = "16..=31")]
    pub cmd_par_len: [u8; 4],
    pub addr: libc::c_uint,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gtri {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad: [u8; 4],
    pub tri: Tri,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gpopmtx {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "8..=31")]
    #[bitfield(name = "pad2", ty = "libc::c_int", bits = "32..=55")]
    #[bitfield(name = "param", ty = "libc::c_uchar", bits = "56..=63")]
    pub cmd_pad1_pad2_param: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsegment {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "mw_index", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "number", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "32..=39")]
    #[bitfield(name = "base", ty = "libc::c_int", bits = "40..=63")]
    pub cmd_pad0_mw_index_number_pad1_base: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct GsetothermodeL {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "sft", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "len", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "data", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_pad0_sft_len_data: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct GsetothermodeH {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad0", ty = "libc::c_int", bits = "8..=15")]
    #[bitfield(name = "sft", ty = "libc::c_int", bits = "16..=23")]
    #[bitfield(name = "len", ty = "libc::c_int", bits = "24..=31")]
    #[bitfield(name = "data", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_pad0_sft_len_data: [u8; 8],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Gtexture {
    pub cmd: libc::c_uchar,
    pub lodscale: libc::c_uchar,
    pub tile: libc::c_uchar,
    pub on: libc::c_uchar,
    pub s: libc::c_ushort,
    pub t: libc::c_ushort,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gline3D {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad: [u8; 4],
    pub line: Tri,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gperspnorm {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "pad1", ty = "libc::c_int", bits = "8..=31")]
    pub cmd_pad1: [u8; 4],
    pub pad2: libc::c_short,
    pub scale: libc::c_short,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetimg {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "fmt", ty = "libc::c_uint", bits = "8..=10")]
    #[bitfield(name = "siz", ty = "libc::c_uint", bits = "11..=12")]
    #[bitfield(name = "pad", ty = "libc::c_uint", bits = "13..=19")]
    #[bitfield(name = "wd", ty = "libc::c_uint", bits = "20..=31")]
    pub cmd_fmt_siz_pad_wd: [u8; 4],
    pub dram: libc::c_uint,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetcombine {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "muxs0", ty = "libc::c_uint", bits = "8..=31")]
    #[bitfield(name = "muxs1", ty = "libc::c_uint", bits = "32..=63")]
    pub cmd_muxs0_muxs1: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsetcolor {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    pub cmd: [u8; 1],
    pub pad: libc::c_uchar,
    pub prim_min_level: libc::c_uchar,
    pub prim_level: libc::c_uchar,
    pub color: libc::c_ulong,
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gfillrect {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "x0", ty = "libc::c_int", bits = "8..=17")]
    #[bitfield(name = "x0frac", ty = "libc::c_int", bits = "18..=19")]
    #[bitfield(name = "y0", ty = "libc::c_int", bits = "20..=29")]
    #[bitfield(name = "y0frac", ty = "libc::c_int", bits = "30..=31")]
    #[bitfield(name = "pad", ty = "libc::c_uint", bits = "32..=39")]
    #[bitfield(name = "x1", ty = "libc::c_int", bits = "40..=49")]
    #[bitfield(name = "x1frac", ty = "libc::c_int", bits = "50..=51")]
    #[bitfield(name = "y1", ty = "libc::c_int", bits = "52..=61")]
    #[bitfield(name = "y1frac", ty = "libc::c_int", bits = "62..=63")]
    pub cmd_x0_x0frac_y0_y0frac_pad_x1_x1frac_y1_y1frac: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gsettile {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "fmt", ty = "libc::c_uint", bits = "8..=10")]
    #[bitfield(name = "siz", ty = "libc::c_uint", bits = "11..=12")]
    #[bitfield(name = "pad0", ty = "libc::c_uint", bits = "13..=13")]
    #[bitfield(name = "line", ty = "libc::c_uint", bits = "14..=22")]
    #[bitfield(name = "tmem", ty = "libc::c_uint", bits = "23..=31")]
    #[bitfield(name = "pad1", ty = "libc::c_uint", bits = "32..=36")]
    #[bitfield(name = "tile", ty = "libc::c_uint", bits = "37..=39")]
    #[bitfield(name = "palette", ty = "libc::c_uint", bits = "40..=43")]
    #[bitfield(name = "ct", ty = "libc::c_uint", bits = "44..=44")]
    #[bitfield(name = "mt", ty = "libc::c_uint", bits = "45..=45")]
    #[bitfield(name = "maskt", ty = "libc::c_uint", bits = "46..=49")]
    #[bitfield(name = "shiftt", ty = "libc::c_uint", bits = "50..=53")]
    #[bitfield(name = "cs", ty = "libc::c_uint", bits = "54..=54")]
    #[bitfield(name = "ms", ty = "libc::c_uint", bits = "55..=55")]
    #[bitfield(name = "masks", ty = "libc::c_uint", bits = "56..=59")]
    #[bitfield(name = "shifts", ty = "libc::c_uint", bits = "60..=63")]
    pub cmd_fmt_siz_pad0_line_tmem_pad1_tile_palette_ct_mt_maskt_shiftt_cs_ms_masks_shifts: [u8; 8],
}
#[derive(Copy, Clone, BitfieldStruct)]
#[repr(C)]
pub struct Gloadtile {
    #[bitfield(name = "cmd", ty = "libc::c_int", bits = "0..=7")]
    #[bitfield(name = "sl", ty = "libc::c_uint", bits = "8..=19")]
    #[bitfield(name = "tl", ty = "libc::c_uint", bits = "20..=31")]
    #[bitfield(name = "pad", ty = "libc::c_int", bits = "32..=36")]
    #[bitfield(name = "tile", ty = "libc::c_uint", bits = "37..=39")]
    #[bitfield(name = "sh", ty = "libc::c_uint", bits = "40..=51")]
    #[bitfield(name = "th", ty = "libc::c_uint", bits = "52..=63")]
    pub cmd_sl_tl_pad_tile_sh_th: [u8; 8],
}
pub type Gsettilesize = Gloadtile;
pub type Gloadtlut = Gloadtile;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Gwords {
    pub w0: libc::c_uint,
    pub w1: libc::c_uint,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Gfx {
    pub words: Gwords,
    pub dma: Gdma,
    pub tri: Gtri,
    pub line: Gline3D,
    pub popmtx: Gpopmtx,
    pub segment: Gsegment,
    pub setothermodeH: GsetothermodeH,
    pub setothermodeL: GsetothermodeL,
    pub texture: Gtexture,
    pub perspnorm: Gperspnorm,
    pub setimg: Gsetimg,
    pub setcombine: Gsetcombine,
    pub setcolor: Gsetcolor,
    pub fillrect: Gfillrect,
    pub settile: Gsettile,
    pub loadtile: Gloadtile,
    pub settilesize: Gsettilesize,
    pub loadtlut: Gloadtlut,
    pub force_structure_alignment: libc::c_longlong,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3f {
    pub x: f32_0,
    pub y: f32_0,
    pub z: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3us {
    pub x: u16_0,
    pub y: u16_0,
    pub z: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3s {
    pub x: s16,
    pub y: s16,
    pub z: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Vec3i {
    pub x: s32,
    pub y: s32,
    pub z: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Sphere16 {
    pub center: Vec3s,
    pub radius: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Cylinder16 {
    pub radius: s16,
    pub height: s16,
    pub yShift: s16,
    pub pos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Linef {
    pub a: Vec3f,
    pub b: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ItemEquips {
    pub buttonItems: [u8_0; 4],
    pub cButtonSlots: [u8_0; 3],
    pub equipment: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Inventory {
    pub items: [u8_0; 24],
    pub ammo: [s8; 16],
    pub equipment: u16_0,
    pub upgrades: u32_0,
    pub questItems: u32_0,
    pub dungeonItems: [u8_0; 20],
    pub dungeonKeys: [s8; 19],
    pub defenseHearts: s8,
    pub gsTokens: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SavedSceneFlags {
    pub chest: u32_0,
    pub swch: u32_0,
    pub clear: u32_0,
    pub collect: u32_0,
    pub unk: u32_0,
    pub rooms: u32_0,
    pub floors: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct HorseData {
    pub scene: s16,
    pub pos: Vec3s,
    pub angle: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RespawnData {
    pub pos: Vec3f,
    pub yaw: s16,
    pub playerParams: s16,
    pub entranceIndex: s16,
    pub roomIndex: u8_0,
    pub data: s8,
    pub tempSwchFlags: u32_0,
    pub tempCollectFlags: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FaroresWindData {
    pub pos: Vec3i,
    pub yaw: s32,
    pub playerParams: s32,
    pub entranceIndex: s32,
    pub roomIndex: s32,
    pub set: s32,
    pub tempSwchFlags: s32,
    pub tempCollectFlags: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SaveContext {
    pub entranceIndex: s32,
    pub linkAge: s32,
    pub cutsceneIndex: s32,
    pub dayTime: u16_0,
    pub nightFlag: s32,
    pub totalDays: s32,
    pub bgsDayCount: s32,
    pub newf: [libc::c_char; 6],
    pub deaths: u16_0,
    pub playerName: [libc::c_char; 8],
    pub n64ddFlag: s16,
    pub healthCapacity: s16,
    pub health: s16,
    pub magicLevel: s8,
    pub magic: s8,
    pub rupees: s16,
    pub swordHealth: u16_0,
    pub naviTimer: u16_0,
    pub magicAcquired: u8_0,
    pub unk_3B: [libc::c_char; 1],
    pub doubleMagic: u8_0,
    pub doubleDefense: u8_0,
    pub bgsFlag: u8_0,
    pub ocarinaGameRoundNum: u8_0,
    pub childEquips: ItemEquips,
    pub adultEquips: ItemEquips,
    pub unk_54: u32_0,
    pub unk_58: [libc::c_char; 14],
    pub savedSceneNum: s16,
    pub equips: ItemEquips,
    pub inventory: Inventory,
    pub sceneFlags: [SavedSceneFlags; 124],
    pub fw: FaroresWindData,
    pub unk_E8C: [libc::c_char; 16],
    pub gsFlags: [s32; 6],
    pub unk_EB4: [libc::c_char; 4],
    pub highScores: [s32; 7],
    pub eventChkInf: [u16_0; 14],
    pub itemGetInf: [u16_0; 4],
    pub infTable: [u16_0; 30],
    pub unk_F34: [libc::c_char; 4],
    pub worldMapAreaData: u32_0,
    pub unk_F3C: [libc::c_char; 4],
    pub scarecrowCustomSongSet: u8_0,
    pub scarecrowCustomSong: [u8_0; 864],
    pub unk_12A1: [libc::c_char; 36],
    pub scarecrowSpawnSongSet: u8_0,
    pub scarecrowSpawnSong: [u8_0; 128],
    pub unk_1346: [libc::c_char; 2],
    pub horseData: HorseData,
    pub checksum: u16_0,
    pub fileNum: s32,
    pub unk_1358: [libc::c_char; 4],
    pub gameMode: s32,
    pub sceneSetupIndex: s32,
    pub respawnFlag: s32,
    pub respawn: [RespawnData; 3],
    pub entranceSpeed: f32_0,
    pub entranceSound: u16_0,
    pub unk_13C2: [libc::c_char; 1],
    pub unk_13C3: u8_0,
    pub dogParams: s16,
    pub textTriggerFlags: u8_0,
    pub showTitleCard: u8_0,
    pub nayrusLoveTimer: s16,
    pub unk_13CA: [libc::c_char; 2],
    pub rupeeAccumulator: s16,
    pub timer1State: s16,
    pub timer1Value: s16,
    pub timer2State: s16,
    pub timer2Value: s16,
    pub timerX: [s16; 2],
    pub timerY: [s16; 2],
    pub unk_13DE: [libc::c_char; 2],
    pub seqId: u8_0,
    pub natureAmbienceId: u8_0,
    pub buttonStatus: [u8_0; 5],
    pub unk_13E7: u8_0,
    pub unk_13E8: u16_0,
    pub unk_13EA: u16_0,
    pub unk_13EC: u16_0,
    pub unk_13EE: u16_0,
    pub unk_13F0: s16,
    pub unk_13F2: s16,
    pub unk_13F4: s16,
    pub unk_13F6: s16,
    pub unk_13F8: s16,
    pub eventInf: [u16_0; 4],
    pub mapIndex: u16_0,
    pub minigameState: u16_0,
    pub minigameScore: u16_0,
    pub unk_1408: [libc::c_char; 1],
    pub language: u8_0,
    pub audioSetting: u8_0,
    pub unk_140B: [libc::c_char; 1],
    pub zTargetSetting: u8_0,
    pub forcedSeqId: u16_0,
    pub unk_1410: u8_0,
    pub unk_1411: [libc::c_char; 1],
    pub nextCutsceneIndex: u16_0,
    pub cutsceneTrigger: u8_0,
    pub chamberCutsceneNum: u8_0,
    pub nextDayTime: u16_0,
    pub fadeDuration: u8_0,
    pub unk_1419: u8_0,
    pub skyboxTime: u16_0,
    pub dogIsLost: u8_0,
    pub nextTransition: u8_0,
    pub unk_141E: [libc::c_char; 2],
    pub worldMapArea: s16,
    pub sunsSongState: s16,
    pub healthAccumulator: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGB8 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGBA8 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
    pub a: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Color_RGBA8_u32 {
    pub c2rust_unnamed: C2RustUnnamed_2,
    pub rgba: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub r: u8_0,
    pub g: u8_0,
    pub b: u8_0,
    pub a: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Color_RGBAf {
    pub r: f32_0,
    pub g: f32_0,
    pub b: f32_0,
    pub a: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightPoint {
    pub x: s16,
    pub y: s16,
    pub z: s16,
    pub color: [u8_0; 3],
    pub drawGlow: u8_0,
    pub radius: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightDirectional {
    pub x: s8,
    pub y: s8,
    pub z: s8,
    pub color: [u8_0; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union LightParams {
    pub point: LightPoint,
    pub dir: LightDirectional,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightInfo {
    pub type_0: u8_0,
    pub params: LightParams,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Lights {
    pub numLights: u8_0,
    pub l: Lightsn,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightNode {
    pub info: *mut LightInfo,
    pub prev: *mut LightNode,
    pub next: *mut LightNode,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LightContext {
    pub listHead: *mut LightNode,
    pub ambientColor: [u8_0; 3],
    pub fogColor: [u8_0; 3],
    pub fogNear: s16,
    pub fogFar: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GlobalContext {
    pub state: GameState,
    pub sceneNum: s16,
    pub sceneConfig: u8_0,
    pub unk_A7: [libc::c_char; 9],
    pub sceneSegment: *mut libc::c_void,
    pub view: View,
    pub mainCamera: Camera,
    pub subCameras: [Camera; 3],
    pub cameraPtrs: [*mut Camera; 4],
    pub activeCamera: s16,
    pub nextCamera: s16,
    pub sequenceCtx: SequenceContext,
    pub lightCtx: LightContext,
    pub frameAdvCtx: FrameAdvanceContext,
    pub colCtx: CollisionContext,
    pub actorCtx: ActorContext,
    pub csCtx: CutsceneContext,
    pub soundSources: [SoundSource; 16],
    pub sramCtx: SramContext,
    pub skyboxCtx: SkyboxContext,
    pub msgCtx: MessageContext,
    pub interfaceCtx: InterfaceContext,
    pub pauseCtx: PauseContext,
    pub gameOverCtx: GameOverContext,
    pub envCtx: EnvironmentContext,
    pub animationCtx: AnimationContext,
    pub objectCtx: ObjectContext,
    pub roomCtx: RoomContext,
    pub transiActorCtx: TransitionActorContext,
    pub playerInit: Option<unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext,
                                                _: *mut FlexSkeletonHeader)
                               -> ()>,
    pub playerUpdate: Option<unsafe extern "C" fn(_: *mut Player,
                                                  _: *mut GlobalContext,
                                                  _: *mut Input) -> ()>,
    pub isPlayerDroppingFish: Option<unsafe extern "C" fn(_:
                                                              *mut GlobalContext)
                                         -> s32>,
    pub startPlayerFishing: Option<unsafe extern "C" fn(_: *mut GlobalContext)
                                       -> s32>,
    pub grabPlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                _: *mut Player) -> s32>,
    pub startPlayerCutscene: Option<unsafe extern "C" fn(_:
                                                             *mut GlobalContext,
                                                         _: *mut Actor,
                                                         _: s32) -> s32>,
    pub func_11D54: Option<unsafe extern "C" fn(_: *mut Player,
                                                _: *mut GlobalContext) -> ()>,
    pub damagePlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                  _: s32) -> s32>,
    pub talkWithPlayer: Option<unsafe extern "C" fn(_: *mut GlobalContext,
                                                    _: *mut Actor) -> ()>,
    pub viewProjectionMtxF: MtxF,
    pub billboardMtxF: MtxF,
    pub billboardMtx: *mut Mtx,
    pub gameplayFrames: u32_0,
    pub linkAgeOnLoad: u8_0,
    pub unk_11DE9: u8_0,
    pub curSpawn: u8_0,
    pub numSetupActors: u8_0,
    pub numRooms: u8_0,
    pub roomList: *mut RomFile,
    pub linkActorEntry: *mut ActorEntry,
    pub setupActorList: *mut ActorEntry,
    pub unk_11DFC: *mut libc::c_void,
    pub setupEntranceList: *mut EntranceEntry,
    pub setupExitList: *mut s16,
    pub setupPathList: *mut Path,
    pub cUpElfMsgs: *mut ElfMessage,
    pub specialEffects: *mut libc::c_void,
    pub skyboxId: u8_0,
    pub sceneLoadFlag: s8,
    pub unk_11E16: s16,
    pub unk_11E18: s16,
    pub nextEntranceIndex: s16,
    pub unk_11E1C: [libc::c_char; 64],
    pub shootingGalleryStatus: s8,
    pub bombchuBowlingStatus: s8,
    pub fadeTransition: u8_0,
    pub colChkCtx: CollisionCheckContext,
    pub envFlags: [u16_0; 20],
    pub pauseBgPreRender: PreRender,
    pub unk_12174: [libc::c_char; 83],
    pub unk_121C7: s8,
    pub transitionCtx: TransitionContext,
    pub unk_12418: [libc::c_char; 3],
    pub transitionMode: u8_0,
    pub transitionFade: TransitionFade,
    pub unk_12428: [libc::c_char; 3],
    pub unk_1242B: u8_0,
    pub loadedScene: *mut SceneTableEntry,
    pub unk_12430: [libc::c_char; 232],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SceneTableEntry {
    pub sceneFile: RomFile,
    pub titleFile: RomFile,
    pub unk_10: u8_0,
    pub config: u8_0,
    pub unk_12: u8_0,
    pub unk_13: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RomFile {
    pub vromStart: u32_0,
    pub vromEnd: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionFade {
    pub fadeType: u8_0,
    pub isDone: u8_0,
    pub fadeDirection: u8_0,
    pub fadeColor: Color_RGBA8_u32,
    pub fadeTimer: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionContext {
    pub c2rust_unnamed: C2RustUnnamed_3,
    pub transitionType: s32,
    pub init: Option<unsafe extern "C" fn(_: *mut libc::c_void)
                         -> *mut libc::c_void>,
    pub destroy: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>,
    pub update: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: s32)
                           -> ()>,
    pub draw: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                          _: *mut *mut Gfx) -> ()>,
    pub start: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> ()>,
    pub setType: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: s32)
                            -> ()>,
    pub setColor: Option<unsafe extern "C" fn(_: *mut libc::c_void, _: u32_0)
                             -> ()>,
    pub setEnvColor: Option<unsafe extern "C" fn(_: *mut libc::c_void,
                                                 _: u32_0) -> ()>,
    pub isDone: Option<unsafe extern "C" fn(_: *mut libc::c_void) -> s32>,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_3 {
    pub fade: TransitionFade,
    pub circle: TransitionCircle,
    pub triforce: TransitionTriforce,
    pub wipe: TransitionWipe,
    pub data: [libc::c_char; 552],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionWipe {
    pub color: Color_RGBA8_u32,
    pub envColor: Color_RGBA8_u32,
    pub direction: u8_0,
    pub frame: u8_0,
    pub isDone: u8_0,
    pub texX: u16_0,
    pub texY: u16_0,
    pub normal: u16_0,
    pub projection: Mtx,
    pub lookAt: Mtx,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionTriforce {
    pub color: Color_RGBA8_u32,
    pub transPos: f32_0,
    pub step: f32_0,
    pub state: s32,
    pub fadeDirection: s32,
    pub projection: Mtx,
    pub frame: s32,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionCircle {
    pub color: Color_RGBA8_u32,
    pub envColor: Color_RGBA8_u32,
    pub texX: s32,
    pub texY: s32,
    pub step: s32,
    pub unk_14: u8_0,
    pub typeColor: u8_0,
    pub speed: u8_0,
    pub effect: u8_0,
    pub isDone: u8_0,
    pub frame: u8_0,
    pub normal: u16_0,
    pub projection: Mtx,
    pub lookAt: Mtx,
    pub texture: *mut libc::c_void,
    pub modelView: [[Mtx; 3]; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PreRender {
    pub width: s32,
    pub height: s32,
    pub widthSave: s32,
    pub heightSave: s32,
    pub fbuf: *mut u16_0,
    pub fbufSave: *mut u16_0,
    pub cvgSave: *mut u8_0,
    pub zbuf: *mut u16_0,
    pub zbufSave: *mut u16_0,
    pub ulxSave: s32,
    pub ulySave: s32,
    pub lrxSave: s32,
    pub lrySave: s32,
    pub ulx: s32,
    pub uly: s32,
    pub lrx: s32,
    pub lry: s32,
    pub alloc: ListAlloc,
    pub unk_4C: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ListAlloc {
    pub prev: *mut ListAlloc,
    pub next: *mut ListAlloc,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionCheckContext {
    pub colATCount: s16,
    pub sacFlags: u16_0,
    pub colAT: [*mut Collider; 50],
    pub colACCount: s32,
    pub colAC: [*mut Collider; 60],
    pub colOCCount: s32,
    pub colOC: [*mut Collider; 50],
    pub colLineCount: s32,
    pub colLine: [*mut OcLine; 3],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OcLine {
    pub line: Linef,
    pub ocFlags: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Collider {
    pub actor: *mut Actor,
    pub at: *mut Actor,
    pub ac: *mut Actor,
    pub oc: *mut Actor,
    pub atFlags: u8_0,
    pub acFlags: u8_0,
    pub ocFlags1: u8_0,
    pub ocFlags2: u8_0,
    pub colType: u8_0,
    pub shape: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Actor {
    pub id: s16,
    pub category: u8_0,
    pub room: s8,
    pub flags: u32_0,
    pub home: PosRot,
    pub params: s16,
    pub objBankIndex: s8,
    pub targetMode: s8,
    pub sfx: u16_0,
    pub world: PosRot,
    pub focus: PosRot,
    pub targetArrowOffset: f32_0,
    pub scale: Vec3f,
    pub velocity: Vec3f,
    pub speedXZ: f32_0,
    pub gravity: f32_0,
    pub minVelocityY: f32_0,
    pub wallPoly: *mut CollisionPoly,
    pub floorPoly: *mut CollisionPoly,
    pub wallBgId: u8_0,
    pub floorBgId: u8_0,
    pub wallYaw: s16,
    pub floorHeight: f32_0,
    pub yDistToWater: f32_0,
    pub bgCheckFlags: u16_0,
    pub yawTowardsPlayer: s16,
    pub xyzDistToPlayerSq: f32_0,
    pub xzDistToPlayer: f32_0,
    pub yDistToPlayer: f32_0,
    pub colChkInfo: CollisionCheckInfo,
    pub shape: ActorShape,
    pub projectedPos: Vec3f,
    pub projectedW: f32_0,
    pub uncullZoneForward: f32_0,
    pub uncullZoneScale: f32_0,
    pub uncullZoneDownward: f32_0,
    pub prevPos: Vec3f,
    pub isTargeted: u8_0,
    pub targetPriority: u8_0,
    pub textId: u16_0,
    pub freezeTimer: u16_0,
    pub colorFilterParams: u16_0,
    pub colorFilterTimer: u8_0,
    pub isDrawn: u8_0,
    pub dropFlag: u8_0,
    pub naviEnemyId: u8_0,
    pub parent: *mut Actor,
    pub child: *mut Actor,
    pub prev: *mut Actor,
    pub next: *mut Actor,
    pub init: ActorFunc,
    pub destroy: ActorFunc,
    pub update: ActorFunc,
    pub draw: ActorFunc,
    pub overlayEntry: *mut ActorOverlay,
    pub dbgPad: [libc::c_char; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorOverlay {
    pub vromStart: u32_0,
    pub vromEnd: u32_0,
    pub vramStart: *mut libc::c_void,
    pub vramEnd: *mut libc::c_void,
    pub loadedRamAddr: *mut libc::c_void,
    pub initInfo: *mut ActorInit,
    pub name: *mut libc::c_char,
    pub allocType: u16_0,
    pub numLoaded: s8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorInit {
    pub id: s16,
    pub category: u8_0,
    pub flags: u32_0,
    pub objectId: s16,
    pub instanceSize: u32_0,
    pub init: ActorFunc,
    pub destroy: ActorFunc,
    pub update: ActorFunc,
    pub draw: ActorFunc,
}
pub type ActorFunc
    =
    Option<unsafe extern "C" fn(_: *mut Actor, _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorShape {
    pub rot: Vec3s,
    pub face: s16,
    pub yOffset: f32_0,
    pub shadowDraw: ActorShadowFunc,
    pub shadowScale: f32_0,
    pub shadowAlpha: u8_0,
    pub feetFloorFlags: u8_0,
    pub feetPos: [Vec3f; 2],
}
pub type ActorShadowFunc
    =
    Option<unsafe extern "C" fn(_: *mut Actor, _: *mut Lights,
                                _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionCheckInfo {
    pub damageTable: *mut DamageTable,
    pub displacement: Vec3f,
    pub cylRadius: s16,
    pub cylHeight: s16,
    pub cylYShift: s16,
    pub mass: u8_0,
    pub health: u8_0,
    pub damage: u8_0,
    pub damageEffect: u8_0,
    pub atHitEffect: u8_0,
    pub acHitEffect: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DamageTable {
    pub table: [u8_0; 32],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionPoly {
    pub type_0: u16_0,
    pub c2rust_unnamed: C2RustUnnamed_4,
    pub normal: Vec3s,
    pub dist: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_4 {
    pub vtxData: [u16_0; 3],
    pub c2rust_unnamed: C2RustUnnamed_5,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_5 {
    pub flags_vIA: u16_0,
    pub flags_vIB: u16_0,
    pub vIC: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PosRot {
    pub pos: Vec3f,
    pub rot: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ElfMessage {
    pub byte0: u8_0,
    pub byte1: u8_0,
    pub byte2: u8_0,
    pub byte3: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Path {
    pub count: u8_0,
    pub points: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EntranceEntry {
    pub spawn: u8_0,
    pub room: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorEntry {
    pub id: s16,
    pub pos: Vec3s,
    pub rot: Vec3s,
    pub params: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Player {
    pub actor: Actor,
    pub currentTunic: s8,
    pub currentSword: s8,
    pub currentShield: s8,
    pub currentBoots: s8,
    pub heldItemButton: s8,
    pub heldItemActionParam: s8,
    pub heldItemId: u8_0,
    pub prevBoots: s8,
    pub itemActionParam: s8,
    pub unk_155: [libc::c_char; 3],
    pub modelGroup: u8_0,
    pub nextModelGroup: u8_0,
    pub unk_15A: s8,
    pub modelAnimType: u8_0,
    pub leftHandType: u8_0,
    pub rightHandType: u8_0,
    pub sheathType: u8_0,
    pub currentMask: u8_0,
    pub rightHandDLists: *mut *mut Gfx,
    pub leftHandDLists: *mut *mut Gfx,
    pub sheathDLists: *mut *mut Gfx,
    pub waistDLists: *mut *mut Gfx,
    pub giObjectLoading: u8_0,
    pub giObjectDmaRequest: DmaRequest,
    pub giObjectLoadQueue: OSMesgQueue,
    pub giObjectLoadMsg: OSMesg,
    pub giObjectSegment: *mut libc::c_void,
    pub skelAnime: SkelAnime,
    pub jointTable: [Vec3s; 24],
    pub morphTable: [Vec3s; 24],
    pub blendTable: [Vec3s; 24],
    pub unk_3A8: [s16; 2],
    pub heldActor: *mut Actor,
    pub leftHandPos: Vec3f,
    pub unk_3BC: Vec3s,
    pub unk_3C4: *mut Actor,
    pub unk_3C8: Vec3f,
    pub unk_3D4: [libc::c_char; 88],
    pub doorType: s8,
    pub doorDirection: s8,
    pub doorTimer: s16,
    pub doorActor: *mut Actor,
    pub getItemId: s8,
    pub getItemDirection: u16_0,
    pub interactRangeActor: *mut Actor,
    pub mountSide: s8,
    pub unk_43D: [libc::c_char; 3],
    pub rideActor: *mut Actor,
    pub csMode: u8_0,
    pub prevCsMode: u8_0,
    pub unk_446: u8_0,
    pub unk_447: u8_0,
    pub unk_448: *mut Actor,
    pub unk_44C: [libc::c_char; 4],
    pub unk_450: Vec3f,
    pub unk_45C: Vec3f,
    pub unk_468: [libc::c_char; 2],
    pub unk_46A: s16,
    pub unk_46C: s16,
    pub unk_46E: [libc::c_char; 42],
    pub cylinder: ColliderCylinder,
    pub swordQuads: [ColliderQuad; 2],
    pub shieldQuad: ColliderQuad,
    pub unk_664: *mut Actor,
    pub unk_668: [libc::c_char; 4],
    pub unk_66C: s32,
    pub swordEffectIndex: s32,
    pub func_674: PlayerFunc674,
    pub ageProperties: *mut PlayerAgeProperties,
    pub stateFlags1: u32_0,
    pub stateFlags2: u32_0,
    pub unk_684: *mut Actor,
    pub boomerangActor: *mut Actor,
    pub naviActor: *mut Actor,
    pub naviTextId: s16,
    pub stateFlags3: u8_0,
    pub exchangeItemId: s8,
    pub targetActor: *mut Actor,
    pub targetActorDistance: f32_0,
    pub unk_69C: [libc::c_char; 4],
    pub unk_6A0: f32_0,
    pub unk_6A4: f32_0,
    pub unk_6A8: *mut Actor,
    pub unk_6AC: s8,
    pub unk_6AD: u8_0,
    pub unk_6AE: u16_0,
    pub unk_6B0: s16,
    pub unk_6B4: [libc::c_char; 4],
    pub unk_6B6: s16,
    pub unk_6B8: s16,
    pub unk_6BA: s16,
    pub unk_6BC: s16,
    pub unk_6BE: s16,
    pub unk_6C0: s16,
    pub unk_6C2: s16,
    pub unk_6C4: f32_0,
    pub skelAnime2: SkelAnime,
    pub jointTable2: [Vec3s; 24],
    pub morphTable2: [Vec3s; 24],
    pub func_82C: PlayerFunc82C,
    pub unk_830: f32_0,
    pub unk_834: s16,
    pub unk_836: s8,
    pub unk_837: u8_0,
    pub linearVelocity: f32_0,
    pub currentYaw: s16,
    pub targetYaw: s16,
    pub unk_840: u16_0,
    pub swordAnimation: s8,
    pub swordState: s8,
    pub unk_844: s8,
    pub unk_845: u8_0,
    pub unk_846: u8_0,
    pub unk_847: [s8; 4],
    pub unk_84B: [s8; 4],
    pub unk_84F: s8,
    pub unk_850: s16,
    pub unk_854: f32_0,
    pub unk_858: f32_0,
    pub unk_85C: f32_0,
    pub unk_860: s16,
    pub unk_862: s8,
    pub unk_864: f32_0,
    pub unk_868: f32_0,
    pub unk_86C: f32_0,
    pub unk_870: f32_0,
    pub unk_874: f32_0,
    pub unk_878: f32_0,
    pub unk_87C: s16,
    pub unk_87E: s16,
    pub unk_880: f32_0,
    pub wallHeight: f32_0,
    pub wallDistance: f32_0,
    pub unk_88C: u8_0,
    pub unk_88D: u8_0,
    pub unk_88E: u8_0,
    pub unk_88F: u8_0,
    pub unk_890: u8_0,
    pub shockTimer: u8_0,
    pub unk_892: u8_0,
    pub hoverBootsTimer: u8_0,
    pub fallStartHeight: s16,
    pub fallDistance: s16,
    pub unk_898: s16,
    pub unk_89A: s16,
    pub unk_89C: s16,
    pub unk_89E: u16_0,
    pub unk_8A0: u8_0,
    pub unk_8A1: u8_0,
    pub unk_8A2: s16,
    pub unk_8A4: f32_0,
    pub unk_8A8: f32_0,
    pub windSpeed: f32_0,
    pub windDirection: s16,
    pub swordInfo: [WeaponInfo; 3],
    pub bodyPartsPos: [Vec3f; 18],
    pub mf_9E0: MtxF,
    pub shieldMf: MtxF,
    pub isBurning: u8_0,
    pub flameTimers: [u8_0; 18],
    pub unk_A73: u8_0,
    pub func_A74: PlayerFuncA74,
    pub invincibilityTimer: s8,
    pub unk_A79: u8_0,
    pub unk_A7A: u8_0,
    pub unk_A7B: u8_0,
    pub unk_A7C: f32_0,
    pub unk_A80: s16,
    pub unk_A82: u16_0,
    pub unk_A84: s16,
    pub unk_A86: s8,
    pub unk_A87: u8_0,
    pub unk_A88: Vec3f,
}
pub type PlayerFuncA74
    =
    Option<unsafe extern "C" fn(_: *mut GlobalContext, _: *mut Player) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WeaponInfo {
    pub active: s32,
    pub tip: Vec3f,
    pub base: Vec3f,
}
pub type PlayerFunc82C
    =
    Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext)
               -> s32>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkelAnime {
    pub limbCount: u8_0,
    pub mode: u8_0,
    pub dListCount: u8_0,
    pub taper: s8,
    pub skeleton: *mut *mut libc::c_void,
    pub animation: *mut libc::c_void,
    pub startFrame: f32_0,
    pub endFrame: f32_0,
    pub animLength: f32_0,
    pub curFrame: f32_0,
    pub playSpeed: f32_0,
    pub jointTable: *mut Vec3s,
    pub morphTable: *mut Vec3s,
    pub morphWeight: f32_0,
    pub morphRate: f32_0,
    pub update: Option<unsafe extern "C" fn() -> s32>,
    pub initFlags: s8,
    pub moveFlags: u8_0,
    pub prevRot: s16,
    pub prevTransl: Vec3s,
    pub baseTransl: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PlayerAgeProperties {
    pub unk_00: f32_0,
    pub unk_04: f32_0,
    pub unk_08: f32_0,
    pub unk_0C: f32_0,
    pub unk_10: f32_0,
    pub unk_14: f32_0,
    pub unk_18: f32_0,
    pub unk_1C: f32_0,
    pub unk_20: f32_0,
    pub unk_24: f32_0,
    pub unk_28: f32_0,
    pub unk_2C: f32_0,
    pub unk_30: f32_0,
    pub unk_34: f32_0,
    pub unk_38: f32_0,
    pub unk_3C: f32_0,
    pub unk_40: f32_0,
    pub unk_44: Vec3s,
    pub unk_4A: [Vec3s; 4],
    pub unk_62: [Vec3s; 4],
    pub unk_7A: [Vec3s; 2],
    pub unk_86: [Vec3s; 2],
    pub unk_92: u16_0,
    pub unk_94: u16_0,
    pub unk_98: *mut LinkAnimationHeader,
    pub unk_9C: *mut LinkAnimationHeader,
    pub unk_A0: *mut LinkAnimationHeader,
    pub unk_A4: *mut LinkAnimationHeader,
    pub unk_A8: *mut LinkAnimationHeader,
    pub unk_AC: [*mut LinkAnimationHeader; 4],
    pub unk_BC: [*mut LinkAnimationHeader; 2],
    pub unk_C4: [*mut LinkAnimationHeader; 2],
    pub unk_CC: [*mut LinkAnimationHeader; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct LinkAnimationHeader {
    pub common: AnimationHeaderCommon,
    pub segment: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationHeaderCommon {
    pub frameCount: s16,
}
pub type PlayerFunc674
    =
    Option<unsafe extern "C" fn(_: *mut Player, _: *mut GlobalContext) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuad {
    pub base: Collider,
    pub info: ColliderInfo,
    pub dim: ColliderQuadDim,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderQuadDim {
    pub quad: [Vec3f; 4],
    pub dcMid: Vec3s,
    pub baMid: Vec3s,
    pub acDist: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderInfo {
    pub toucher: ColliderTouch,
    pub bumper: ColliderBump,
    pub elemType: u8_0,
    pub toucherFlags: u8_0,
    pub bumperFlags: u8_0,
    pub ocElemFlags: u8_0,
    pub atHit: *mut Collider,
    pub acHit: *mut Collider,
    pub atHitInfo: *mut ColliderInfo,
    pub acHitInfo: *mut ColliderInfo,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderBump {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub defense: u8_0,
    pub hitPos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderTouch {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub damage: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderCylinder {
    pub base: Collider,
    pub info: ColliderInfo,
    pub dim: Cylinder16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DmaRequest {
    pub vromAddr: u32_0,
    pub dramAddr: *mut libc::c_void,
    pub size: u32_0,
    pub filename: *const libc::c_char,
    pub line: s32,
    pub unk_14: s32,
    pub notifyQueue: *mut OSMesgQueue,
    pub notifyMsg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Input {
    pub cur: OSContPad,
    pub prev: OSContPad,
    pub press: OSContPad,
    pub rel: OSContPad,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FlexSkeletonHeader {
    pub sh: SkeletonHeader,
    pub dListCount: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkeletonHeader {
    pub segment: *mut *mut libc::c_void,
    pub limbCount: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionActorContext {
    pub numActors: u8_0,
    pub list: *mut TransitionActorEntry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TransitionActorEntry {
    pub sides: [C2RustUnnamed_6; 2],
    pub id: s16,
    pub pos: Vec3s,
    pub rotY: s16,
    pub params: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_6 {
    pub room: s8,
    pub effects: s8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct RoomContext {
    pub curRoom: Room,
    pub prevRoom: Room,
    pub bufPtrs: [*mut libc::c_void; 2],
    pub unk_30: u8_0,
    pub status: s8,
    pub unk_34: *mut libc::c_void,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub unk_74: [s16; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Room {
    pub num: s8,
    pub unk_01: u8_0,
    pub unk_02: u8_0,
    pub unk_03: u8_0,
    pub echo: s8,
    pub showInvisActors: u8_0,
    pub mesh: *mut Mesh,
    pub segment: *mut libc::c_void,
    pub unk_10: [libc::c_char; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union Mesh {
    pub polygon: Polygon,
    pub polygon0: PolygonType0,
    pub polygon1: PolygonType1,
    pub polygon2: PolygonType2,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType2 {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType1 {
    pub type_0: u8_0,
    pub format: u8_0,
    pub dlist: *mut Gfx,
    pub c2rust_unnamed: C2RustUnnamed_7,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_7 {
    pub single: C2RustUnnamed_9,
    pub multi: C2RustUnnamed_8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_8 {
    pub count: u8_0,
    pub list: *mut BgImage,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgImage {
    pub unk_00: u16_0,
    pub id: u8_0,
    pub source: u32_0,
    pub unk_0C: u32_0,
    pub tlut: u32_0,
    pub width: u16_0,
    pub height: u16_0,
    pub fmt: u8_0,
    pub siz: u8_0,
    pub mode0: u16_0,
    pub tlutCount: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_9 {
    pub source: *mut libc::c_void,
    pub unk_0C: u32_0,
    pub tlut: *mut libc::c_void,
    pub width: u16_0,
    pub height: u16_0,
    pub fmt: u8_0,
    pub siz: u8_0,
    pub mode0: u16_0,
    pub tlutCount: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PolygonType0 {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Polygon {
    pub type_0: u8_0,
    pub num: u8_0,
    pub start: *mut libc::c_void,
    pub end: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ObjectContext {
    pub spaceStart: *mut libc::c_void,
    pub spaceEnd: *mut libc::c_void,
    pub num: u8_0,
    pub unk_09: u8_0,
    pub mainKeepIndex: u8_0,
    pub subKeepIndex: u8_0,
    pub status: [ObjectStatus; 19],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ObjectStatus {
    pub id: s16,
    pub segment: *mut libc::c_void,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationContext {
    pub animationCount: s16,
    pub entries: [AnimationEntry; 50],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationEntry {
    pub type_0: u8_0,
    pub data: AnimationEntryData,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union AnimationEntryData {
    pub load: AnimEntryLoadFrame,
    pub copy: AnimEntryCopyAll,
    pub interp: AnimEntryInterp,
    pub copy1: AnimEntryCopyTrue,
    pub copy0: AnimEntryCopyFalse,
    pub move_0: AnimEntryMoveActor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryMoveActor {
    pub actor: *mut Actor,
    pub skelAnime: *mut SkelAnime,
    pub unk_08: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyFalse {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
    pub copyFlag: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyTrue {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
    pub copyFlag: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryInterp {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub base: *mut Vec3s,
    pub mod_0: *mut Vec3s,
    pub weight: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryCopyAll {
    pub queueFlag: u8_0,
    pub vecCount: u8_0,
    pub dst: *mut Vec3s,
    pub src: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimEntryLoadFrame {
    pub req: DmaRequest,
    pub msgQueue: OSMesgQueue,
    pub msg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnvironmentContext {
    pub unk_00: [libc::c_char; 2],
    pub timeIncrement: u16_0,
    pub sunPos: Vec3f,
    pub skybox1Index: u8_0,
    pub skybox2Index: u8_0,
    pub unk_12: [libc::c_char; 1],
    pub skyboxBlend: u8_0,
    pub unk_14: [libc::c_char; 1],
    pub skyboxDisabled: u8_0,
    pub sunMoonDisabled: u8_0,
    pub unk_17: u8_0,
    pub unk_18: u8_0,
    pub unk_19: u8_0,
    pub unk_1A: u16_0,
    pub unk_1C: [libc::c_char; 2],
    pub indoors: u8_0,
    pub unk_1F: u8_0,
    pub unk_20: u8_0,
    pub unk_21: u8_0,
    pub unk_22: u16_0,
    pub unk_24: u16_0,
    pub unk_26: [libc::c_char; 2],
    pub dirLight1: LightInfo,
    pub dirLight2: LightInfo,
    pub skyboxDmaState: s8,
    pub dmaRequest: DmaRequest,
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub unk_84: f32_0,
    pub unk_88: f32_0,
    pub adjAmbientColor: [s16; 3],
    pub adjLight1Color: [s16; 3],
    pub adjFogColor: [s16; 3],
    pub adjFogNear: s16,
    pub adjFogFar: s16,
    pub unk_A2: [libc::c_char; 6],
    pub windDirection: Vec3s,
    pub windSpeed: f32_0,
    pub numLightSettings: u8_0,
    pub lightSettingsList: *mut EnvLightSettings,
    pub blendIndoorLights: u8_0,
    pub unk_BD: u8_0,
    pub unk_BE: u8_0,
    pub unk_BF: u8_0,
    pub lightSettings: EnvLightSettings,
    pub unk_D6: u16_0,
    pub unk_D8: f32_0,
    pub unk_DC: u8_0,
    pub gloomySkyMode: u8_0,
    pub unk_DE: u8_0,
    pub lightningMode: u8_0,
    pub unk_E0: u8_0,
    pub fillScreen: u8_0,
    pub screenFillColor: [u8_0; 4],
    pub sandstormState: u8_0,
    pub sandstormPrimA: u8_0,
    pub sandstormEnvA: u8_0,
    pub customSkyboxFilter: u8_0,
    pub skyboxFilterColor: [u8_0; 4],
    pub unk_EE: [u8_0; 4],
    pub unk_F2: [u8_0; 4],
    pub unk_F6: [libc::c_char; 6],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnvLightSettings {
    pub ambientColor: [u8_0; 3],
    pub light1Dir: [s8; 3],
    pub light1Color: [u8_0; 3],
    pub light2Dir: [s8; 3],
    pub light2Color: [u8_0; 3],
    pub fogColor: [u8_0; 3],
    pub fogNear: s16,
    pub fogFar: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameOverContext {
    pub state: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PauseContext {
    pub view: View,
    pub iconItemSegment: *mut u8_0,
    pub iconItem24Segment: *mut u8_0,
    pub iconItemAltSegment: *mut u8_0,
    pub iconItemLangSegment: *mut u8_0,
    pub nameSegment: *mut u8_0,
    pub playerSegment: *mut u8_0,
    pub unk_140: [libc::c_char; 4],
    pub itemPageVtx: *mut Vtx,
    pub equipPageVtx: *mut Vtx,
    pub mapPageVtx: *mut Vtx,
    pub questPageVtx: *mut Vtx,
    pub infoPanelVtx: *mut Vtx,
    pub itemVtx: *mut Vtx,
    pub equipVtx: *mut Vtx,
    pub unk_160: [libc::c_char; 4],
    pub questVtx: *mut Vtx,
    pub cursorVtx: *mut Vtx,
    pub saveVtx: *mut Vtx,
    pub unk_170: [libc::c_char; 36],
    pub ocarinaStaff: *mut OcarinaStaff,
    pub unk_198: [libc::c_char; 32],
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub state: u16_0,
    pub debugState: u16_0,
    pub eye: Vec3f,
    pub unk_1E4: u16_0,
    pub mode: u16_0,
    pub pageIndex: u16_0,
    pub unk_1EA: u16_0,
    pub unk_1EC: u16_0,
    pub unk_1F0: f32_0,
    pub unk_1F4: f32_0,
    pub unk_1F8: f32_0,
    pub unk_1FC: f32_0,
    pub unk_200: f32_0,
    pub unk_204: f32_0,
    pub alpha: u16_0,
    pub offsetY: s16,
    pub unk_20C: [libc::c_char; 8],
    pub stickRelX: s16,
    pub stickRelY: s16,
    pub cursorPoint: [s16; 5],
    pub cursorX: [s16; 5],
    pub cursorY: [s16; 5],
    pub dungeonMapSlot: s16,
    pub cursorSpecialPos: s16,
    pub pageSwitchTimer: s16,
    pub namedItem: u16_0,
    pub cursorItem: [u16_0; 4],
    pub cursorSlot: [u16_0; 4],
    pub equipTargetItem: u16_0,
    pub equipTargetSlot: u16_0,
    pub equipTargetCBtn: u16_0,
    pub equipAnimX: s16,
    pub equipAnimY: s16,
    pub equipAnimAlpha: s16,
    pub infoPanelOffsetY: s16,
    pub nameDisplayTimer: u16_0,
    pub nameColorSet: u16_0,
    pub cursorColorSet: s16,
    pub promptChoice: s16,
    pub ocarinaSongIdx: s16,
    pub worldMapPoints: [u8_0; 20],
    pub tradeQuestLocation: u8_0,
    pub playerSkelAnime: SkelAnime,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OcarinaStaff {
    pub noteIdx: u8_0,
    pub state: u8_0,
    pub pos: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct View {
    pub magic: s32,
    pub gfxCtx: *mut GraphicsContext,
    pub viewport: Viewport,
    pub fovy: f32_0,
    pub zNear: f32_0,
    pub zFar: f32_0,
    pub scale: f32_0,
    pub eye: Vec3f,
    pub lookAt: Vec3f,
    pub up: Vec3f,
    pub vp: Vp,
    pub projection: Mtx,
    pub viewing: Mtx,
    pub projectionPtr: *mut Mtx,
    pub viewingPtr: *mut Mtx,
    pub unk_E8: Vec3f,
    pub unk_F4: Vec3f,
    pub unk_100: f32_0,
    pub unk_104: Vec3f,
    pub unk_110: Vec3f,
    pub normal: u16_0,
    pub flags: s32,
    pub unk_124: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Viewport {
    pub topY: s32,
    pub bottomY: s32,
    pub leftX: s32,
    pub rightX: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GraphicsContext {
    pub polyOpaBuffer: *mut Gfx,
    pub polyXluBuffer: *mut Gfx,
    pub unk_008: [libc::c_char; 8],
    pub overlayBuffer: *mut Gfx,
    pub unk_014: u32_0,
    pub unk_018: [libc::c_char; 32],
    pub msgBuff: [OSMesg; 8],
    pub schedMsgQ: *mut OSMesgQueue,
    pub queue: OSMesgQueue,
    pub unk_074: [libc::c_char; 4],
    pub task: OSScTask,
    pub unk_0D0: [libc::c_char; 224],
    pub workBuffer: *mut Gfx,
    pub work: TwoHeadGfxArena,
    pub unk_01C4: [libc::c_char; 192],
    pub viMode: *mut OSViMode,
    pub unk_0288: [libc::c_char; 32],
    pub overlay: TwoHeadGfxArena,
    pub polyOpa: TwoHeadGfxArena,
    pub polyXlu: TwoHeadGfxArena,
    pub gfxPoolIdx: u32_0,
    pub curFrameBuffer: *mut u16_0,
    pub unk_2E0: [libc::c_char; 4],
    pub viFeatures: u32_0,
    pub fbIdx: s32,
    pub callback: Option<unsafe extern "C" fn(_: *mut GraphicsContext,
                                              _: *mut libc::c_void) -> ()>,
    pub callbackParam: *mut libc::c_void,
    pub xScale: f32_0,
    pub yScale: f32_0,
    pub unk_2FC: [libc::c_char; 4],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TwoHeadGfxArena {
    pub size: u32_0,
    pub bufp: *mut Gfx,
    pub p: *mut Gfx,
    pub d: *mut Gfx,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct OSScTask {
    pub next: *mut OSScTask,
    pub state: u32_0,
    pub flags: u32_0,
    pub framebuffer: *mut CfbInfo,
    pub list: OSTask,
    pub msgQ: *mut OSMesgQueue,
    pub msg: OSMesg,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CfbInfo {
    pub fb1: *mut u16_0,
    pub swapBuffer: *mut u16_0,
    pub viMode: *mut OSViMode,
    pub features: u32_0,
    pub unk_10: u8_0,
    pub updateRate: s8,
    pub updateRate2: s8,
    pub unk_13: u8_0,
    pub xScale: f32_0,
    pub yScale: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct InterfaceContext {
    pub view: View,
    pub actionVtx: *mut Vtx,
    pub beatingHeartVtx: *mut Vtx,
    pub parameterSegment: *mut u8_0,
    pub doActionSegment: *mut u8_0,
    pub iconItemSegment: *mut u8_0,
    pub mapSegment: *mut u8_0,
    pub mapPalette: [u8_0; 32],
    pub dmaRequest_160: DmaRequest,
    pub dmaRequest_180: DmaRequest,
    pub unk_1A0: [libc::c_char; 32],
    pub loadQueue: OSMesgQueue,
    pub loadMsg: OSMesg,
    pub viewport: Viewport,
    pub unk_1EC: s16,
    pub unk_1EE: u16_0,
    pub unk_1F0: u16_0,
    pub unk_1F4: f32_0,
    pub naviCalling: s16,
    pub unk_1FA: s16,
    pub unk_1FC: s16,
    pub unk_1FE: s16,
    pub unk_200: s16,
    pub beatingHeartPrim: [s16; 3],
    pub beatingHeartEnv: [s16; 3],
    pub heartsPrimR: [s16; 2],
    pub heartsPrimG: [s16; 2],
    pub heartsPrimB: [s16; 2],
    pub heartsEnvR: [s16; 2],
    pub heartsEnvG: [s16; 2],
    pub heartsEnvB: [s16; 2],
    pub unk_226: s16,
    pub unk_228: s16,
    pub unk_22A: s16,
    pub unk_22C: s16,
    pub unk_22E: s16,
    pub unk_230: s16,
    pub counterDigits: [s16; 4],
    pub numHorseBoosts: u8_0,
    pub unk_23C: u16_0,
    pub hbaAmmo: u16_0,
    pub unk_240: u16_0,
    pub unk_242: u16_0,
    pub unk_244: u16_0,
    pub aAlpha: u16_0,
    pub bAlpha: u16_0,
    pub cLeftAlpha: u16_0,
    pub cDownAlpha: u16_0,
    pub cRightAlpha: u16_0,
    pub healthAlpha: u16_0,
    pub magicAlpha: u16_0,
    pub minimapAlpha: u16_0,
    pub startAlpha: s16,
    pub unk_258: s16,
    pub unk_25A: s16,
    pub mapRoomNum: s16,
    pub mapPaletteIndex: s16,
    pub unk_260: u8_0,
    pub unk_261: u8_0,
    pub restrictions: C2RustUnnamed_10,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_10 {
    pub hGauge: u8_0,
    pub bButton: u8_0,
    pub aButton: u8_0,
    pub bottles: u8_0,
    pub tradeItems: u8_0,
    pub hookshot: u8_0,
    pub ocarina: u8_0,
    pub warpSongs: u8_0,
    pub sunsSong: u8_0,
    pub farores: u8_0,
    pub dinsNayrus: u8_0,
    pub all: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct MessageContext {
    pub view: View,
    pub font: Font,
    pub textboxSegment: *mut libc::c_void,
    pub unk_E2B4: [libc::c_char; 4],
    pub ocarinaStaff: *mut OcarinaStaff,
    pub unk_E2BC: [libc::c_char; 60],
    pub textId: u16_0,
    pub choiceTextId: u16_0,
    pub textBoxProperties: u8_0,
    pub textBoxType: u8_0,
    pub textBoxPos: u8_0,
    pub msgLength: s32,
    pub msgMode: u8_0,
    pub unk_E305: [libc::c_char; 1],
    pub msgBufDecoded: [u8_0; 200],
    pub msgBufPos: u16_0,
    pub unk_E3D0: u16_0,
    pub textDrawPos: u16_0,
    pub decodedTextLen: u16_0,
    pub textUnskippable: u16_0,
    pub textPosX: s16,
    pub textPosY: s16,
    pub textColorR: s16,
    pub textColorG: s16,
    pub textColorB: s16,
    pub textColorAlpha: s16,
    pub textboxEndType: u8_0,
    pub choiceIndex: u8_0,
    pub choiceNum: u8_0,
    pub stateTimer: u8_0,
    pub textDelayTimer: u16_0,
    pub textDelay: u16_0,
    pub lastPlayedSong: u16_0,
    pub ocarinaMode: u16_0,
    pub ocarinaAction: u16_0,
    pub unk_E3F2: u16_0,
    pub unk_E3F4: u16_0,
    pub textboxBackgroundIdx: u16_0,
    pub textboxBackgroundForeColorIdx: u8_0,
    pub textboxBackgroundBackColorIdx: u8_0,
    pub textboxBackgroundYOffsetIdx: u8_0,
    pub textboxBackgroundUnkArg: u8_0,
    pub unk_E3FC: [libc::c_char; 2],
    pub textboxColorRed: s16,
    pub textboxColorGreen: s16,
    pub textboxColorBlue: s16,
    pub textboxColorAlphaTarget: s16,
    pub textboxColorAlphaCurrent: s16,
    pub talkActor: *mut Actor,
    pub disableWarpSongs: s16,
    pub unk_E40E: s16,
    pub lastOcaNoteIdx: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Font {
    pub msgOffset: u32_0,
    pub msgLength: u32_0,
    pub charTexBuf: [u8_0; 15360],
    pub iconBuf: [u8_0; 128],
    pub fontBuf: [u8_0; 40960],
    pub c2rust_unnamed: C2RustUnnamed_11,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_11 {
    pub msgBuf: [libc::c_char; 1280],
    pub msgBufWide: [u16_0; 640],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SkyboxContext {
    pub unk_00: [libc::c_char; 296],
    pub staticSegments: [*mut libc::c_void; 2],
    pub palettes: *mut [u16_0; 256],
    pub dListBuf: *mut [Gfx; 150],
    pub unk_138: *mut Gfx,
    pub roomVtx: *mut Vtx,
    pub unk_140: s16,
    pub rot: Vec3f,
    pub unk_150: [libc::c_char; 16],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SramContext {
    pub readBuff: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SoundSource {
    pub countdown: u16_0,
    pub originPos: Vec3f,
    pub relativePos: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CutsceneContext {
    pub unk_00: [libc::c_char; 4],
    pub segment: *mut libc::c_void,
    pub state: u8_0,
    pub unk_0C: f32_0,
    pub frames: u16_0,
    pub unk_12: u16_0,
    pub unk_14: s32,
    pub unk_18: u16_0,
    pub unk_1A: u8_0,
    pub unk_1B: u8_0,
    pub cameraFocus: *mut CutsceneCameraPoint,
    pub cameraPosition: *mut CutsceneCameraPoint,
    pub linkAction: *mut CsCmdActorAction,
    pub npcActions: [*mut CsCmdActorAction; 10],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CsCmdActorAction {
    pub action: u16_0,
    pub startFrame: u16_0,
    pub endFrame: u16_0,
    pub c2rust_unnamed: C2RustUnnamed_12,
    pub startPos: Vec3i,
    pub endPos: Vec3i,
    pub normal: Vec3i,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub union C2RustUnnamed_12 {
    pub rot: Vec3s,
    pub urot: Vec3us,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CutsceneCameraPoint {
    pub continueFlag: s8,
    pub cameraRoll: s8,
    pub nextPointFrame: u16_0,
    pub viewAngle: f32_0,
    pub pos: Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorContext {
    pub freezeFlashTimer: u8_0,
    pub unk_01: [libc::c_char; 1],
    pub unk_02: u8_0,
    pub unk_03: u8_0,
    pub unk_04: [libc::c_char; 4],
    pub total: u8_0,
    pub unk_09: [libc::c_char; 3],
    pub actorLists: [ActorListEntry; 12],
    pub targetCtx: TargetContext,
    pub flags: C2RustUnnamed_13,
    pub titleCtx: TitleCardContext,
    pub unk_138: [libc::c_char; 4],
    pub absoluteSpace: *mut libc::c_void,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TitleCardContext {
    pub texture: *mut libc::c_void,
    pub x: s16,
    pub y: s16,
    pub width: u8_0,
    pub height: u8_0,
    pub durationTimer: u8_0,
    pub delayTimer: u8_0,
    pub alpha: s16,
    pub intensity: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_13 {
    pub swch: u32_0,
    pub tempSwch: u32_0,
    pub unk0: u32_0,
    pub unk1: u32_0,
    pub chest: u32_0,
    pub clear: u32_0,
    pub tempClear: u32_0,
    pub collect: u32_0,
    pub tempCollect: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TargetContext {
    pub naviRefPos: Vec3f,
    pub targetCenterPos: Vec3f,
    pub naviInner: Color_RGBAf,
    pub naviOuter: Color_RGBAf,
    pub arrowPointedActor: *mut Actor,
    pub targetedActor: *mut Actor,
    pub unk_40: f32_0,
    pub unk_44: f32_0,
    pub unk_48: s16,
    pub activeCategory: u8_0,
    pub unk_4B: u8_0,
    pub unk_4C: s8,
    pub unk_4D: [libc::c_char; 3],
    pub arr_50: [TargetContextEntry; 3],
    pub unk_8C: *mut Actor,
    pub bgmEnemy: *mut Actor,
    pub unk_94: *mut Actor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TargetContextEntry {
    pub pos: Vec3f,
    pub unk_0C: f32_0,
    pub color: Color_RGB8,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ActorListEntry {
    pub length: s32,
    pub head: *mut Actor,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionContext {
    pub colHeader: *mut CollisionHeader,
    pub minBounds: Vec3f,
    pub maxBounds: Vec3f,
    pub subdivAmount: Vec3i,
    pub subdivLength: Vec3f,
    pub subdivLengthInv: Vec3f,
    pub lookupTbl: *mut StaticLookup,
    pub polyNodes: SSNodeList,
    pub dyna: DynaCollisionContext,
    pub memSize: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaCollisionContext {
    pub bitFlag: u8_0,
    pub bgActors: [BgActor; 50],
    pub bgActorFlags: [u16_0; 50],
    pub polyList: *mut CollisionPoly,
    pub vtxList: *mut Vec3s,
    pub polyNodes: DynaSSNodeList,
    pub polyNodesMax: s32,
    pub polyListMax: s32,
    pub vtxListMax: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaSSNodeList {
    pub tbl: *mut SSNode,
    pub count: s32,
    pub max: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSNode {
    pub polyId: s16,
    pub next: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BgActor {
    pub actor: *mut Actor,
    pub colHeader: *mut CollisionHeader,
    pub dynaLookup: DynaLookup,
    pub vtxStartIndex: u16_0,
    pub prevTransform: ScaleRotPos,
    pub curTransform: ScaleRotPos,
    pub boundingSphere: Sphere16,
    pub minY: f32_0,
    pub maxY: f32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ScaleRotPos {
    pub scale: Vec3f,
    pub rot: Vec3s,
    pub pos: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaLookup {
    pub polyStartIndex: u16_0,
    pub ceiling: SSList,
    pub wall: SSList,
    pub floor: SSList,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSList {
    pub head: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CollisionHeader {
    pub minBounds: Vec3s,
    pub maxBounds: Vec3s,
    pub numVertices: u16_0,
    pub vtxList: *mut Vec3s,
    pub numPolygons: u16_0,
    pub polyList: *mut CollisionPoly,
    pub surfaceTypeList: *mut SurfaceType,
    pub cameraDataList: *mut CamData,
    pub numWaterBoxes: u16_0,
    pub waterBoxes: *mut WaterBox,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct WaterBox {
    pub xMin: s16,
    pub ySurface: s16,
    pub zMin: s16,
    pub xLength: s16,
    pub zLength: s16,
    pub properties: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CamData {
    pub cameraSType: u16_0,
    pub numCameras: s16,
    pub camPosData: *mut Vec3s,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SurfaceType {
    pub data: [u32_0; 2],
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SSNodeList {
    pub max: u16_0,
    pub count: u16_0,
    pub tbl: *mut SSNode,
    pub polyCheckTbl: *mut u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct StaticLookup {
    pub floor: SSList,
    pub wall: SSList,
    pub ceiling: SSList,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct FrameAdvanceContext {
    pub enabled: s32,
    pub timer: s32,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct SequenceContext {
    pub seqId: u8_0,
    pub natureAmbienceId: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct Camera {
    pub paramData: [libc::c_char; 80],
    pub at: Vec3f,
    pub eye: Vec3f,
    pub up: Vec3f,
    pub eyeNext: Vec3f,
    pub skyboxOffset: Vec3f,
    pub globalCtx: *mut GlobalContext,
    pub player: *mut Player,
    pub playerPosRot: PosRot,
    pub target: *mut Actor,
    pub targetPosRot: PosRot,
    pub rUpdateRateInv: f32_0,
    pub pitchUpdateRateInv: f32_0,
    pub yawUpdateRateInv: f32_0,
    pub xzOffsetUpdateRate: f32_0,
    pub yOffsetUpdateRate: f32_0,
    pub fovUpdateRate: f32_0,
    pub xzSpeed: f32_0,
    pub dist: f32_0,
    pub speedRatio: f32_0,
    pub posOffset: Vec3f,
    pub playerPosDelta: Vec3f,
    pub fov: f32_0,
    pub atLERPStepScale: f32_0,
    pub playerGroundY: f32_0,
    pub floorNorm: Vec3f,
    pub waterYPos: f32_0,
    pub waterPrevCamIdx: s32,
    pub waterPrevCamSetting: s32,
    pub waterQuakeId: s32,
    pub data0: *mut libc::c_void,
    pub data1: *mut libc::c_void,
    pub data2: s16,
    pub data3: s16,
    pub uid: s16,
    pub unk_132: [libc::c_char; 2],
    pub inputDir: Vec3s,
    pub camDir: Vec3s,
    pub status: s16,
    pub setting: s16,
    pub mode: s16,
    pub bgCheckId: s16,
    pub camDataIdx: s16,
    pub unk_14A: s16,
    pub unk_14C: s16,
    pub childCamIdx: s16,
    pub unk_150: s16,
    pub unk_152: s16,
    pub prevSetting: s16,
    pub nextCamDataIdx: s16,
    pub nextBGCheckId: s16,
    pub roll: s16,
    pub paramFlags: s16,
    pub animState: s16,
    pub timer: s16,
    pub parentCamIdx: s16,
    pub thisIdx: s16,
    pub prevCamDataIdx: s16,
    pub csId: s16,
    pub unk_16A: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameState {
    pub gfxCtx: *mut GraphicsContext,
    pub main: GameStateFunc,
    pub destroy: GameStateFunc,
    pub init: GameStateFunc,
    pub size: u32_0,
    pub input: [Input; 4],
    pub tha: TwoHeadArena,
    pub alloc: GameAlloc,
    pub running: u32_0,
    pub frames: u32_0,
    pub unk_A0: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameAlloc {
    pub base: GameAllocEntry,
    pub head: *mut GameAllocEntry,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct GameAllocEntry {
    pub next: *mut GameAllocEntry,
    pub prev: *mut GameAllocEntry,
    pub size: u32_0,
    pub unk_0C: u32_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct TwoHeadArena {
    pub size: u32_0,
    pub bufp: *mut libc::c_void,
    pub head: *mut libc::c_void,
    pub tail: *mut libc::c_void,
}
pub type GameStateFunc
    =
    Option<unsafe extern "C" fn(_: *mut GameState) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DynaPolyActor {
    pub actor: Actor,
    pub bgId: s32,
    pub unk_150: f32_0,
    pub unk_154: f32_0,
    pub unk_158: s16,
    pub unk_15A: u16_0,
    pub unk_15C: u32_0,
    pub unk_160: u8_0,
    pub unk_162: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct JointIndex {
    pub x: u16_0,
    pub y: u16_0,
    pub z: u16_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct AnimationHeader {
    pub common: AnimationHeaderCommon,
    pub frameData: *mut s16,
    pub jointIndices: *mut JointIndex,
    pub staticIndexMax: u16_0,
}
pub type OverrideLimbDrawOpa
    =
    Option<unsafe extern "C" fn(_: *mut GlobalContext, _: s32,
                                _: *mut *mut Gfx, _: *mut Vec3f,
                                _: *mut Vec3s, _: *mut libc::c_void) -> s32>;
pub type PostLimbDrawOpa
    =
    Option<unsafe extern "C" fn(_: *mut GlobalContext, _: s32,
                                _: *mut *mut Gfx, _: *mut Vec3s,
                                _: *mut libc::c_void) -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderInit {
    pub colType: u8_0,
    pub atFlags: u8_0,
    pub acFlags: u8_0,
    pub ocFlags1: u8_0,
    pub ocFlags2: u8_0,
    pub shape: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderBumpInit {
    pub dmgFlags: u32_0,
    pub effect: u8_0,
    pub defense: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderInfoInit {
    pub elemType: u8_0,
    pub toucher: ColliderTouch,
    pub bumper: ColliderBumpInit,
    pub toucherFlags: u8_0,
    pub bumperFlags: u8_0,
    pub ocElemFlags: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSphElementDim {
    pub modelSphere: Sphere16,
    pub worldSphere: Sphere16,
    pub scale: f32_0,
    pub limb: u8_0,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSphElementDimInit {
    pub limb: u8_0,
    pub modelSphere: Sphere16,
    pub scale: s16,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSphElement {
    pub info: ColliderInfo,
    pub dim: ColliderJntSphElementDim,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSphElementInit {
    pub info: ColliderInfoInit,
    pub dim: ColliderJntSphElementDimInit,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSph {
    pub base: Collider,
    pub count: s32,
    pub elements: *mut ColliderJntSphElement,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct ColliderJntSphInit {
    pub base: ColliderInit,
    pub count: s32,
    pub elements: *mut ColliderJntSphElementInit,
}
pub type C2RustUnnamed_14 = libc::c_uint;
pub const COLTYPE_TREE: C2RustUnnamed_14 = 13;
pub const COLTYPE_HARD: C2RustUnnamed_14 = 12;
pub const COLTYPE_WOOD: C2RustUnnamed_14 = 11;
pub const COLTYPE_NONE: C2RustUnnamed_14 = 10;
pub const COLTYPE_METAL: C2RustUnnamed_14 = 9;
pub const COLTYPE_HIT8: C2RustUnnamed_14 = 8;
pub const COLTYPE_HIT7: C2RustUnnamed_14 = 7;
pub const COLTYPE_HIT6: C2RustUnnamed_14 = 6;
pub const COLTYPE_HIT5: C2RustUnnamed_14 = 5;
pub const COLTYPE_HIT4: C2RustUnnamed_14 = 4;
pub const COLTYPE_HIT3: C2RustUnnamed_14 = 3;
pub const COLTYPE_HIT2: C2RustUnnamed_14 = 2;
pub const COLTYPE_HIT1: C2RustUnnamed_14 = 1;
pub const COLTYPE_HIT0: C2RustUnnamed_14 = 0;
pub type C2RustUnnamed_15 = libc::c_uint;
pub const COLSHAPE_INVALID: C2RustUnnamed_15 = 4;
pub const COLSHAPE_QUAD: C2RustUnnamed_15 = 3;
pub const COLSHAPE_TRIS: C2RustUnnamed_15 = 2;
pub const COLSHAPE_CYLINDER: C2RustUnnamed_15 = 1;
pub const COLSHAPE_JNTSPH: C2RustUnnamed_15 = 0;
pub type C2RustUnnamed_16 = libc::c_uint;
pub const ELEMTYPE_UNK7: C2RustUnnamed_16 = 7;
pub const ELEMTYPE_UNK6: C2RustUnnamed_16 = 6;
pub const ELEMTYPE_UNK5: C2RustUnnamed_16 = 5;
pub const ELEMTYPE_UNK4: C2RustUnnamed_16 = 4;
pub const ELEMTYPE_UNK3: C2RustUnnamed_16 = 3;
pub const ELEMTYPE_UNK2: C2RustUnnamed_16 = 2;
pub const ELEMTYPE_UNK1: C2RustUnnamed_16 = 1;
pub const ELEMTYPE_UNK0: C2RustUnnamed_16 = 0;
pub type C2RustUnnamed_17 = libc::c_uint;
pub const ACTORCAT_CHEST: C2RustUnnamed_17 = 11;
pub const ACTORCAT_DOOR: C2RustUnnamed_17 = 10;
pub const ACTORCAT_BOSS: C2RustUnnamed_17 = 9;
pub const ACTORCAT_MISC: C2RustUnnamed_17 = 8;
pub const ACTORCAT_ITEMACTION: C2RustUnnamed_17 = 7;
pub const ACTORCAT_PROP: C2RustUnnamed_17 = 6;
pub const ACTORCAT_ENEMY: C2RustUnnamed_17 = 5;
pub const ACTORCAT_NPC: C2RustUnnamed_17 = 4;
pub const ACTORCAT_EXPLOSIVE: C2RustUnnamed_17 = 3;
pub const ACTORCAT_PLAYER: C2RustUnnamed_17 = 2;
pub const ACTORCAT_BG: C2RustUnnamed_17 = 1;
pub const ACTORCAT_SWITCH: C2RustUnnamed_17 = 0;
pub type C2RustUnnamed_18 = libc::c_uint;
pub const ACTOR_ID_MAX: C2RustUnnamed_18 = 471;
pub const ACTOR_OBJ_WARP2BLOCK: C2RustUnnamed_18 = 470;
pub const ACTOR_BG_JYA_BLOCK: C2RustUnnamed_18 = 469;
pub const ACTOR_EN_MM2: C2RustUnnamed_18 = 468;
pub const ACTOR_EN_ZL4: C2RustUnnamed_18 = 467;
pub const ACTOR_OBJ_HAMISHI: C2RustUnnamed_18 = 466;
pub const ACTOR_OBJ_TIMEBLOCK: C2RustUnnamed_18 = 465;
pub const ACTOR_EN_GE3: C2RustUnnamed_18 = 464;
pub const ACTOR_OBJ_MAKEKINSUTA: C2RustUnnamed_18 = 463;
pub const ACTOR_EN_ZO: C2RustUnnamed_18 = 462;
pub const ACTOR_BG_MENKURI_NISEKABE: C2RustUnnamed_18 = 461;
pub const ACTOR_EN_EG: C2RustUnnamed_18 = 460;
pub const ACTOR_OCEFF_WIPE4: C2RustUnnamed_18 = 459;
pub const ACTOR_EN_KAKASI3: C2RustUnnamed_18 = 458;
pub const ACTOR_EN_KAKASI2: C2RustUnnamed_18 = 457;
pub const ACTOR_BG_ICE_SHUTTER: C2RustUnnamed_18 = 456;
pub const ACTOR_BG_ICE_TURARA: C2RustUnnamed_18 = 455;
pub const ACTOR_EN_COW: C2RustUnnamed_18 = 454;
pub const ACTOR_EN_MA3: C2RustUnnamed_18 = 453;
pub const ACTOR_BG_SPOT18_SHUTTER: C2RustUnnamed_18 = 452;
pub const ACTOR_BG_SPOT18_FUTA: C2RustUnnamed_18 = 451;
pub const ACTOR_BG_SPOT11_OASIS: C2RustUnnamed_18 = 450;
pub const ACTOR_DOOR_KILLER: C2RustUnnamed_18 = 449;
pub const ACTOR_EN_CROW: C2RustUnnamed_18 = 448;
pub const ACTOR_EN_PO_DESERT: C2RustUnnamed_18 = 447;
pub const ACTOR_EN_WALL_TUBO: C2RustUnnamed_18 = 446;
pub const ACTOR_BG_BOWL_WALL: C2RustUnnamed_18 = 445;
pub const ACTOR_EN_DAIKU_KAKARIKO: C2RustUnnamed_18 = 444;
pub const ACTOR_BG_MIZU_SHUTTER: C2RustUnnamed_18 = 443;
pub const ACTOR_BG_MIZU_BWALL: C2RustUnnamed_18 = 442;
pub const ACTOR_EN_GS: C2RustUnnamed_18 = 441;
pub const ACTOR_EN_GB: C2RustUnnamed_18 = 440;
pub const ACTOR_BG_GND_ICEBLOCK: C2RustUnnamed_18 = 439;
pub const ACTOR_BG_GND_NISEKABE: C2RustUnnamed_18 = 438;
pub const ACTOR_BG_GND_SOULMEIRO: C2RustUnnamed_18 = 437;
pub const ACTOR_BG_GND_DARKMEIRO: C2RustUnnamed_18 = 436;
pub const ACTOR_BG_GND_FIREMEIRO: C2RustUnnamed_18 = 435;
pub const ACTOR_DEMO_GEFF: C2RustUnnamed_18 = 434;
pub const ACTOR_DEMO_GJ: C2RustUnnamed_18 = 433;
pub const ACTOR_EN_SKB: C2RustUnnamed_18 = 432;
pub const ACTOR_EN_WF: C2RustUnnamed_18 = 431;
pub const ACTOR_EN_GO2: C2RustUnnamed_18 = 430;
pub const ACTOR_EN_MU: C2RustUnnamed_18 = 429;
pub const ACTOR_EN_TG: C2RustUnnamed_18 = 428;
pub const ACTOR_OBJ_MURE3: C2RustUnnamed_18 = 427;
pub const ACTOR_UNSET_1AA: C2RustUnnamed_18 = 426;
pub const ACTOR_BG_SPOT17_BAKUDANKABE: C2RustUnnamed_18 = 425;
pub const ACTOR_BG_SPOT08_BAKUDANKABE: C2RustUnnamed_18 = 424;
pub const ACTOR_DEMO_KEKKAI: C2RustUnnamed_18 = 423;
pub const ACTOR_EN_HS2: C2RustUnnamed_18 = 422;
pub const ACTOR_BG_BOM_GUARD: C2RustUnnamed_18 = 421;
pub const ACTOR_EN_GUEST: C2RustUnnamed_18 = 420;
pub const ACTOR_EN_DNT_NOMAL: C2RustUnnamed_18 = 419;
pub const ACTOR_EN_DNT_JIJI: C2RustUnnamed_18 = 418;
pub const ACTOR_EN_DNT_DEMO: C2RustUnnamed_18 = 417;
pub const ACTOR_OBJ_KIBAKO2: C2RustUnnamed_18 = 416;
pub const ACTOR_BG_SPOT11_BAKUDANKABE: C2RustUnnamed_18 = 415;
pub const ACTOR_OBJ_COMB: C2RustUnnamed_18 = 414;
pub const ACTOR_BG_SPOT01_OBJECTS2: C2RustUnnamed_18 = 413;
pub const ACTOR_EN_SI: C2RustUnnamed_18 = 412;
pub const ACTOR_EN_DOG: C2RustUnnamed_18 = 411;
pub const ACTOR_EN_NIW_GIRL: C2RustUnnamed_18 = 410;
pub const ACTOR_OCEFF_WIPE3: C2RustUnnamed_18 = 409;
pub const ACTOR_OCEFF_WIPE2: C2RustUnnamed_18 = 408;
pub const ACTOR_EN_GELDB: C2RustUnnamed_18 = 407;
pub const ACTOR_EN_IT: C2RustUnnamed_18 = 406;
pub const ACTOR_EN_SHOPNUTS: C2RustUnnamed_18 = 405;
pub const ACTOR_BG_SPOT00_BREAK: C2RustUnnamed_18 = 404;
pub const ACTOR_EN_NUTSBALL: C2RustUnnamed_18 = 403;
pub const ACTOR_EN_HINTNUTS: C2RustUnnamed_18 = 402;
pub const ACTOR_BG_SPOT12_SAKU: C2RustUnnamed_18 = 401;
pub const ACTOR_BG_SPOT12_GATE: C2RustUnnamed_18 = 400;
pub const ACTOR_BG_JYA_HAHENIRON: C2RustUnnamed_18 = 399;
pub const ACTOR_BG_JYA_1FLIFT: C2RustUnnamed_18 = 398;
pub const ACTOR_BG_SPOT05_SOKO: C2RustUnnamed_18 = 397;
pub const ACTOR_EN_WEIYER: C2RustUnnamed_18 = 396;
pub const ACTOR_OCEFF_STORM: C2RustUnnamed_18 = 395;
pub const ACTOR_OCEFF_WIPE: C2RustUnnamed_18 = 394;
pub const ACTOR_EN_STH: C2RustUnnamed_18 = 393;
pub const ACTOR_EN_SSH: C2RustUnnamed_18 = 392;
pub const ACTOR_OBJ_ROOMTIMER: C2RustUnnamed_18 = 391;
pub const ACTOR_EN_GE2: C2RustUnnamed_18 = 390;
pub const ACTOR_EN_WONDER_TALK2: C2RustUnnamed_18 = 389;
pub const ACTOR_EN_DY_EXTRA: C2RustUnnamed_18 = 388;
pub const ACTOR_SHOT_SUN: C2RustUnnamed_18 = 387;
pub const ACTOR_DEMO_EC: C2RustUnnamed_18 = 386;
pub const ACTOR_EN_TORCH: C2RustUnnamed_18 = 385;
pub const ACTOR_UNSET_180: C2RustUnnamed_18 = 384;
pub const ACTOR_END_TITLE: C2RustUnnamed_18 = 383;
pub const ACTOR_OCEFF_SPOT: C2RustUnnamed_18 = 382;
pub const ACTOR_OBJ_MAKEOSHIHIKI: C2RustUnnamed_18 = 381;
pub const ACTOR_EN_TAKARA_MAN: C2RustUnnamed_18 = 380;
pub const ACTOR_EN_KAKASI: C2RustUnnamed_18 = 379;
pub const ACTOR_BOSS_GANON2: C2RustUnnamed_18 = 378;
pub const ACTOR_EN_ZL3: C2RustUnnamed_18 = 377;
pub const ACTOR_EN_HEISHI4: C2RustUnnamed_18 = 376;
pub const ACTOR_BG_ZG: C2RustUnnamed_18 = 375;
pub const ACTOR_EFC_ERUPC: C2RustUnnamed_18 = 374;
pub const ACTOR_EN_PO_FIELD: C2RustUnnamed_18 = 373;
pub const ACTOR_DEMO_GT: C2RustUnnamed_18 = 372;
pub const ACTOR_ELF_MSG2: C2RustUnnamed_18 = 371;
pub const ACTOR_DOOR_GERUDO: C2RustUnnamed_18 = 370;
pub const ACTOR_EN_MAG: C2RustUnnamed_18 = 369;
pub const ACTOR_EN_OKARINA_EFFECT: C2RustUnnamed_18 = 368;
pub const ACTOR_EN_GANON_MANT: C2RustUnnamed_18 = 367;
pub const ACTOR_EN_HY: C2RustUnnamed_18 = 366;
pub const ACTOR_EN_MD: C2RustUnnamed_18 = 365;
pub const ACTOR_EN_CS: C2RustUnnamed_18 = 364;
pub const ACTOR_EN_JSJUTAN: C2RustUnnamed_18 = 363;
pub const ACTOR_EN_JS: C2RustUnnamed_18 = 362;
pub const ACTOR_BG_JYA_IRONOBJ: C2RustUnnamed_18 = 361;
pub const ACTOR_EN_EX_ITEM: C2RustUnnamed_18 = 360;
pub const ACTOR_EN_ANI: C2RustUnnamed_18 = 359;
pub const ACTOR_BG_SST_FLOOR: C2RustUnnamed_18 = 358;
pub const ACTOR_EN_WEATHER_TAG: C2RustUnnamed_18 = 357;
pub const ACTOR_EN_KZ: C2RustUnnamed_18 = 356;
pub const ACTOR_EN_KO: C2RustUnnamed_18 = 355;
pub const ACTOR_EN_MM: C2RustUnnamed_18 = 354;
pub const ACTOR_UNSET_161: C2RustUnnamed_18 = 353;
pub const ACTOR_EN_STREAM: C2RustUnnamed_18 = 352;
pub const ACTOR_EN_SIOFUKI: C2RustUnnamed_18 = 351;
pub const ACTOR_EN_GANON_ORGAN: C2RustUnnamed_18 = 350;
pub const ACTOR_UNSET_15D: C2RustUnnamed_18 = 349;
pub const ACTOR_BG_SPOT18_BASKET: C2RustUnnamed_18 = 348;
pub const ACTOR_BG_JYA_BOMBIWA: C2RustUnnamed_18 = 347;
pub const ACTOR_BG_JYA_AMISHUTTER: C2RustUnnamed_18 = 346;
pub const ACTOR_BG_JYA_BOMBCHUIWA: C2RustUnnamed_18 = 345;
pub const ACTOR_BG_JYA_BIGMIRROR: C2RustUnnamed_18 = 344;
pub const ACTOR_BG_JYA_LIFT: C2RustUnnamed_18 = 343;
pub const ACTOR_BG_JYA_MEGAMI: C2RustUnnamed_18 = 342;
pub const ACTOR_EN_CHANGER: C2RustUnnamed_18 = 341;
pub const ACTOR_UNSET_154: C2RustUnnamed_18 = 340;
pub const ACTOR_EN_FU: C2RustUnnamed_18 = 339;
pub const ACTOR_EN_GO: C2RustUnnamed_18 = 338;
pub const ACTOR_OBJ_MURE2: C2RustUnnamed_18 = 337;
pub const ACTOR_OBJ_LIGHTSWITCH: C2RustUnnamed_18 = 336;
pub const ACTOR_OBJ_HANA: C2RustUnnamed_18 = 335;
pub const ACTOR_EN_ISHI: C2RustUnnamed_18 = 334;
pub const ACTOR_EN_OWL: C2RustUnnamed_18 = 333;
pub const ACTOR_EN_BOM_BOWL_PIT: C2RustUnnamed_18 = 332;
pub const ACTOR_EN_BOM_BOWL_MAN: C2RustUnnamed_18 = 331;
pub const ACTOR_EN_MK: C2RustUnnamed_18 = 330;
pub const ACTOR_EN_DS: C2RustUnnamed_18 = 329;
pub const ACTOR_BG_GJYO_BRIDGE: C2RustUnnamed_18 = 328;
pub const ACTOR_EN_WONDER_TALK: C2RustUnnamed_18 = 327;
pub const ACTOR_EN_SA: C2RustUnnamed_18 = 326;
pub const ACTOR_BG_SPOT01_IDOSOKO: C2RustUnnamed_18 = 325;
pub const ACTOR_EN_ATTACK_NIW: C2RustUnnamed_18 = 324;
pub const ACTOR_EN_SYATEKI_NIW: C2RustUnnamed_18 = 323;
pub const ACTOR_EN_HEISHI3: C2RustUnnamed_18 = 322;
pub const ACTOR_EN_KANBAN: C2RustUnnamed_18 = 321;
pub const ACTOR_BG_INGATE: C2RustUnnamed_18 = 320;
pub const ACTOR_EN_HS: C2RustUnnamed_18 = 319;
pub const ACTOR_EN_MS: C2RustUnnamed_18 = 318;
pub const ACTOR_EN_GM: C2RustUnnamed_18 = 317;
pub const ACTOR_EN_NIW_LADY: C2RustUnnamed_18 = 316;
pub const ACTOR_EN_CLEAR_TAG: C2RustUnnamed_18 = 315;
pub const ACTOR_EN_SDA: C2RustUnnamed_18 = 314;
pub const ACTOR_OBJ_BLOCKSTOP: C2RustUnnamed_18 = 313;
pub const ACTOR_EN_GE1: C2RustUnnamed_18 = 312;
pub const ACTOR_ITEM_INBOX: C2RustUnnamed_18 = 311;
pub const ACTOR_EN_BLKOBJ: C2RustUnnamed_18 = 310;
pub const ACTOR_EN_NWC: C2RustUnnamed_18 = 309;
pub const ACTOR_UNSET_134: C2RustUnnamed_18 = 308;
pub const ACTOR_EN_DAIKU: C2RustUnnamed_18 = 307;
pub const ACTOR_EN_TORYO: C2RustUnnamed_18 = 306;
pub const ACTOR_EN_EX_RUPPY: C2RustUnnamed_18 = 305;
pub const ACTOR_EN_GOROIWA: C2RustUnnamed_18 = 304;
pub const ACTOR_EN_YABUSAME_MARK: C2RustUnnamed_18 = 303;
pub const ACTOR_EN_OKARINA_TAG: C2RustUnnamed_18 = 302;
pub const ACTOR_OBJ_HSBLOCK: C2RustUnnamed_18 = 301;
pub const ACTOR_OBJ_LIFT: C2RustUnnamed_18 = 300;
pub const ACTOR_OBJ_ELEVATOR: C2RustUnnamed_18 = 299;
pub const ACTOR_OBJ_SWITCH: C2RustUnnamed_18 = 298;
pub const ACTOR_UNSET_129: C2RustUnnamed_18 = 297;
pub const ACTOR_UNSET_128: C2RustUnnamed_18 = 296;
pub const ACTOR_OBJ_BOMBIWA: C2RustUnnamed_18 = 295;
pub const ACTOR_OBJ_BEAN: C2RustUnnamed_18 = 294;
pub const ACTOR_EN_KUSA: C2RustUnnamed_18 = 293;
pub const ACTOR_EN_DIVING_GAME: C2RustUnnamed_18 = 292;
pub const ACTOR_BG_RELAY_OBJECTS: C2RustUnnamed_18 = 291;
pub const ACTOR_EN_PO_RELAY: C2RustUnnamed_18 = 290;
pub const ACTOR_EN_FZ: C2RustUnnamed_18 = 289;
pub const ACTOR_BG_SPOT07_TAKI: C2RustUnnamed_18 = 288;
pub const ACTOR_BG_SPOT03_TAKI: C2RustUnnamed_18 = 287;
pub const ACTOR_OBJ_ICE_POLY: C2RustUnnamed_18 = 286;
pub const ACTOR_EN_TUBO_TRAP: C2RustUnnamed_18 = 285;
pub const ACTOR_EN_HONOTRAP: C2RustUnnamed_18 = 284;
pub const ACTOR_ELF_MSG: C2RustUnnamed_18 = 283;
pub const ACTOR_EN_DNS: C2RustUnnamed_18 = 282;
pub const ACTOR_DEMO_SHD: C2RustUnnamed_18 = 281;
pub const ACTOR_DEMO_EXT: C2RustUnnamed_18 = 280;
pub const ACTOR_EN_G_SWITCH: C2RustUnnamed_18 = 279;
pub const ACTOR_EN_SKJNEEDLE: C2RustUnnamed_18 = 278;
pub const ACTOR_EN_SKJ: C2RustUnnamed_18 = 277;
pub const ACTOR_DEMO_IK: C2RustUnnamed_18 = 276;
pub const ACTOR_EN_IK: C2RustUnnamed_18 = 275;
pub const ACTOR_EN_WONDER_ITEM: C2RustUnnamed_18 = 274;
pub const ACTOR_OBJ_TSUBO: C2RustUnnamed_18 = 273;
pub const ACTOR_OBJ_KIBAKO: C2RustUnnamed_18 = 272;
pub const ACTOR_ITEM_ETCETERA: C2RustUnnamed_18 = 271;
pub const ACTOR_UNSET_10E: C2RustUnnamed_18 = 270;
pub const ACTOR_UNSET_10D: C2RustUnnamed_18 = 269;
pub const ACTOR_ARROW_LIGHT: C2RustUnnamed_18 = 268;
pub const ACTOR_ARROW_ICE: C2RustUnnamed_18 = 267;
pub const ACTOR_ARROW_FIRE: C2RustUnnamed_18 = 266;
pub const ACTOR_UNSET_109: C2RustUnnamed_18 = 265;
pub const ACTOR_BG_UMAJUMP: C2RustUnnamed_18 = 264;
pub const ACTOR_BG_SPOT15_RRBOX: C2RustUnnamed_18 = 263;
pub const ACTOR_BG_GANON_OTYUKA: C2RustUnnamed_18 = 262;
pub const ACTOR_BG_PO_SYOKUDAI: C2RustUnnamed_18 = 261;
pub const ACTOR_BG_SPOT01_IDOMIZU: C2RustUnnamed_18 = 260;
pub const ACTOR_BG_SPOT01_IDOHASHIRA: C2RustUnnamed_18 = 259;
pub const ACTOR_BG_SPOT01_FUSYA: C2RustUnnamed_18 = 258;
pub const ACTOR_EFF_DUST: C2RustUnnamed_18 = 257;
pub const ACTOR_BG_GATE_SHUTTER: C2RustUnnamed_18 = 256;
pub const ACTOR_OBJ_OSHIHIKI: C2RustUnnamed_18 = 255;
pub const ACTOR_FISHING: C2RustUnnamed_18 = 254;
pub const ACTOR_BG_JYA_KANAAMI: C2RustUnnamed_18 = 253;
pub const ACTOR_BG_JYA_COBRA: C2RustUnnamed_18 = 252;
pub const ACTOR_UNSET_FB: C2RustUnnamed_18 = 251;
pub const ACTOR_BG_JYA_ZURERUKABE: C2RustUnnamed_18 = 250;
pub const ACTOR_BG_JYA_GOROIWA: C2RustUnnamed_18 = 249;
pub const ACTOR_BG_SPOT15_SAKU: C2RustUnnamed_18 = 248;
pub const ACTOR_BG_HAKA_GATE: C2RustUnnamed_18 = 247;
pub const ACTOR_EN_ANUBICE_TAG: C2RustUnnamed_18 = 246;
pub const ACTOR_DEMO_6K: C2RustUnnamed_18 = 245;
pub const ACTOR_MAGIC_DARK: C2RustUnnamed_18 = 244;
pub const ACTOR_UNSET_F3: C2RustUnnamed_18 = 243;
pub const ACTOR_UNSET_F2: C2RustUnnamed_18 = 242;
pub const ACTOR_ITEM_OCARINA: C2RustUnnamed_18 = 241;
pub const ACTOR_EN_ICE_HONO: C2RustUnnamed_18 = 240;
pub const ACTOR_BG_ICE_SHELTER: C2RustUnnamed_18 = 239;
pub const ACTOR_ITEM_SHIELD: C2RustUnnamed_18 = 238;
pub const ACTOR_EN_FR: C2RustUnnamed_18 = 237;
pub const ACTOR_EN_NY: C2RustUnnamed_18 = 236;
pub const ACTOR_UNSET_EB: C2RustUnnamed_18 = 235;
pub const ACTOR_UNSET_EA: C2RustUnnamed_18 = 234;
pub const ACTOR_BOSS_SST: C2RustUnnamed_18 = 233;
pub const ACTOR_BOSS_GANON: C2RustUnnamed_18 = 232;
pub const ACTOR_EN_MA1: C2RustUnnamed_18 = 231;
pub const ACTOR_BG_BDAN_SWITCH: C2RustUnnamed_18 = 230;
pub const ACTOR_BG_SPOT16_DOUGHNUT: C2RustUnnamed_18 = 229;
pub const ACTOR_BG_MORI_IDOMIZU: C2RustUnnamed_18 = 228;
pub const ACTOR_BG_MORI_HASHIRA4: C2RustUnnamed_18 = 227;
pub const ACTOR_BG_MORI_HASHIGO: C2RustUnnamed_18 = 226;
pub const ACTOR_EN_ANUBICE_FIRE: C2RustUnnamed_18 = 225;
pub const ACTOR_EN_ANUBICE: C2RustUnnamed_18 = 224;
pub const ACTOR_EN_BX: C2RustUnnamed_18 = 223;
pub const ACTOR_EN_BA: C2RustUnnamed_18 = 222;
pub const ACTOR_EN_RR: C2RustUnnamed_18 = 221;
pub const ACTOR_BOSS_TW: C2RustUnnamed_18 = 220;
pub const ACTOR_EN_HORSE_GAME_CHECK: C2RustUnnamed_18 = 219;
pub const ACTOR_EN_BOM_CHU: C2RustUnnamed_18 = 218;
pub const ACTOR_EN_MA2: C2RustUnnamed_18 = 217;
pub const ACTOR_UNSET_D8: C2RustUnnamed_18 = 216;
pub const ACTOR_BG_HAKA_WATER: C2RustUnnamed_18 = 215;
pub const ACTOR_BG_ICE_OBJECTS: C2RustUnnamed_18 = 214;
pub const ACTOR_BG_SPOT06_OBJECTS: C2RustUnnamed_18 = 213;
pub const ACTOR_BG_MIZU_UZU: C2RustUnnamed_18 = 212;
pub const ACTOR_OBJ_DEKUJR: C2RustUnnamed_18 = 211;
pub const ACTOR_EN_RU2: C2RustUnnamed_18 = 210;
pub const ACTOR_BG_SPOT08_ICEBLOCK: C2RustUnnamed_18 = 209;
pub const ACTOR_BG_BOMBWALL: C2RustUnnamed_18 = 208;
pub const ACTOR_BG_HIDAN_KOWARERUKABE: C2RustUnnamed_18 = 207;
pub const ACTOR_UNSET_CE: C2RustUnnamed_18 = 206;
pub const ACTOR_BG_SPOT16_BOMBSTONE: C2RustUnnamed_18 = 205;
pub const ACTOR_EN_TR: C2RustUnnamed_18 = 204;
pub const ACTOR_EN_IN: C2RustUnnamed_18 = 203;
pub const ACTOR_DEMO_GO: C2RustUnnamed_18 = 202;
pub const ACTOR_DEMO_SA: C2RustUnnamed_18 = 201;
pub const ACTOR_BG_BDAN_OBJECTS: C2RustUnnamed_18 = 200;
pub const ACTOR_EN_KAREBABA: C2RustUnnamed_18 = 199;
pub const ACTOR_EN_BIGOKUTA: C2RustUnnamed_18 = 198;
pub const ACTOR_EN_SB: C2RustUnnamed_18 = 197;
pub const ACTOR_BOSS_MO: C2RustUnnamed_18 = 196;
pub const ACTOR_EN_NB: C2RustUnnamed_18 = 195;
pub const ACTOR_EN_TANA: C2RustUnnamed_18 = 194;
pub const ACTOR_EN_SYATEKI_MAN: C2RustUnnamed_18 = 193;
pub const ACTOR_EN_SYATEKI_ITM: C2RustUnnamed_18 = 192;
pub const ACTOR_BG_SPOT17_FUNEN: C2RustUnnamed_18 = 191;
pub const ACTOR_BG_HAKA_ZOU: C2RustUnnamed_18 = 190;
pub const ACTOR_BG_HAKA_HUTA: C2RustUnnamed_18 = 189;
pub const ACTOR_BG_HAKA_TRAP: C2RustUnnamed_18 = 188;
pub const ACTOR_BG_HAKA_TUBO: C2RustUnnamed_18 = 187;
pub const ACTOR_BOSS_VA: C2RustUnnamed_18 = 186;
pub const ACTOR_BG_SPOT18_OBJ: C2RustUnnamed_18 = 185;
pub const ACTOR_BG_SPOT09_OBJ: C2RustUnnamed_18 = 184;
pub const ACTOR_MIR_RAY: C2RustUnnamed_18 = 183;
pub const ACTOR_EN_BROB: C2RustUnnamed_18 = 182;
pub const ACTOR_EN_FIRE_ROCK: C2RustUnnamed_18 = 181;
pub const ACTOR_EN_ENCOUNT2: C2RustUnnamed_18 = 180;
pub const ACTOR_EN_HEISHI2: C2RustUnnamed_18 = 179;
pub const ACTOR_UNSET_B2: C2RustUnnamed_18 = 178;
pub const ACTOR_BG_HAKA_SGAMI: C2RustUnnamed_18 = 177;
pub const ACTOR_BG_HAKA_SHIP: C2RustUnnamed_18 = 176;
pub const ACTOR_BG_HAKA_MEGANEBG: C2RustUnnamed_18 = 175;
pub const ACTOR_BG_HAKA_MEGANE: C2RustUnnamed_18 = 174;
pub const ACTOR_EN_VB_BALL: C2RustUnnamed_18 = 173;
pub const ACTOR_BG_VB_SIMA: C2RustUnnamed_18 = 172;
pub const ACTOR_EN_FW: C2RustUnnamed_18 = 171;
pub const ACTOR_DEMO_TRE_LGT: C2RustUnnamed_18 = 170;
pub const ACTOR_DEMO_IM: C2RustUnnamed_18 = 169;
pub const ACTOR_DEMO_DU: C2RustUnnamed_18 = 168;
pub const ACTOR_EN_ENCOUNT1: C2RustUnnamed_18 = 167;
pub const ACTOR_EN_RL: C2RustUnnamed_18 = 166;
pub const ACTOR_EN_DHA: C2RustUnnamed_18 = 165;
pub const ACTOR_EN_DH: C2RustUnnamed_18 = 164;
pub const ACTOR_EN_FD_FIRE: C2RustUnnamed_18 = 163;
pub const ACTOR_BOSS_FD2: C2RustUnnamed_18 = 162;
pub const ACTOR_EN_RU1: C2RustUnnamed_18 = 161;
pub const ACTOR_UNSET_A0: C2RustUnnamed_18 = 160;
pub const ACTOR_MAGIC_FIRE: C2RustUnnamed_18 = 159;
pub const ACTOR_MAGIC_WIND: C2RustUnnamed_18 = 158;
pub const ACTOR_BG_HAKA: C2RustUnnamed_18 = 157;
pub const ACTOR_BG_SPOT02_OBJECTS: C2RustUnnamed_18 = 156;
pub const ACTOR_DOOR_ANA: C2RustUnnamed_18 = 155;
pub const ACTOR_EN_HORSE_LINK_CHILD: C2RustUnnamed_18 = 154;
pub const ACTOR_EN_FD: C2RustUnnamed_18 = 153;
pub const ACTOR_EN_DU: C2RustUnnamed_18 = 152;
pub const ACTOR_OBJECT_KANKYO: C2RustUnnamed_18 = 151;
pub const ACTOR_BOSS_FD: C2RustUnnamed_18 = 150;
pub const ACTOR_EN_SW: C2RustUnnamed_18 = 149;
pub const ACTOR_OBJ_MURE: C2RustUnnamed_18 = 148;
pub const ACTOR_BG_PO_EVENT: C2RustUnnamed_18 = 147;
pub const ACTOR_BG_HEAVY_BLOCK: C2RustUnnamed_18 = 146;
pub const ACTOR_EN_PO_SISTERS: C2RustUnnamed_18 = 145;
pub const ACTOR_EN_RD: C2RustUnnamed_18 = 144;
pub const ACTOR_EN_HEISHI1: C2RustUnnamed_18 = 143;
pub const ACTOR_EN_FLOORMAS: C2RustUnnamed_18 = 142;
pub const ACTOR_BG_HIDAN_FWBIG: C2RustUnnamed_18 = 141;
pub const ACTOR_DEMO_KANKYO: C2RustUnnamed_18 = 140;
pub const ACTOR_DEMO_EFFECT: C2RustUnnamed_18 = 139;
pub const ACTOR_EN_VM: C2RustUnnamed_18 = 138;
pub const ACTOR_BG_MORI_RAKKATENJO: C2RustUnnamed_18 = 137;
pub const ACTOR_BG_MORI_KAITENKABE: C2RustUnnamed_18 = 136;
pub const ACTOR_BG_MORI_ELEVATOR: C2RustUnnamed_18 = 135;
pub const ACTOR_BG_MORI_BIGST: C2RustUnnamed_18 = 134;
pub const ACTOR_EN_TK: C2RustUnnamed_18 = 133;
pub const ACTOR_EN_TA: C2RustUnnamed_18 = 132;
pub const ACTOR_UNSET_83: C2RustUnnamed_18 = 131;
pub const ACTOR_EN_VASE: C2RustUnnamed_18 = 130;
pub const ACTOR_EN_AROW_TRAP: C2RustUnnamed_18 = 129;
pub const ACTOR_EN_TRAP: C2RustUnnamed_18 = 128;
pub const ACTOR_UNSET_7F: C2RustUnnamed_18 = 127;
pub const ACTOR_UNSET_7E: C2RustUnnamed_18 = 126;
pub const ACTOR_EN_PU_BOX: C2RustUnnamed_18 = 125;
pub const ACTOR_EN_LIGHTBOX: C2RustUnnamed_18 = 124;
pub const ACTOR_UNSET_7B: C2RustUnnamed_18 = 123;
pub const ACTOR_UNSET_7A: C2RustUnnamed_18 = 122;
pub const ACTOR_UNSET_79: C2RustUnnamed_18 = 121;
pub const ACTOR_UNSET_78: C2RustUnnamed_18 = 120;
pub const ACTOR_EN_WOOD02: C2RustUnnamed_18 = 119;
pub const ACTOR_UNSET_76: C2RustUnnamed_18 = 118;
pub const ACTOR_UNSET_75: C2RustUnnamed_18 = 117;
pub const ACTOR_UNSET_74: C2RustUnnamed_18 = 116;
pub const ACTOR_UNSET_73: C2RustUnnamed_18 = 115;
pub const ACTOR_EN_BIRD: C2RustUnnamed_18 = 114;
pub const ACTOR_BG_HIDAN_HAMSTEP: C2RustUnnamed_18 = 113;
pub const ACTOR_DOOR_TOKI: C2RustUnnamed_18 = 112;
pub const ACTOR_BG_HIDAN_KOUSI: C2RustUnnamed_18 = 111;
pub const ACTOR_BG_MJIN: C2RustUnnamed_18 = 110;
pub const ACTOR_EN_FHG_FIRE: C2RustUnnamed_18 = 109;
pub const ACTOR_BG_TOKI_SWD: C2RustUnnamed_18 = 108;
pub const ACTOR_EN_YUKABYUN: C2RustUnnamed_18 = 107;
pub const ACTOR_BG_TOKI_HIKARI: C2RustUnnamed_18 = 106;
pub const ACTOR_EN_BB: C2RustUnnamed_18 = 105;
pub const ACTOR_BG_MORI_HINERI: C2RustUnnamed_18 = 104;
pub const ACTOR_EN_FHG: C2RustUnnamed_18 = 103;
pub const ACTOR_ARMS_HOOK: C2RustUnnamed_18 = 102;
pub const ACTOR_BG_MIZU_WATER: C2RustUnnamed_18 = 101;
pub const ACTOR_BG_MIZU_MOVEBG: C2RustUnnamed_18 = 100;
pub const ACTOR_EN_VALI: C2RustUnnamed_18 = 99;
pub const ACTOR_BG_MENKURI_EYE: C2RustUnnamed_18 = 98;
pub const ACTOR_BG_MENKURI_KAITEN: C2RustUnnamed_18 = 97;
pub const ACTOR_EN_DEKUNUTS: C2RustUnnamed_18 = 96;
pub const ACTOR_ITEM_B_HEART: C2RustUnnamed_18 = 95;
pub const ACTOR_OBJ_SYOKUDAI: C2RustUnnamed_18 = 94;
pub const ACTOR_DOOR_WARP1: C2RustUnnamed_18 = 93;
pub const ACTOR_BG_DDAN_KD: C2RustUnnamed_18 = 92;
pub const ACTOR_EN_HORSE_ZELDA: C2RustUnnamed_18 = 91;
pub const ACTOR_EN_JJ: C2RustUnnamed_18 = 90;
pub const ACTOR_BG_BREAKWALL: C2RustUnnamed_18 = 89;
pub const ACTOR_BG_DDAN_JD: C2RustUnnamed_18 = 88;
pub const ACTOR_EN_M_THUNDER: C2RustUnnamed_18 = 87;
pub const ACTOR_EN_M_FIRE1: C2RustUnnamed_18 = 86;
pub const ACTOR_EN_DEKUBABA: C2RustUnnamed_18 = 85;
pub const ACTOR_EN_AM: C2RustUnnamed_18 = 84;
pub const ACTOR_UNSET_53: C2RustUnnamed_18 = 83;
pub const ACTOR_BOSS_GANONDROF: C2RustUnnamed_18 = 82;
pub const ACTOR_BG_YDAN_MARUTA: C2RustUnnamed_18 = 81;
pub const ACTOR_BG_YDAN_HASI: C2RustUnnamed_18 = 80;
pub const ACTOR_EN_OE2: C2RustUnnamed_18 = 79;
pub const ACTOR_BG_HIDAN_FSLIFT: C2RustUnnamed_18 = 78;
pub const ACTOR_EN_ZL2: C2RustUnnamed_18 = 77;
pub const ACTOR_EN_BOMBF: C2RustUnnamed_18 = 76;
pub const ACTOR_EN_MB: C2RustUnnamed_18 = 75;
pub const ACTOR_BG_SPOT00_HANEBASI: C2RustUnnamed_18 = 74;
pub const ACTOR_BG_HIDAN_CURTAIN: C2RustUnnamed_18 = 73;
pub const ACTOR_EN_XC: C2RustUnnamed_18 = 72;
pub const ACTOR_BG_HIDAN_SYOKU: C2RustUnnamed_18 = 71;
pub const ACTOR_BG_HIDAN_SIMA: C2RustUnnamed_18 = 70;
pub const ACTOR_BG_HIDAN_SEKIZOU: C2RustUnnamed_18 = 69;
pub const ACTOR_BG_HIDAN_RSEKIZOU: C2RustUnnamed_18 = 68;
pub const ACTOR_BG_HIDAN_ROCK: C2RustUnnamed_18 = 67;
pub const ACTOR_EN_HORSE_GANON: C2RustUnnamed_18 = 66;
pub const ACTOR_BG_HIDAN_HROCK: C2RustUnnamed_18 = 65;
pub const ACTOR_BG_HIDAN_DALM: C2RustUnnamed_18 = 64;
pub const ACTOR_BG_DODOAGO: C2RustUnnamed_18 = 63;
pub const ACTOR_BG_TREEMOUTH: C2RustUnnamed_18 = 62;
pub const ACTOR_EN_OSSAN: C2RustUnnamed_18 = 61;
pub const ACTOR_EN_HORSE_NORMAL: C2RustUnnamed_18 = 60;
pub const ACTOR_EN_RIVER_SOUND: C2RustUnnamed_18 = 59;
pub const ACTOR_EN_EIYER: C2RustUnnamed_18 = 58;
pub const ACTOR_EN_A_OBJ: C2RustUnnamed_18 = 57;
pub const ACTOR_EN_BW: C2RustUnnamed_18 = 56;
pub const ACTOR_EN_ST: C2RustUnnamed_18 = 55;
pub const ACTOR_UNSET_36: C2RustUnnamed_18 = 54;
pub const ACTOR_EN_TP: C2RustUnnamed_18 = 53;
pub const ACTOR_EN_BILI: C2RustUnnamed_18 = 52;
pub const ACTOR_EN_TORCH2: C2RustUnnamed_18 = 51;
pub const ACTOR_EN_BOOM: C2RustUnnamed_18 = 50;
pub const ACTOR_UNSET_31: C2RustUnnamed_18 = 49;
pub const ACTOR_EN_BDFIRE: C2RustUnnamed_18 = 48;
pub const ACTOR_EN_DODOJR: C2RustUnnamed_18 = 47;
pub const ACTOR_DOOR_SHUTTER: C2RustUnnamed_18 = 46;
pub const ACTOR_EN_BUBBLE: C2RustUnnamed_18 = 45;
pub const ACTOR_BG_PUSHBOX: C2RustUnnamed_18 = 44;
pub const ACTOR_EN_GOMA: C2RustUnnamed_18 = 43;
pub const ACTOR_EN_VIEWER: C2RustUnnamed_18 = 42;
pub const ACTOR_EN_ZL1: C2RustUnnamed_18 = 41;
pub const ACTOR_BOSS_GOMA: C2RustUnnamed_18 = 40;
pub const ACTOR_BOSS_DODONGO: C2RustUnnamed_18 = 39;
pub const ACTOR_EN_HATA: C2RustUnnamed_18 = 38;
pub const ACTOR_EN_ZF: C2RustUnnamed_18 = 37;
pub const ACTOR_EN_SCENE_CHANGE: C2RustUnnamed_18 = 36;
pub const ACTOR_EN_HOLL: C2RustUnnamed_18 = 35;
pub const ACTOR_UNSET_22: C2RustUnnamed_18 = 34;
pub const ACTOR_EN_FISH: C2RustUnnamed_18 = 33;
pub const ACTOR_EN_INSECT: C2RustUnnamed_18 = 32;
pub const ACTOR_UNSET_1F: C2RustUnnamed_18 = 31;
pub const ACTOR_EN_BUTTE: C2RustUnnamed_18 = 30;
pub const ACTOR_EN_PEEHAT: C2RustUnnamed_18 = 29;
pub const ACTOR_EN_REEBA: C2RustUnnamed_18 = 28;
pub const ACTOR_EN_TITE: C2RustUnnamed_18 = 27;
pub const ACTOR_UNSET_1A: C2RustUnnamed_18 = 26;
pub const ACTOR_EN_NIW: C2RustUnnamed_18 = 25;
pub const ACTOR_EN_ELF: C2RustUnnamed_18 = 24;
pub const ACTOR_UNSET_17: C2RustUnnamed_18 = 23;
pub const ACTOR_EN_ARROW: C2RustUnnamed_18 = 22;
pub const ACTOR_EN_ITEM00: C2RustUnnamed_18 = 21;
pub const ACTOR_EN_HORSE: C2RustUnnamed_18 = 20;
pub const ACTOR_EN_FIREFLY: C2RustUnnamed_18 = 19;
pub const ACTOR_EN_DODONGO: C2RustUnnamed_18 = 18;
pub const ACTOR_EN_WALLMAS: C2RustUnnamed_18 = 17;
pub const ACTOR_EN_BOM: C2RustUnnamed_18 = 16;
pub const ACTOR_BG_YDAN_SP: C2RustUnnamed_18 = 15;
pub const ACTOR_EN_OKUTA: C2RustUnnamed_18 = 14;
pub const ACTOR_EN_POH: C2RustUnnamed_18 = 13;
pub const ACTOR_BG_HIDAN_FIREWALL: C2RustUnnamed_18 = 12;
pub const ACTOR_BG_DY_YOSEIZO: C2RustUnnamed_18 = 11;
pub const ACTOR_EN_BOX: C2RustUnnamed_18 = 10;
pub const ACTOR_EN_DOOR: C2RustUnnamed_18 = 9;
pub const ACTOR_EN_LIGHT: C2RustUnnamed_18 = 8;
pub const ACTOR_EN_PART: C2RustUnnamed_18 = 7;
pub const ACTOR_UNSET_6: C2RustUnnamed_18 = 6;
pub const ACTOR_UNSET_5: C2RustUnnamed_18 = 5;
pub const ACTOR_EN_GIRLA: C2RustUnnamed_18 = 4;
pub const ACTOR_UNSET_3: C2RustUnnamed_18 = 3;
pub const ACTOR_EN_TEST: C2RustUnnamed_18 = 2;
pub const ACTOR_UNSET_1: C2RustUnnamed_18 = 1;
pub const ACTOR_PLAYER: C2RustUnnamed_18 = 0;
pub type C2RustUnnamed_19 = libc::c_uint;
pub const PLAYER_AP_MAX: C2RustUnnamed_19 = 67;
pub const PLAYER_AP_LENS: C2RustUnnamed_19 = 66;
pub const PLAYER_AP_MASK_TRUTH: C2RustUnnamed_19 = 65;
pub const PLAYER_AP_MASK_GERUDO: C2RustUnnamed_19 = 64;
pub const PLAYER_AP_MASK_ZORA: C2RustUnnamed_19 = 63;
pub const PLAYER_AP_MASK_GORON: C2RustUnnamed_19 = 62;
pub const PLAYER_AP_MASK_BUNNY: C2RustUnnamed_19 = 61;
pub const PLAYER_AP_MASK_SPOOKY: C2RustUnnamed_19 = 60;
pub const PLAYER_AP_MASK_SKULL: C2RustUnnamed_19 = 59;
pub const PLAYER_AP_MASK_KEATON: C2RustUnnamed_19 = 58;
pub const PLAYER_AP_CLAIM_CHECK: C2RustUnnamed_19 = 57;
pub const PLAYER_AP_EYEDROPS: C2RustUnnamed_19 = 56;
pub const PLAYER_AP_FROG: C2RustUnnamed_19 = 55;
pub const PLAYER_AP_PRESCRIPTION: C2RustUnnamed_19 = 54;
pub const PLAYER_AP_SWORD_BROKEN: C2RustUnnamed_19 = 53;
pub const PLAYER_AP_SAW: C2RustUnnamed_19 = 52;
pub const PLAYER_AP_ODD_POTION: C2RustUnnamed_19 = 51;
pub const PLAYER_AP_ODD_MUSHROOM: C2RustUnnamed_19 = 50;
pub const PLAYER_AP_COJIRO: C2RustUnnamed_19 = 49;
pub const PLAYER_AP_POCKET_CUCCO: C2RustUnnamed_19 = 48;
pub const PLAYER_AP_POCKET_EGG: C2RustUnnamed_19 = 47;
pub const PLAYER_AP_BEAN: C2RustUnnamed_19 = 46;
pub const PLAYER_AP_CHICKEN: C2RustUnnamed_19 = 45;
pub const PLAYER_AP_WEIRD_EGG: C2RustUnnamed_19 = 44;
pub const PLAYER_AP_LETTER_ZELDA: C2RustUnnamed_19 = 43;
pub const PLAYER_AP_BOTTLE_FAIRY: C2RustUnnamed_19 = 42;
pub const PLAYER_AP_BOTTLE_MILK_HALF: C2RustUnnamed_19 = 41;
pub const PLAYER_AP_BOTTLE_MILK: C2RustUnnamed_19 = 40;
pub const PLAYER_AP_BOTTLE_POTION_GREEN: C2RustUnnamed_19 = 39;
pub const PLAYER_AP_BOTTLE_POTION_BLUE: C2RustUnnamed_19 = 38;
pub const PLAYER_AP_BOTTLE_POTION_RED: C2RustUnnamed_19 = 37;
pub const PLAYER_AP_BOTTLE_LETTER: C2RustUnnamed_19 = 36;
pub const PLAYER_AP_BOTTLE_BIG_POE: C2RustUnnamed_19 = 35;
pub const PLAYER_AP_BOTTLE_POE: C2RustUnnamed_19 = 34;
pub const PLAYER_AP_BOTTLE_BUG: C2RustUnnamed_19 = 33;
pub const PLAYER_AP_BOTTLE_FIRE: C2RustUnnamed_19 = 32;
pub const PLAYER_AP_BOTTLE_FISH: C2RustUnnamed_19 = 31;
pub const PLAYER_AP_BOTTLE: C2RustUnnamed_19 = 30;
pub const PLAYER_AP_OCARINA_TIME: C2RustUnnamed_19 = 29;
pub const PLAYER_AP_OCARINA_FAIRY: C2RustUnnamed_19 = 28;
pub const PLAYER_AP_NUT: C2RustUnnamed_19 = 27;
pub const PLAYER_AP_DINS_FIRE: C2RustUnnamed_19 = 26;
pub const PLAYER_AP_NAYRUS_LOVE: C2RustUnnamed_19 = 25;
pub const PLAYER_AP_FARORES_WIND: C2RustUnnamed_19 = 24;
pub const PLAYER_AP_MAGIC_SPELL_17: C2RustUnnamed_19 = 23;
pub const PLAYER_AP_MAGIC_SPELL_16: C2RustUnnamed_19 = 22;
pub const PLAYER_AP_MAGIC_SPELL_15: C2RustUnnamed_19 = 21;
pub const PLAYER_AP_BOOMERANG: C2RustUnnamed_19 = 20;
pub const PLAYER_AP_BOMBCHU: C2RustUnnamed_19 = 19;
pub const PLAYER_AP_BOMB: C2RustUnnamed_19 = 18;
pub const PLAYER_AP_LONGSHOT: C2RustUnnamed_19 = 17;
pub const PLAYER_AP_HOOKSHOT: C2RustUnnamed_19 = 16;
pub const PLAYER_AP_SLINGSHOT: C2RustUnnamed_19 = 15;
pub const PLAYER_AP_BOW_0E: C2RustUnnamed_19 = 14;
pub const PLAYER_AP_BOW_0D: C2RustUnnamed_19 = 13;
pub const PLAYER_AP_BOW_0C: C2RustUnnamed_19 = 12;
pub const PLAYER_AP_BOW_LIGHT: C2RustUnnamed_19 = 11;
pub const PLAYER_AP_BOW_ICE: C2RustUnnamed_19 = 10;
pub const PLAYER_AP_BOW_FIRE: C2RustUnnamed_19 = 9;
pub const PLAYER_AP_BOW: C2RustUnnamed_19 = 8;
pub const PLAYER_AP_HAMMER: C2RustUnnamed_19 = 7;
pub const PLAYER_AP_STICK: C2RustUnnamed_19 = 6;
pub const PLAYER_AP_SWORD_BGS: C2RustUnnamed_19 = 5;
pub const PLAYER_AP_SWORD_KOKIRI: C2RustUnnamed_19 = 4;
pub const PLAYER_AP_SWORD_MASTER: C2RustUnnamed_19 = 3;
pub const PLAYER_AP_FISHING_POLE: C2RustUnnamed_19 = 2;
pub const PLAYER_AP_LAST_USED: C2RustUnnamed_19 = 1;
pub const PLAYER_AP_NONE: C2RustUnnamed_19 = 0;
pub type C2RustUnnamed_20 = libc::c_uint;
pub const OBJECT_ID_MAX: C2RustUnnamed_20 = 402;
pub const OBJECT_ZL4: C2RustUnnamed_20 = 401;
pub const OBJECT_TIMEBLOCK: C2RustUnnamed_20 = 400;
pub const OBJECT_OUKE_HAKA: C2RustUnnamed_20 = 399;
pub const OBJECT_DOOR_KILLER: C2RustUnnamed_20 = 398;
pub const OBJECT_GI_SWORD_1: C2RustUnnamed_20 = 397;
pub const OBJECT_COB: C2RustUnnamed_20 = 396;
pub const OBJECT_COW: C2RustUnnamed_20 = 395;
pub const OBJECT_BWALL: C2RustUnnamed_20 = 394;
pub const OBJECT_PS: C2RustUnnamed_20 = 393;
pub const OBJECT_GS: C2RustUnnamed_20 = 392;
pub const OBJECT_HAKA_DOOR: C2RustUnnamed_20 = 391;
pub const OBJECT_GEFF: C2RustUnnamed_20 = 390;
pub const OBJECT_GJ: C2RustUnnamed_20 = 389;
pub const OBJECT_SKB: C2RustUnnamed_20 = 388;
pub const OBJECT_WF: C2RustUnnamed_20 = 387;
pub const OBJECT_MU: C2RustUnnamed_20 = 386;
pub const OBJECT_SPOT01_MATOYAB: C2RustUnnamed_20 = 385;
pub const OBJECT_SPOT01_MATOYA: C2RustUnnamed_20 = 384;
pub const OBJECT_GI_RUPY: C2RustUnnamed_20 = 383;
pub const OBJECT_GANON_ANIME3: C2RustUnnamed_20 = 382;
pub const OBJECT_GANON_ANIME2: C2RustUnnamed_20 = 381;
pub const OBJECT_GANON_ANIME1: C2RustUnnamed_20 = 380;
pub const OBJECT_GI_DEKUPOUCH: C2RustUnnamed_20 = 379;
pub const OBJECT_EFC_DOUGHNUT: C2RustUnnamed_20 = 378;
pub const OBJECT_DEMO_KEKKAI: C2RustUnnamed_20 = 377;
pub const OBJECT_BOWL: C2RustUnnamed_20 = 376;
pub const OBJECT_GI_SOUL: C2RustUnnamed_20 = 375;
pub const OBJECT_GI_GHOST: C2RustUnnamed_20 = 374;
pub const OBJECT_GI_BUTTERFLY: C2RustUnnamed_20 = 373;
pub const OBJECT_GI_INSECT: C2RustUnnamed_20 = 372;
pub const OBJECT_GI_FIRE: C2RustUnnamed_20 = 371;
pub const OBJECT_DNK: C2RustUnnamed_20 = 370;
pub const OBJECT_DNS: C2RustUnnamed_20 = 369;
pub const OBJECT_KIBAKO2: C2RustUnnamed_20 = 368;
pub const OBJECT_SPOT11_OBJ: C2RustUnnamed_20 = 367;
pub const OBJECT_UNSET_16E: C2RustUnnamed_20 = 366;
pub const OBJECT_JYA_DOOR: C2RustUnnamed_20 = 365;
pub const OBJECT_JYA_IRON: C2RustUnnamed_20 = 364;
pub const OBJECT_DOG: C2RustUnnamed_20 = 363;
pub const OBJECT_GR: C2RustUnnamed_20 = 362;
pub const OBJECT_GELDB: C2RustUnnamed_20 = 361;
pub const OBJECT_SHOPNUTS: C2RustUnnamed_20 = 360;
pub const OBJECT_GLA: C2RustUnnamed_20 = 359;
pub const OBJECT_SPOT00_BREAK: C2RustUnnamed_20 = 358;
pub const OBJECT_RS: C2RustUnnamed_20 = 357;
pub const OBJECT_HINTNUTS: C2RustUnnamed_20 = 356;
pub const OBJECT_BOMBIWA: C2RustUnnamed_20 = 355;
pub const OBJECT_SPOT12_OBJ: C2RustUnnamed_20 = 354;
pub const OBJECT_SPOT05_OBJECTS: C2RustUnnamed_20 = 353;
pub const OBJECT_BG: C2RustUnnamed_20 = 352;
pub const OBJECT_BIGOKUTA: C2RustUnnamed_20 = 351;
pub const OBJECT_SSH: C2RustUnnamed_20 = 350;
pub const OBJECT_GI_GODDESS: C2RustUnnamed_20 = 349;
pub const OBJECT_GI_SUTARU: C2RustUnnamed_20 = 348;
pub const OBJECT_FISH: C2RustUnnamed_20 = 347;
pub const OBJECT_EC: C2RustUnnamed_20 = 346;
pub const OBJECT_DS2: C2RustUnnamed_20 = 345;
pub const OBJECT_GI_M_ARROW: C2RustUnnamed_20 = 344;
pub const OBJECT_GI_HOVERBOOTS: C2RustUnnamed_20 = 343;
pub const OBJECT_ZG: C2RustUnnamed_20 = 342;
pub const OBJECT_TS: C2RustUnnamed_20 = 341;
pub const OBJECT_KA: C2RustUnnamed_20 = 340;
pub const OBJECT_GANON2: C2RustUnnamed_20 = 339;
pub const OBJECT_GI_GERUDOMASK: C2RustUnnamed_20 = 338;
pub const OBJECT_GI_ZORAMASK: C2RustUnnamed_20 = 337;
pub const OBJECT_GI_GOLONMASK: C2RustUnnamed_20 = 336;
pub const OBJECT_ZL2_ANIME2: C2RustUnnamed_20 = 335;
pub const OBJECT_ZL2_ANIME1: C2RustUnnamed_20 = 334;
pub const OBJECT_EFC_ERUPC: C2RustUnnamed_20 = 333;
pub const OBJECT_GT: C2RustUnnamed_20 = 332;
pub const OBJECT_DOOR_GERUDO: C2RustUnnamed_20 = 331;
pub const OBJECT_MAG: C2RustUnnamed_20 = 330;
pub const OBJECT_GI_FROG: C2RustUnnamed_20 = 329;
pub const OBJECT_GI_SOLDOUT: C2RustUnnamed_20 = 328;
pub const OBJECT_GI_BRACELET: C2RustUnnamed_20 = 327;
pub const OBJECT_GI_PRESCRIPTION: C2RustUnnamed_20 = 326;
pub const OBJECT_CS: C2RustUnnamed_20 = 325;
pub const OBJECT_JS: C2RustUnnamed_20 = 324;
pub const OBJECT_GI_BROKENSWORD: C2RustUnnamed_20 = 323;
pub const OBJECT_GI_TICKETSTONE: C2RustUnnamed_20 = 322;
pub const OBJECT_GI_MUSHROOM: C2RustUnnamed_20 = 321;
pub const OBJECT_GI_POWDER: C2RustUnnamed_20 = 320;
pub const OBJECT_GI_EYE_LOTION: C2RustUnnamed_20 = 319;
pub const OBJECT_OS: C2RustUnnamed_20 = 318;
pub const OBJECT_FA: C2RustUnnamed_20 = 317;
pub const OBJECT_MM: C2RustUnnamed_20 = 316;
pub const OBJECT_STREAM: C2RustUnnamed_20 = 315;
pub const OBJECT_SIOFUKI: C2RustUnnamed_20 = 314;
pub const OBJECT_GANON_OBJECTS: C2RustUnnamed_20 = 313;
pub const OBJECT_GI_TRUTH_MASK: C2RustUnnamed_20 = 312;
pub const OBJECT_GI_RABIT_MASK: C2RustUnnamed_20 = 311;
pub const OBJECT_GI_SKJ_MASK: C2RustUnnamed_20 = 310;
pub const OBJECT_GI_REDEAD_MASK: C2RustUnnamed_20 = 309;
pub const OBJECT_GI_KI_TAN_MASK: C2RustUnnamed_20 = 308;
pub const OBJECT_FU: C2RustUnnamed_20 = 307;
pub const OBJECT_MK: C2RustUnnamed_20 = 306;
pub const OBJECT_OWL: C2RustUnnamed_20 = 305;
pub const OBJECT_GJYO_OBJECTS: C2RustUnnamed_20 = 304;
pub const OBJECT_KANBAN: C2RustUnnamed_20 = 303;
pub const OBJECT_GI_COIN: C2RustUnnamed_20 = 302;
pub const OBJECT_GI_GLOVES: C2RustUnnamed_20 = 301;
pub const OBJECT_TSUBO: C2RustUnnamed_20 = 300;
pub const OBJECT_KUSA: C2RustUnnamed_20 = 299;
pub const OBJECT_LIGHTSWITCH: C2RustUnnamed_20 = 298;
pub const OBJECT_INGATE: C2RustUnnamed_20 = 297;
pub const OBJECT_HS: C2RustUnnamed_20 = 296;
pub const OBJECT_MS: C2RustUnnamed_20 = 295;
pub const OBJECT_GM: C2RustUnnamed_20 = 294;
pub const OBJECT_BLKOBJ: C2RustUnnamed_20 = 293;
pub const OBJECT_NWC: C2RustUnnamed_20 = 292;
pub const OBJECT_UNSET_123: C2RustUnnamed_20 = 291;
pub const OBJECT_DAIKU: C2RustUnnamed_20 = 290;
pub const OBJECT_TORYO: C2RustUnnamed_20 = 289;
pub const OBJECT_UNSET_120: C2RustUnnamed_20 = 288;
pub const OBJECT_GOROIWA: C2RustUnnamed_20 = 287;
pub const OBJECT_MAMENOKI: C2RustUnnamed_20 = 286;
pub const OBJECT_D_LIFT: C2RustUnnamed_20 = 285;
pub const OBJECT_D_HSBLOCK: C2RustUnnamed_20 = 284;
pub const OBJECT_D_ELEVATOR: C2RustUnnamed_20 = 283;
pub const OBJECT_GND_MAGIC: C2RustUnnamed_20 = 282;
pub const OBJECT_GI_SEED: C2RustUnnamed_20 = 281;
pub const OBJECT_GI_BOOTS_2: C2RustUnnamed_20 = 280;
pub const OBJECT_YABUSAME_POINT: C2RustUnnamed_20 = 279;
pub const OBJECT_GE1: C2RustUnnamed_20 = 278;
pub const OBJECT_BOB: C2RustUnnamed_20 = 277;
pub const OBJECT_FZ: C2RustUnnamed_20 = 276;
pub const OBJECT_SPOT07_OBJECT: C2RustUnnamed_20 = 275;
pub const OBJECT_SPOT03_OBJECT: C2RustUnnamed_20 = 274;
pub const OBJECT_BOJ: C2RustUnnamed_20 = 273;
pub const OBJECT_ANE: C2RustUnnamed_20 = 272;
pub const OBJECT_DS: C2RustUnnamed_20 = 271;
pub const OBJECT_GI_OCARINA_0: C2RustUnnamed_20 = 270;
pub const OBJECT_BBA: C2RustUnnamed_20 = 269;
pub const OBJECT_BJI: C2RustUnnamed_20 = 268;
pub const OBJECT_GI_BOTTLE_LETTER: C2RustUnnamed_20 = 267;
pub const OBJECT_SKJ: C2RustUnnamed_20 = 266;
pub const OBJECT_GI_NIWATORI: C2RustUnnamed_20 = 265;
pub const OBJECT_CNE: C2RustUnnamed_20 = 264;
pub const OBJECT_AHG: C2RustUnnamed_20 = 263;
pub const OBJECT_IK: C2RustUnnamed_20 = 262;
pub const OBJECT_AOB: C2RustUnnamed_20 = 261;
pub const OBJECT_MASTERZOORA: C2RustUnnamed_20 = 260;
pub const OBJECT_MASTERGOLON: C2RustUnnamed_20 = 259;
pub const OBJECT_MASTERKOKIRIHEAD: C2RustUnnamed_20 = 258;
pub const OBJECT_MASTERKOKIRI: C2RustUnnamed_20 = 257;
pub const OBJECT_UMAJUMP: C2RustUnnamed_20 = 256;
pub const OBJECT_KZ: C2RustUnnamed_20 = 255;
pub const OBJECT_ZO: C2RustUnnamed_20 = 254;
pub const OBJECT_KW1: C2RustUnnamed_20 = 253;
pub const OBJECT_KM1: C2RustUnnamed_20 = 252;
pub const OBJECT_MD: C2RustUnnamed_20 = 251;
pub const OBJECT_MD_UNUSED: C2RustUnnamed_20 = 250;
pub const OBJECT_SPOT01_OBJECTS: C2RustUnnamed_20 = 249;
pub const OBJECT_GI_LONGSWORD: C2RustUnnamed_20 = 248;
pub const OBJECT_GI_GRASS: C2RustUnnamed_20 = 247;
pub const OBJECT_GI_HAMMER: C2RustUnnamed_20 = 246;
pub const OBJECT_GI_SAW: C2RustUnnamed_20 = 245;
pub const OBJECT_GI_FISH: C2RustUnnamed_20 = 244;
pub const OBJECT_GI_BEAN: C2RustUnnamed_20 = 243;
pub const OBJECT_GI_CLOTHES: C2RustUnnamed_20 = 242;
pub const OBJECT_JYA_OBJ: C2RustUnnamed_20 = 241;
pub const OBJECT_SPOT15_OBJ: C2RustUnnamed_20 = 240;
pub const OBJECT_GI_LETTER: C2RustUnnamed_20 = 239;
pub const OBJECT_GI_SHIELD_3: C2RustUnnamed_20 = 238;
pub const OBJECT_DEMO_6K: C2RustUnnamed_20 = 237;
pub const OBJECT_ANI: C2RustUnnamed_20 = 236;
pub const OBJECT_GI_LIQUID: C2RustUnnamed_20 = 235;
pub const OBJECT_GI_GLASSES: C2RustUnnamed_20 = 234;
pub const OBJECT_GI_BOW: C2RustUnnamed_20 = 233;
pub const OBJECT_GI_BOOMERANG: C2RustUnnamed_20 = 232;
pub const OBJECT_GI_PACHINKO: C2RustUnnamed_20 = 231;
pub const OBJECT_FR: C2RustUnnamed_20 = 230;
pub const OBJECT_NY: C2RustUnnamed_20 = 229;
pub const OBJECT_UNSET_E4: C2RustUnnamed_20 = 228;
pub const OBJECT_NY_UNUSED: C2RustUnnamed_20 = 227;
pub const OBJECT_SST: C2RustUnnamed_20 = 226;
pub const OBJECT_GANON: C2RustUnnamed_20 = 225;
pub const OBJECT_MA1: C2RustUnnamed_20 = 224;
pub const OBJECT_GI_MILK: C2RustUnnamed_20 = 223;
pub const OBJECT_GI_OCARINA: C2RustUnnamed_20 = 222;
pub const OBJECT_GI_HOOKSHOT: C2RustUnnamed_20 = 221;
pub const OBJECT_GI_SHIELD_2: C2RustUnnamed_20 = 220;
pub const OBJECT_GI_SCALE: C2RustUnnamed_20 = 219;
pub const OBJECT_GI_EGG: C2RustUnnamed_20 = 218;
pub const OBJECT_GI_BOMB_2: C2RustUnnamed_20 = 217;
pub const OBJECT_GI_ARROW: C2RustUnnamed_20 = 216;
pub const OBJECT_GI_GERUDO: C2RustUnnamed_20 = 215;
pub const OBJECT_ANUBICE: C2RustUnnamed_20 = 214;
pub const OBJECT_BXA: C2RustUnnamed_20 = 213;
pub const OBJECT_RR: C2RustUnnamed_20 = 212;
pub const OBJECT_TW: C2RustUnnamed_20 = 211;
pub const OBJECT_HNI: C2RustUnnamed_20 = 210;
pub const OBJECT_GI_PURSE: C2RustUnnamed_20 = 209;
pub const OBJECT_MA2: C2RustUnnamed_20 = 208;
pub const OBJECT_OF1S: C2RustUnnamed_20 = 207;
pub const OBJECT_GI_BOMB_1: C2RustUnnamed_20 = 206;
pub const OBJECT_GI_MAGICPOT: C2RustUnnamed_20 = 205;
pub const OBJECT_DEKUJR: C2RustUnnamed_20 = 204;
pub const OBJECT_GI_SHIELD_1: C2RustUnnamed_20 = 203;
pub const OBJECT_RU2: C2RustUnnamed_20 = 202;
pub const OBJECT_OF1D_MAP: C2RustUnnamed_20 = 201;
pub const OBJECT_GI_MAP: C2RustUnnamed_20 = 200;
pub const OBJECT_GI_STICK: C2RustUnnamed_20 = 199;
pub const OBJECT_GI_BOTTLE: C2RustUnnamed_20 = 198;
pub const OBJECT_OS_ANIME: C2RustUnnamed_20 = 197;
pub const OBJECT_OE4S: C2RustUnnamed_20 = 196;
pub const OBJECT_OE1S: C2RustUnnamed_20 = 195;
pub const OBJECT_SPOT16_OBJ: C2RustUnnamed_20 = 194;
pub const OBJECT_TR: C2RustUnnamed_20 = 193;
pub const OBJECT_IN: C2RustUnnamed_20 = 192;
pub const OBJECT_GI_BOMBPOUCH: C2RustUnnamed_20 = 191;
pub const OBJECT_GI_ARROWCASE: C2RustUnnamed_20 = 190;
pub const OBJECT_GI_HEARTS: C2RustUnnamed_20 = 189;
pub const OBJECT_SA: C2RustUnnamed_20 = 188;
pub const OBJECT_GI_NUTS: C2RustUnnamed_20 = 187;
pub const OBJECT_GI_MEDAL: C2RustUnnamed_20 = 186;
pub const OBJECT_GI_BOSSKEY: C2RustUnnamed_20 = 185;
pub const OBJECT_GI_COMPASS: C2RustUnnamed_20 = 184;
pub const OBJECT_GI_HEART: C2RustUnnamed_20 = 183;
pub const OBJECT_GI_MELODY: C2RustUnnamed_20 = 182;
pub const OBJECT_SB: C2RustUnnamed_20 = 181;
pub const OBJECT_MO: C2RustUnnamed_20 = 180;
pub const OBJECT_NB: C2RustUnnamed_20 = 179;
pub const OBJECT_SHOP_DUNGEN: C2RustUnnamed_20 = 178;
pub const OBJECT_SPOT17_OBJ: C2RustUnnamed_20 = 177;
pub const OBJECT_BDOOR: C2RustUnnamed_20 = 176;
pub const OBJECT_SPOT18_OBJ: C2RustUnnamed_20 = 175;
pub const OBJECT_SPOT09_OBJ: C2RustUnnamed_20 = 174;
pub const OBJECT_GI_JEWEL: C2RustUnnamed_20 = 173;
pub const OBJECT_BROB: C2RustUnnamed_20 = 172;
pub const OBJECT_MIR_RAY: C2RustUnnamed_20 = 171;
pub const OBJECT_GI_KEY: C2RustUnnamed_20 = 170;
pub const OBJECT_DEMO_TRE_LGT: C2RustUnnamed_20 = 169;
pub const OBJECT_EFC_TW: C2RustUnnamed_20 = 168;
pub const OBJECT_RL: C2RustUnnamed_20 = 167;
pub const OBJECT_DH: C2RustUnnamed_20 = 166;
pub const OBJECT_FD2: C2RustUnnamed_20 = 165;
pub const OBJECT_SYOKUDAI: C2RustUnnamed_20 = 164;
pub const OBJECT_RU1: C2RustUnnamed_20 = 163;
pub const OBJECT_HAKA: C2RustUnnamed_20 = 162;
pub const OBJECT_SPOT02_OBJECTS: C2RustUnnamed_20 = 161;
pub const OBJECT_HORSE_LINK_CHILD: C2RustUnnamed_20 = 160;
pub const OBJECT_MEDAL: C2RustUnnamed_20 = 159;
pub const OBJECT_FW: C2RustUnnamed_20 = 158;
pub const OBJECT_DU: C2RustUnnamed_20 = 157;
pub const OBJECT_FD: C2RustUnnamed_20 = 156;
pub const OBJECT_GNDD: C2RustUnnamed_20 = 155;
pub const OBJECT_HEAVY_OBJECT: C2RustUnnamed_20 = 154;
pub const OBJECT_PO_SISTERS: C2RustUnnamed_20 = 153;
pub const OBJECT_RD: C2RustUnnamed_20 = 152;
pub const OBJECT_SD: C2RustUnnamed_20 = 151;
pub const OBJECT_BDAN_OBJECTS: C2RustUnnamed_20 = 150;
pub const OBJECT_TRIFORCE_SPOT: C2RustUnnamed_20 = 149;
pub const OBJECT_LIGHT_RING: C2RustUnnamed_20 = 148;
pub const OBJECT_GOD_LGT: C2RustUnnamed_20 = 147;
pub const OBJECT_EFC_STAR_FIELD: C2RustUnnamed_20 = 146;
pub const OBJECT_EFC_LGT_SHOWER: C2RustUnnamed_20 = 145;
pub const OBJECT_EFC_FLASH: C2RustUnnamed_20 = 144;
pub const OBJECT_EFC_FIRE_BALL: C2RustUnnamed_20 = 143;
pub const OBJECT_EFC_CRYSTAL_LIGHT: C2RustUnnamed_20 = 142;
pub const OBJECT_HAKACH_OBJECTS: C2RustUnnamed_20 = 141;
pub const OBJECT_BV: C2RustUnnamed_20 = 140;
pub const OBJECT_VM: C2RustUnnamed_20 = 139;
pub const OBJECT_XC: C2RustUnnamed_20 = 138;
pub const OBJECT_TK: C2RustUnnamed_20 = 137;
pub const OBJECT_TA: C2RustUnnamed_20 = 136;
pub const OBJECT_IM: C2RustUnnamed_20 = 135;
pub const OBJECT_VASE: C2RustUnnamed_20 = 134;
pub const OBJECT_TRAP: C2RustUnnamed_20 = 133;
pub const OBJECT_UNSET_84: C2RustUnnamed_20 = 132;
pub const OBJECT_UNSET_83: C2RustUnnamed_20 = 131;
pub const OBJECT_PU_BOX: C2RustUnnamed_20 = 130;
pub const OBJECT_LIGHTBOX: C2RustUnnamed_20 = 129;
pub const OBJECT_UNSET_80: C2RustUnnamed_20 = 128;
pub const OBJECT_UNSET_7F: C2RustUnnamed_20 = 127;
pub const OBJECT_UNSET_7E: C2RustUnnamed_20 = 126;
pub const OBJECT_UNSET_7D: C2RustUnnamed_20 = 125;
pub const OBJECT_WOOD02: C2RustUnnamed_20 = 124;
pub const OBJECT_UNSET_7B: C2RustUnnamed_20 = 123;
pub const OBJECT_UNSET_7A: C2RustUnnamed_20 = 122;
pub const OBJECT_UNSET_79: C2RustUnnamed_20 = 121;
pub const OBJECT_UNSET_78: C2RustUnnamed_20 = 120;
pub const OBJECT_BIRD: C2RustUnnamed_20 = 119;
pub const OBJECT_HATA: C2RustUnnamed_20 = 118;
pub const OBJECT_WARP2: C2RustUnnamed_20 = 117;
pub const OBJECT_SPOT08_OBJ: C2RustUnnamed_20 = 116;
pub const OBJECT_MORI_TEX: C2RustUnnamed_20 = 115;
pub const OBJECT_MORI_OBJECTS: C2RustUnnamed_20 = 114;
pub const OBJECT_MORI_HINERI2A: C2RustUnnamed_20 = 113;
pub const OBJECT_MORI_HINERI2: C2RustUnnamed_20 = 112;
pub const OBJECT_MORI_HINERI1A: C2RustUnnamed_20 = 111;
pub const OBJECT_PO_COMPOSER: C2RustUnnamed_20 = 110;
pub const OBJECT_PO_FIELD: C2RustUnnamed_20 = 109;
pub const OBJECT_RELAY_OBJECTS: C2RustUnnamed_20 = 108;
pub const OBJECT_ICE_OBJECTS: C2RustUnnamed_20 = 107;
pub const OBJECT_SPOT06_OBJECTS: C2RustUnnamed_20 = 106;
pub const OBJECT_HAKA_OBJECTS: C2RustUnnamed_20 = 105;
pub const OBJECT_MJIN_OKA: C2RustUnnamed_20 = 104;
pub const OBJECT_MJIN_WIND: C2RustUnnamed_20 = 103;
pub const OBJECT_MJIN_SOUL: C2RustUnnamed_20 = 102;
pub const OBJECT_MJIN_ICE: C2RustUnnamed_20 = 101;
pub const OBJECT_MJIN_FLAME: C2RustUnnamed_20 = 100;
pub const OBJECT_MJIN_DARK: C2RustUnnamed_20 = 99;
pub const OBJECT_MJIN_FLASH: C2RustUnnamed_20 = 98;
pub const OBJECT_MJIN: C2RustUnnamed_20 = 97;
pub const OBJECT_ZL2: C2RustUnnamed_20 = 96;
pub const OBJECT_YUKABYUN: C2RustUnnamed_20 = 95;
pub const OBJECT_TOKI_OBJECTS: C2RustUnnamed_20 = 94;
pub const OBJECT_BB: C2RustUnnamed_20 = 93;
pub const OBJECT_MORI_HINERI1: C2RustUnnamed_20 = 92;
pub const OBJECT_OSSAN: C2RustUnnamed_20 = 91;
pub const OBJECT_FHG: C2RustUnnamed_20 = 90;
pub const OBJECT_MIZU_OBJECTS: C2RustUnnamed_20 = 89;
pub const OBJECT_OA11: C2RustUnnamed_20 = 88;
pub const OBJECT_OA10: C2RustUnnamed_20 = 87;
pub const OBJECT_VALI: C2RustUnnamed_20 = 86;
pub const OBJECT_OE12: C2RustUnnamed_20 = 85;
pub const OBJECT_OE11: C2RustUnnamed_20 = 84;
pub const OBJECT_OE10: C2RustUnnamed_20 = 83;
pub const OBJECT_OE9: C2RustUnnamed_20 = 82;
pub const OBJECT_OE8: C2RustUnnamed_20 = 81;
pub const OBJECT_OE7: C2RustUnnamed_20 = 80;
pub const OBJECT_OE6: C2RustUnnamed_20 = 79;
pub const OBJECT_OE5: C2RustUnnamed_20 = 78;
pub const OBJECT_MENKURI_OBJECTS: C2RustUnnamed_20 = 77;
pub const OBJECT_OE4: C2RustUnnamed_20 = 76;
pub const OBJECT_OE3: C2RustUnnamed_20 = 75;
pub const OBJECT_DEKUNUTS: C2RustUnnamed_20 = 74;
pub const OBJECT_B_HEART: C2RustUnnamed_20 = 73;
pub const OBJECT_WARP1: C2RustUnnamed_20 = 72;
pub const OBJECT_OPENING_DEMO1: C2RustUnnamed_20 = 71;
pub const OBJECT_HORSE_ZELDA: C2RustUnnamed_20 = 70;
pub const OBJECT_OB4: C2RustUnnamed_20 = 69;
pub const OBJECT_OB3: C2RustUnnamed_20 = 68;
pub const OBJECT_OB2: C2RustUnnamed_20 = 67;
pub const OBJECT_OA9: C2RustUnnamed_20 = 66;
pub const OBJECT_OA8: C2RustUnnamed_20 = 65;
pub const OBJECT_JJ: C2RustUnnamed_20 = 64;
pub const OBJECT_OA7: C2RustUnnamed_20 = 63;
pub const OBJECT_OA6: C2RustUnnamed_20 = 62;
pub const OBJECT_OA5: C2RustUnnamed_20 = 61;
pub const OBJECT_OA4: C2RustUnnamed_20 = 60;
pub const OBJECT_OA3: C2RustUnnamed_20 = 59;
pub const OBJECT_UNSET_3A: C2RustUnnamed_20 = 58;
pub const OBJECT_DEKUBABA: C2RustUnnamed_20 = 57;
pub const OBJECT_AM: C2RustUnnamed_20 = 56;
pub const OBJECT_GND: C2RustUnnamed_20 = 55;
pub const OBJECT_YDAN_OBJECTS: C2RustUnnamed_20 = 54;
pub const OBJECT_OE2: C2RustUnnamed_20 = 53;
pub const OBJECT_OE_ANIME: C2RustUnnamed_20 = 52;
pub const OBJECT_OE1: C2RustUnnamed_20 = 51;
pub const OBJECT_SK2: C2RustUnnamed_20 = 50;
pub const OBJECT_BOMBF: C2RustUnnamed_20 = 49;
pub const OBJECT_MB: C2RustUnnamed_20 = 48;
pub const OBJECT_SPOT00_OBJECTS: C2RustUnnamed_20 = 47;
pub const OBJECT_OA2: C2RustUnnamed_20 = 46;
pub const OBJECT_HORSE_GANON: C2RustUnnamed_20 = 45;
pub const OBJECT_HIDAN_OBJECTS: C2RustUnnamed_20 = 44;
pub const OBJECT_DDAN_OBJECTS: C2RustUnnamed_20 = 43;
pub const OBJECT_SPOT04_OBJECTS: C2RustUnnamed_20 = 42;
pub const OBJECT_O_ANIME: C2RustUnnamed_20 = 41;
pub const OBJECT_OB1: C2RustUnnamed_20 = 40;
pub const OBJECT_HORSE_NORMAL: C2RustUnnamed_20 = 39;
pub const OBJECT_EI: C2RustUnnamed_20 = 38;
pub const OBJECT_BW: C2RustUnnamed_20 = 37;
pub const OBJECT_ST: C2RustUnnamed_20 = 36;
pub const OBJECT_OA1: C2RustUnnamed_20 = 35;
pub const OBJECT_TP: C2RustUnnamed_20 = 34;
pub const OBJECT_BL: C2RustUnnamed_20 = 33;
pub const OBJECT_TORCH2: C2RustUnnamed_20 = 32;
pub const OBJECT_DODOJR: C2RustUnnamed_20 = 31;
pub const OBJECT_GOL: C2RustUnnamed_20 = 30;
pub const OBJECT_ZL1: C2RustUnnamed_20 = 29;
pub const OBJECT_GOMA: C2RustUnnamed_20 = 28;
pub const OBJECT_ZF: C2RustUnnamed_20 = 27;
pub const OBJECT_HORSE: C2RustUnnamed_20 = 26;
pub const OBJECT_KINGDODONGO: C2RustUnnamed_20 = 25;
pub const OBJECT_PEEHAT: C2RustUnnamed_20 = 24;
pub const OBJECT_REEBA: C2RustUnnamed_20 = 23;
pub const OBJECT_TITE: C2RustUnnamed_20 = 22;
pub const OBJECT_LINK_CHILD: C2RustUnnamed_20 = 21;
pub const OBJECT_LINK_BOY: C2RustUnnamed_20 = 20;
pub const OBJECT_NIW: C2RustUnnamed_20 = 19;
pub const OBJECT_BUBBLE: C2RustUnnamed_20 = 18;
pub const OBJECT_UNSET_11: C2RustUnnamed_20 = 17;
pub const OBJECT_UNSET_10: C2RustUnnamed_20 = 16;
pub const OBJECT_FIRE: C2RustUnnamed_20 = 15;
pub const OBJECT_BOX: C2RustUnnamed_20 = 14;
pub const OBJECT_FIREFLY: C2RustUnnamed_20 = 13;
pub const OBJECT_DODONGO: C2RustUnnamed_20 = 12;
pub const OBJECT_WALLMASTER: C2RustUnnamed_20 = 11;
pub const OBJECT_DY_OBJ: C2RustUnnamed_20 = 10;
pub const OBJECT_POH: C2RustUnnamed_20 = 9;
pub const OBJECT_CROW: C2RustUnnamed_20 = 8;
pub const OBJECT_OKUTA: C2RustUnnamed_20 = 7;
pub const OBJECT_HUMAN: C2RustUnnamed_20 = 6;
pub const OBJECT_UNSET_5: C2RustUnnamed_20 = 5;
pub const OBJECT_UNSET_4: C2RustUnnamed_20 = 4;
pub const OBJECT_GAMEPLAY_DANGEON_KEEP: C2RustUnnamed_20 = 3;
pub const OBJECT_GAMEPLAY_FIELD_KEEP: C2RustUnnamed_20 = 2;
pub const OBJECT_GAMEPLAY_KEEP: C2RustUnnamed_20 = 1;
pub const OBJECT_INVALID: C2RustUnnamed_20 = 0;
pub type C2RustUnnamed_21 = libc::c_uint;
pub const SEQ_PLAYER_BGM_SUB: C2RustUnnamed_21 = 3;
pub const SEQ_PLAYER_SFX: C2RustUnnamed_21 = 2;
pub const SEQ_PLAYER_FANFARE: C2RustUnnamed_21 = 1;
pub const SEQ_PLAYER_BGM_MAIN: C2RustUnnamed_21 = 0;
pub type C2RustUnnamed_22 = libc::c_uint;
pub const TEXT_STATE_AWAITING_NEXT: C2RustUnnamed_22 = 10;
pub const TEXT_STATE_9: C2RustUnnamed_22 = 9;
pub const TEXT_STATE_8: C2RustUnnamed_22 = 8;
pub const TEXT_STATE_SONG_DEMO_DONE: C2RustUnnamed_22 = 7;
pub const TEXT_STATE_DONE: C2RustUnnamed_22 = 6;
pub const TEXT_STATE_EVENT: C2RustUnnamed_22 = 5;
pub const TEXT_STATE_CHOICE: C2RustUnnamed_22 = 4;
pub const TEXT_STATE_DONE_FADING: C2RustUnnamed_22 = 3;
pub const TEXT_STATE_CLOSING: C2RustUnnamed_22 = 2;
pub const TEXT_STATE_DONE_HAS_NEXT: C2RustUnnamed_22 = 1;
pub const TEXT_STATE_NONE: C2RustUnnamed_22 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct struct_80034A14_arg1 {
    pub unk_00: s16,
    pub unk_02: s16,
    pub unk_04: s16,
    pub unk_06: s16,
    pub unk_08: Vec3s,
    pub unk_0E: Vec3s,
    pub unk_14: f32_0,
    pub unk_18: Vec3f,
    pub unk_24: s16,
}
pub type C2RustUnnamed_23 = libc::c_uint;
pub const MTXMODE_APPLY: C2RustUnnamed_23 = 1;
pub const MTXMODE_NEW: C2RustUnnamed_23 = 0;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BossGanon2 {
    pub actor: Actor,
    pub skelAnime: SkelAnime,
    pub actionFunc: BossGanon2ActionFunc,
    pub unk_194: f32_0,
    pub unk_198: f32_0,
    pub unk_19C: s16,
    pub unk_19E: [libc::c_char; 4],
    pub unk_1A2: [s16; 5],
    pub unk_1AC: s16,
    pub unk_1B0: f32_0,
    pub unk_1B4: f32_0,
    pub unk_1B8: Vec3f,
    pub unk_1C4: Vec3f,
    pub unk_1D0: Vec3f,
    pub unk_1DC: Vec3f,
    pub unk_1E8: Vec3f,
    pub unk_1F4: Vec3f,
    pub unk_200: Vec3f,
    pub unk_20C: Vec3f,
    pub unk_218: Vec3f,
    pub unk_224: f32_0,
    pub unk_228: f32_0,
    pub unk_22C: [libc::c_char; 8],
    pub unk_234: [Vec3f; 16],
    pub unk_2F4: [s16; 5],
    pub unk_2FE: [s16; 5],
    pub unk_308: [libc::c_char; 4],
    pub unk_30C: f32_0,
    pub unk_310: u8_0,
    pub unk_311: u8_0,
    pub unk_312: u8_0,
    pub unk_313: u8_0,
    pub unk_314: u8_0,
    pub unk_316: s16,
    pub unk_318: s16,
    pub unk_31A: s16,
    pub unk_31C: s16,
    pub unk_320: f32_0,
    pub unk_324: f32_0,
    pub unk_328: s16,
    pub unk_32C: f32_0,
    pub unk_330: s16,
    pub unk_332: s16,
    pub unk_334: u8_0,
    pub unk_335: u8_0,
    pub unk_336: u8_0,
    pub unk_337: u8_0,
    pub unk_338: u8_0,
    pub unk_339: s8,
    pub unk_33C: f32_0,
    pub unk_340: s16,
    pub unk_342: s16,
    pub unk_344: s16,
    pub unk_346: s16,
    pub unk_348: [s16; 5],
    pub unk_352: [s16; 5],
    pub unk_35C: f32_0,
    pub unk_360: Vec3f,
    pub unk_36C: f32_0,
    pub unk_370: Vec3f,
    pub unk_37C: f32_0,
    pub unk_380: f32_0,
    pub unk_384: f32_0,
    pub unk_388: f32_0,
    pub unk_38C: f32_0,
    pub unk_390: s16,
    pub unk_392: s16,
    pub unk_394: f32_0,
    pub unk_398: u32_0,
    pub unk_39C: s16,
    pub unk_39E: s16,
    pub unk_3A0: [libc::c_char; 4],
    pub unk_3A4: Vec3f,
    pub unk_3B0: Vec3f,
    pub unk_3BC: Vec3f,
    pub unk_3C8: [libc::c_char; 72],
    pub unk_410: Vec3f,
    pub unk_41C: f32_0,
    pub unk_420: f32_0,
    pub unk_424: ColliderJntSph,
    pub unk_444: ColliderJntSph,
    pub unk_464: [ColliderJntSphElement; 16],
    pub unk_864: [ColliderJntSphElement; 2],
}
pub type BossGanon2ActionFunc
    =
    Option<unsafe extern "C" fn(_: *mut BossGanon2, _: *mut GlobalContext)
               -> ()>;
#[derive(Copy, Clone)]
#[repr(C)]
pub struct DemoGj {
    pub dyna: DynaPolyActor,
    pub updateMode: s32,
    pub drawConfig: s32,
    pub rotationVec: Vec3s,
    pub unk_172: Vec3s,
    pub ganon: *mut BossGanon2,
    pub isTransformedIntoGanon: s32,
    pub isRotated: s32,
    pub cylinders: [ColliderCylinder; 3],
    pub killFlag: s32,
    pub unk_26C: Vec3f,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct EnZl3 {
    pub actor: Actor,
    pub skelAnime: SkelAnime,
    pub jointTable: [Vec3s; 15],
    pub morphTable: [Vec3s; 15],
    pub eyeTexIndex: s16,
    pub blinkTimer: s16,
    pub mouthTexIndex: s16,
    pub action: s32,
    pub drawConfig: s32,
    pub unk_254: [libc::c_char; 4],
    pub alpha: s32,
    pub unk_25C: [s16; 24],
    pub unk_28C: [s16; 24],
    pub unk_2BC: [s16; 24],
    pub unk_2EC: f32_0,
    pub unk_2F0: s32,
    pub unk_2F4: [libc::c_char; 4],
    pub unk_2F8: s32,
    pub unk_2FC: s32,
    pub unk_300: [libc::c_char; 8],
    pub unk_308: s32,
    pub unk_30C: *mut Path,
    pub unk_310: s32,
    pub unk_314: s32,
    pub unk_318: s32,
    pub unk_31C: Vec3f,
    pub unk_328: s32,
    pub unk_32C: Vec3f,
    pub unk_338: Vec3f,
    pub unk_344: u16_0,
    pub unk_346: u16_0,
    pub unk_348: Vec3f,
    pub unk_354: Vec3f,
    pub unk_360: f32_0,
    pub unk_364: f32_0,
    pub unk_368: f32_0,
    pub unk_36C: s32,
    pub unk_370: s32,
    pub unk_374: s32,
    pub collider: ColliderCylinder,
    pub unk_3C4: s32,
    pub unk_3C8: u8_0,
    pub unk_3CC: f32_0,
    pub unk_3D0: s16,
    pub ganon: *mut BossGanon2,
    pub unk_3D8: s32,
    pub unk_3DC: f32_0,
    pub unk_3E0: f32_0,
    pub unk_3E4: f32_0,
    pub unk_3E8: f32_0,
    pub unk_3EC: f32_0,
    pub unk_3F0: f32_0,
    pub unk_3F4: f32_0,
    pub unk_3F8: struct_80034A14_arg1,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct BossGanon2Effect {
    pub type_0: u8_0,
    pub unk_01: u8_0,
    pub position: Vec3f,
    pub velocity: Vec3f,
    pub accel: Vec3f,
    pub unk_28: [libc::c_char; 6],
    pub unk_2E: s16,
    pub unk_30: [libc::c_char; 4],
    pub scale: f32_0,
    pub unk_38: Vec3f,
}
#[no_mangle]
pub static mut Boss_Ganon2_InitVars: ActorInit =
    unsafe {
        {
            let mut init =
                ActorInit{id: ACTOR_BOSS_GANON2 as libc::c_int as s16,
                          category: ACTORCAT_BOSS as libc::c_int as u8_0,
                          flags:
                              ((1 as libc::c_int) << 0 as libc::c_int |
                                   (1 as libc::c_int) << 2 as libc::c_int |
                                   (1 as libc::c_int) << 4 as libc::c_int |
                                   (1 as libc::c_int) << 5 as libc::c_int) as
                                  u32_0,
                          objectId: OBJECT_GANON2 as libc::c_int as s16,
                          instanceSize:
                              ::std::mem::size_of::<BossGanon2>() as
                                  libc::c_ulong,
                          init:
                              ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                      *mut Actor,
                                                                                  _:
                                                                                      *mut GlobalContext)
                                                                 -> ()>,
                                                      ActorFunc>(Some(BossGanon2_Init
                                                                          as
                                                                          unsafe extern "C" fn(_:
                                                                                                   *mut Actor,
                                                                                               _:
                                                                                                   *mut GlobalContext)
                                                                              ->
                                                                                  ())),
                          destroy:
                              ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                      *mut Actor,
                                                                                  _:
                                                                                      *mut GlobalContext)
                                                                 -> ()>,
                                                      ActorFunc>(Some(BossGanon2_Destroy
                                                                          as
                                                                          unsafe extern "C" fn(_:
                                                                                                   *mut Actor,
                                                                                               _:
                                                                                                   *mut GlobalContext)
                                                                              ->
                                                                                  ())),
                          update:
                              ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                      *mut Actor,
                                                                                  _:
                                                                                      *mut GlobalContext)
                                                                 -> ()>,
                                                      ActorFunc>(Some(BossGanon2_Update
                                                                          as
                                                                          unsafe extern "C" fn(_:
                                                                                                   *mut Actor,
                                                                                               _:
                                                                                                   *mut GlobalContext)
                                                                              ->
                                                                                  ())),
                          draw:
                              ::std::mem::transmute::<Option<unsafe extern "C" fn(_:
                                                                                      *mut Actor,
                                                                                  _:
                                                                                      *mut GlobalContext)
                                                                 -> ()>,
                                                      ActorFunc>(Some(BossGanon2_Draw
                                                                          as
                                                                          unsafe extern "C" fn(_:
                                                                                                   *mut Actor,
                                                                                               _:
                                                                                                   *mut GlobalContext)
                                                                              ->
                                                                                  ())),};
            init
        }
    };
static mut sZelda: *mut EnZl3 = 0 as *const EnZl3 as *mut EnZl3;
static mut D_8090EB30: *mut Actor = 0 as *const Actor as *mut Actor;
static mut ovl_Boss_Ganon2_Vtx_00E020: [Vtx; 26] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(3333 as libc::c_int) as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                -(7639 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [10240 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(3333 as libc::c_int) as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                -(7639 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [10240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1005 as libc::c_int as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                -(8370 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [9216 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [1005 as libc::c_int as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                -(8370 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [9216 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(6724 as libc::c_int) as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                -(4836 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [11264 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(6724 as libc::c_int) as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                -(4836 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [11264 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(8261 as libc::c_int) as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                -(714 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [12288 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(8261 as libc::c_int) as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                -(714 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [12288 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(7529 as libc::c_int) as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                3624 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(7529 as libc::c_int) as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                3624 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(8261 as libc::c_int) as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                -(714 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(8261 as libc::c_int) as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                -(714 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(4727 as libc::c_int) as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                7016 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(4727 as libc::c_int) as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                7016 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(605 as libc::c_int) as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                8552 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(605 as libc::c_int) as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                8552 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [3072 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [3734 as libc::c_int as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                7821 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [4096 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [3734 as libc::c_int as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                7821 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [4096 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [7125 as libc::c_int as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                5019 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [5120 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [7125 as libc::c_int as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                5019 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [5120 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [8661 as libc::c_int as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                896 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [6144 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [8661 as libc::c_int as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                896 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [6144 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [7930 as libc::c_int as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                -(3442 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [7168 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [7930 as libc::c_int as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                -(3442 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [7168 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [5128 as libc::c_int as libc::c_short,
                                -(8 as libc::c_int) as libc::c_short,
                                -(6834 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [8192 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [5128 as libc::c_int as libc::c_short,
                                3823 as libc::c_int as libc::c_short,
                                -(6834 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [8192 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut D_80907144: [s8; 32] =
    [0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x1 as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x3 as libc::c_int as s8, 0x4 as libc::c_int as s8,
     0x5 as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x6 as libc::c_int as s8, 0x7 as libc::c_int as s8,
     0x8 as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0x2 as libc::c_int as s8,
     0xc as libc::c_int as s8, 0xd as libc::c_int as s8,
     0xe as libc::c_int as s8, 0x9 as libc::c_int as s8,
     0xa as libc::c_int as s8, 0xb as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0 as libc::c_int as s8, 0 as libc::c_int as s8];
static mut D_80907164: Vec3f =
    { let mut init = Vec3f{x: 800.0f32, y: 420.0f32, z: 100.0f32,}; init };
static mut sEyeTextures: [*mut libc::c_void; 3] =
    unsafe {
        [object_ganon2_Tex_01E188.as_ptr() as *mut _ as *mut libc::c_void,
         object_ganon2_Tex_01E988.as_ptr() as *mut _ as *mut libc::c_void,
         object_ganon2_Tex_01EA08.as_ptr() as *mut _ as *mut libc::c_void]
    };
static mut D_8090717C: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: -2000.0f32, z: 0.0f32,}; init };
static mut D_809070CC: [s8; 48] =
    [0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x1 as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x3 as libc::c_int as s8, 0x4 as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x5 as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x6 as libc::c_int as s8, 0x7 as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x8 as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0 as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0x2 as libc::c_int as s8,
     0xc as libc::c_int as s8, 0xd as libc::c_int as s8,
     0xe as libc::c_int as s8, 0x9 as libc::c_int as s8,
     0xa as libc::c_int as s8, 0xb as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0 as libc::c_int as s8];
static mut D_80907108: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 2000.0f32, z: 0.0f32,}; init };
static mut D_80907114: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 2000.0f32, z: 0.0f32,}; init };
static mut D_80907138: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 0.0f32,}; init };
static mut D_8090709C: [s8; 48] =
    [0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x1 as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x3 as libc::c_int as s8, 0x4 as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x5 as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x6 as libc::c_int as s8, 0x7 as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0x8 as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0 as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0x2 as libc::c_int as s8,
     0x9 as libc::c_int as s8, 0xa as libc::c_int as s8,
     0xb as libc::c_int as s8, 0xc as libc::c_int as s8,
     0xd as libc::c_int as s8, 0xe as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xff as libc::c_int as s8,
     0xff as libc::c_int as s8, 0xf as libc::c_int as s8,
     0xff as libc::c_int as s8, 0 as libc::c_int as s8];
static mut D_80906D60: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 0.0f32,}; init };
static mut D_809070FC: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 5000.0f32,}; init };
static mut D_80907120: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 17000.0f32,}; init };
static mut D_8090712C: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 3000.0f32,}; init };
static mut D_809071CC: [s16; 15] =
    [1 as libc::c_int as s16, -(1 as libc::c_int) as s16,
     1 as libc::c_int as s16, 1 as libc::c_int as s16,
     3 as libc::c_int as s16, 4 as libc::c_int as s16,
     1 as libc::c_int as s16, 6 as libc::c_int as s16,
     7 as libc::c_int as s16, 2 as libc::c_int as s16,
     9 as libc::c_int as s16, 10 as libc::c_int as s16,
     2 as libc::c_int as s16, 12 as libc::c_int as s16,
     13 as libc::c_int as s16];
static mut D_809071B4: [s16; 12] =
    [2 as libc::c_int as s16, 4 as libc::c_int as s16,
     5 as libc::c_int as s16, 5 as libc::c_int as s16,
     6 as libc::c_int as s16, 6 as libc::c_int as s16,
     6 as libc::c_int as s16, 6 as libc::c_int as s16,
     5 as libc::c_int as s16, 5 as libc::c_int as s16,
     4 as libc::c_int as s16, 2 as libc::c_int as s16];
static mut D_809071A4: [s16; 8] =
    [2 as libc::c_int as s16, 3 as libc::c_int as s16,
     4 as libc::c_int as s16, 4 as libc::c_int as s16,
     4 as libc::c_int as s16, 4 as libc::c_int as s16,
     3 as libc::c_int as s16, 2 as libc::c_int as s16];
static mut D_809071EC: [u8_0; 15] =
    [3 as libc::c_int as u8_0, 2 as libc::c_int as u8_0,
     2 as libc::c_int as u8_0, 1 as libc::c_int as u8_0,
     3 as libc::c_int as u8_0, 3 as libc::c_int as u8_0,
     1 as libc::c_int as u8_0, 3 as libc::c_int as u8_0,
     3 as libc::c_int as u8_0, 1 as libc::c_int as u8_0,
     0 as libc::c_int as u8_0, 3 as libc::c_int as u8_0,
     1 as libc::c_int as u8_0, 0 as libc::c_int as u8_0,
     3 as libc::c_int as u8_0];
static mut D_80907194: [s16; 7] =
    [2 as libc::c_int as s16, 3 as libc::c_int as s16,
     4 as libc::c_int as s16, 4 as libc::c_int as s16,
     4 as libc::c_int as s16, 3 as libc::c_int as s16,
     2 as libc::c_int as s16];
static mut D_80907188: [s16; 6] =
    [1 as libc::c_int as s16, 2 as libc::c_int as s16,
     3 as libc::c_int as s16, 3 as libc::c_int as s16,
     2 as libc::c_int as s16, 1 as libc::c_int as s16];
static mut ovl_Boss_Ganon2_DL_00B3D0: [Gfx; 4] =
    [Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xe7 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int,
                            w1: 0 as libc::c_int as libc::c_uint,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xe3 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    ((32 as libc::c_int - 14 as libc::c_int -
                                          2 as libc::c_int) as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 8 as libc::c_int
                                    |
                                    ((2 as libc::c_int - 1 as libc::c_int) as
                                         u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int,
                            w1:
                                ((0 as libc::c_int) << 14 as libc::c_int) as
                                    libc::c_uint,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xd7 as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int |
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        11 as libc::c_int |
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) << 8 as libc::c_int
                                    |
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               7 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        1 as libc::c_int,
                            w1:
                                (0xffff as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           16 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 16 as libc::c_int |
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        0 as libc::c_int,};
                 init
             },},
     Gfx{words:
             {
                 let mut init =
                     Gwords{w0:
                                (0xdf as libc::c_int as u32_0 &
                                     (((0x1 as libc::c_int) <<
                                           8 as libc::c_int) -
                                          1 as libc::c_int) as libc::c_uint)
                                    << 24 as libc::c_int,
                            w1: 0 as libc::c_int as libc::c_uint,};
                 init
             },}];
static mut ovl_Boss_Ganon2_Vtx_00B390: [Vtx; 4] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(100 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(100 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [100 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(100 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [100 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(100 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                100 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
static mut ovl_Boss_Ganon2_DL_00B3F0: [Gfx; 6] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 6];
static mut sSeed1: s32 = 0;
static mut sSeed2: s32 = 0;
static mut sSeed3: s32 = 0;
static mut ovl_Boss_Ganon2_Tex_00CD58: [u64_0; 320] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x11 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x244 as libc::c_int as u64_0,
     0x2000000000000000 as libc::c_longlong as u64_0,
     0x2574 as libc::c_int as u64_0,
     0x1000000000000000 as libc::c_longlong as u64_0,
     0x26a94 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x39fa4 as libc::c_int as u64_0,
     0x1000000000000000 as libc::c_longlong as u64_0,
     0x39ffd as libc::c_int as u64_0,
     0x5000000000000000 as libc::c_longlong as u64_0,
     0x149bf as libc::c_int as u64_0, 0xda20000000000000 as libc::c_ulonglong,
     0x259e as libc::c_int as u64_0, 0xfa31000000000000 as libc::c_ulonglong,
     0x15bf as libc::c_int as u64_0,
     0x7200000000000000 as libc::c_longlong as u64_0,
     0x39ca as libc::c_int as u64_0,
     0x2000000000000000 as libc::c_longlong as u64_0,
     0x5ac3 as libc::c_int as u64_0,
     0x1000000000000000 as libc::c_longlong as u64_0,
     0x37a40 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x59430 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x11279410 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x34799300 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1246a92100 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x359ac70000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x3aeda51000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x1eff700000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x66ff00000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x7fff000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x77ff00 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x77ff as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x99 as libc::c_int as u64_0, 0xff00000000000000 as libc::c_ulonglong,
     0 as libc::c_int as u64_0,
     0x7ce0000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x47df00000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x5aee000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1cc960000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2cc331000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1cc320000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1bc210000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1ac100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x19b000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x17a000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x16a000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x17a000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x29b000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x13cc000000000 as libc::c_longlong as u64_0,
     0x1111 as libc::c_int as u64_0,
     0x11124cc000000000 as libc::c_longlong as u64_0,
     0x12264 as libc::c_int as u64_0,
     0x22245cc000000000 as libc::c_longlong as u64_0,
     0x253ee as libc::c_int as u64_0,
     0x5499acc000000000 as libc::c_longlong as u64_0,
     0x14aaff as libc::c_int as u64_0,
     0xebccccc000000000 as libc::c_ulonglong,
     0x136efff as libc::c_int as u64_0,
     0xffedccd000000000 as libc::c_ulonglong,
     0x25aef00 as libc::c_int as u64_0,
     0x6611111000000000 as libc::c_longlong as u64_0,
     0x147cf000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x37ae0000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x37cef0000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x15aff00000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0xafff00000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x12effc000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x2ced500 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x17cc50 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x126ba as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x19d as libc::c_int as u64_0, 0xa000000000000000 as libc::c_ulonglong,
     0x1f as libc::c_int as u64_0, 0xca40000000000000 as libc::c_ulonglong,
     0x9 as libc::c_int as u64_0, 0xee10000000000000 as libc::c_ulonglong,
     0x5 as libc::c_int as u64_0, 0xda00000000000000 as libc::c_ulonglong,
     0x7 as libc::c_int as u64_0, 0xfa00000010000000 as libc::c_ulonglong,
     0xd as libc::c_int as u64_0, 0xfe00000750000000 as libc::c_ulonglong,
     0x7f as libc::c_int as u64_0, 0xffdeefffa1000000 as libc::c_ulonglong,
     0x2bf as libc::c_int as u64_0, 0xfd7cbfffd5000000 as libc::c_ulonglong,
     0x259 as libc::c_int as u64_0, 0x940000fff6000000 as libc::c_ulonglong,
     0x112 as libc::c_int as u64_0,
     0x1000000fe5000000 as libc::c_longlong as u64_0,
     0x100 as libc::c_int as u64_0,
     0x100fa0000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0xfa2000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0xc4000000 as libc::c_uint as u64_0, 0 as libc::c_int as u64_0,
     0xe6000000 as libc::c_uint as u64_0, 0 as libc::c_int as u64_0,
     0xfb000000 as libc::c_uint as u64_0, 0 as libc::c_int as u64_0,
     0xffb00000 as libc::c_uint as u64_0, 0 as libc::c_int as u64_0,
     0xfff00000 as libc::c_uint as u64_0, 0 as libc::c_int as u64_0,
     0xfffff00000 as libc::c_longlong as u64_0, 0x77 as libc::c_int as u64_0,
     0x700efffe00000000 as libc::c_longlong as u64_0,
     0x777 as libc::c_int as u64_0, 0xfeff000000000000 as libc::c_ulonglong,
     0x7ff as libc::c_int as u64_0, 0xf900000000000000 as libc::c_ulonglong,
     0xff as libc::c_int as u64_0, 0xf000000000000000 as libc::c_ulonglong,
     0x6 as libc::c_int as u64_0, 0xf000000000000000 as libc::c_ulonglong,
     0x7 as libc::c_int as u64_0, 0xff00000000000000 as libc::c_ulonglong,
     0x7 as libc::c_int as u64_0, 0xf700000000000000 as libc::c_ulonglong,
     0x7f as libc::c_int as u64_0, 0xff00000000000000 as libc::c_ulonglong,
     0xff as libc::c_int as u64_0, 0xf000000000000000 as libc::c_ulonglong,
     0x9ff as libc::c_int as u64_0,
     0x7000000000000000 as libc::c_longlong as u64_0,
     0x5cfff as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0xacefff as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x39fffff as libc::c_int as u64_0,
     0x7000000000000000 as libc::c_longlong as u64_0,
     0x26effff as libc::c_int as u64_0,
     0xf000000000000000 as libc::c_ulonglong,
     0x1cfffff as libc::c_int as u64_0,
     0xff00000000000000 as libc::c_ulonglong,
     0x13cff77 as libc::c_int as u64_0,
     0xfff0000000000000 as libc::c_ulonglong,
     0x2aff00 as libc::c_int as u64_0,
     0x7ff0000000000000 as libc::c_longlong as u64_0,
     0x15fe00 as libc::c_int as u64_0,
     0x7707000000000000 as libc::c_longlong as u64_0,
     0x135f711 as libc::c_int as u64_0,
     0x7f700000000000 as libc::c_longlong as u64_0,
     0x17e311 as libc::c_int as u64_0,
     0x1077770000000000 as libc::c_longlong as u64_0,
     0x17b400 as libc::c_int as u64_0,
     0xff0000000000 as libc::c_longlong as u64_0,
     0x3cc420 as libc::c_int as u64_0,
     0x7ff000000000 as libc::c_longlong as u64_0,
     0x134344cc200 as libc::c_longlong as u64_0,
     0xfff00000000 as libc::c_longlong as u64_0,
     0x1dfdccced400 as libc::c_longlong as u64_0,
     0xff00000000 as libc::c_longlong as u64_0,
     0x3fffecbaa000 as libc::c_longlong as u64_0,
     0xff0000000 as libc::c_longlong as u64_0,
     0x3ff704100000 as libc::c_longlong as u64_0,
     0xff0000000 as libc::c_longlong as u64_0,
     0x1df700000000 as libc::c_longlong as u64_0,
     0x7ff000000 as libc::c_longlong as u64_0,
     0x1ac00000000 as libc::c_longlong as u64_0,
     0xb7ff00000 as libc::c_longlong as u64_0,
     0x1600000000 as libc::c_longlong as u64_0,
     0x5ffff0000 as libc::c_longlong as u64_0,
     0x39c000000 as libc::c_longlong as u64_0,
     0x7ffff70000 as libc::c_longlong as u64_0,
     0x14a000000 as libc::c_longlong as u64_0,
     0xaeffa770000 as libc::c_longlong as u64_0,
     0x16c75100 as libc::c_int as u64_0,
     0xdffb0000000 as libc::c_longlong as u64_0,
     0x16ffc400 as libc::c_int as u64_0,
     0xdfb90000000 as libc::c_longlong as u64_0,
     0x14fffa000 as libc::c_longlong as u64_0,
     0x3ea200000000 as libc::c_longlong as u64_0,
     0x3fff41000 as libc::c_longlong as u64_0,
     0x2e9100000000 as libc::c_longlong as u64_0,
     0x1bff420000 as libc::c_longlong as u64_0,
     0x12c9300000000 as libc::c_longlong as u64_0,
     0x3eec1200000 as libc::c_longlong as u64_0,
     0x12b9300000000 as libc::c_longlong as u64_0,
     0x27ca70000000 as libc::c_longlong as u64_0,
     0x10a9300000000 as libc::c_longlong as u64_0,
     0x5559310000000 as libc::c_longlong as u64_0,
     0x396100000000 as libc::c_longlong as u64_0,
     0x7563100000000 as libc::c_longlong as u64_0,
     0xb75200000000 as libc::c_longlong as u64_0,
     0x37740000000000 as libc::c_longlong as u64_0,
     0x3a9500000000 as libc::c_longlong as u64_0,
     0x26630000000000 as libc::c_longlong as u64_0,
     0x39db53000000 as libc::c_longlong as u64_0,
     0x4552000000000 as libc::c_longlong as u64_0,
     0x11369f7100000 as libc::c_longlong as u64_0,
     0x2354000000000 as libc::c_longlong as u64_0,
     0x37f730000 as libc::c_longlong as u64_0,
     0x156200000000 as libc::c_longlong as u64_0,
     0x16fffb000 as libc::c_longlong as u64_0,
     0x26710000000 as libc::c_longlong as u64_0,
     0x2ffff000 as libc::c_int as u64_0,
     0x3652000000 as libc::c_longlong as u64_0,
     0x4fff7000 as libc::c_int as u64_0,
     0x654000000 as libc::c_longlong as u64_0,
     0x79ef70000 as libc::c_longlong as u64_0,
     0x157500000 as libc::c_longlong as u64_0,
     0x77fb000000 as libc::c_longlong as u64_0,
     0x113900000 as libc::c_longlong as u64_0,
     0x5ab90000000 as libc::c_longlong as u64_0,
     0x13400000 as libc::c_int as u64_0,
     0x4ee700000000 as libc::c_longlong as u64_0,
     0x134200000 as libc::c_longlong as u64_0,
     0xbeec00000000 as libc::c_longlong as u64_0,
     0x230000000 as libc::c_longlong as u64_0,
     0x7b9c700000000 as libc::c_longlong as u64_0,
     0x2300000000 as libc::c_longlong as u64_0,
     0x7aa7ba70000000 as libc::c_longlong as u64_0,
     0x22100000000 as libc::c_longlong as u64_0,
     0xffc677f0000000 as libc::c_longlong as u64_0,
     0x21100000000 as libc::c_longlong as u64_0,
     0x7ff320af3000000 as libc::c_longlong as u64_0,
     0x30000000007 as libc::c_longlong as u64_0,
     0xfff00103aa200000 as libc::c_ulonglong,
     0x20000000077 as libc::c_longlong as u64_0,
     0xff00000059510000 as libc::c_ulonglong,
     0x1000000007f as libc::c_longlong as u64_0,
     0xf000000039750000 as libc::c_ulonglong,
     0x17cfff as libc::c_int as u64_0, 0x5a61000 as libc::c_int as u64_0,
     0x14eef7 as libc::c_int as u64_0, 0x3a95100 as libc::c_int as u64_0,
     0x14dfb as libc::c_int as u64_0, 0x3556100 as libc::c_int as u64_0,
     0x15aca as libc::c_int as u64_0, 0x12443200 as libc::c_int as u64_0,
     0x15ac7 as libc::c_int as u64_0, 0x12332100 as libc::c_int as u64_0,
     0x149aa as libc::c_int as u64_0, 0x12331000 as libc::c_int as u64_0,
     0x3677 as libc::c_int as u64_0, 0x12221000 as libc::c_int as u64_0,
     0x2467 as libc::c_int as u64_0, 0x111110000 as libc::c_longlong as u64_0,
     0x1367 as libc::c_int as u64_0,
     0x2000000011000000 as libc::c_longlong as u64_0,
     0x1357 as libc::c_int as u64_0,
     0x2000000000000000 as libc::c_longlong as u64_0,
     0x1256 as libc::c_int as u64_0,
     0x4100000000000000 as libc::c_longlong as u64_0,
     0x12256 as libc::c_int as u64_0,
     0x4100000000000000 as libc::c_longlong as u64_0,
     0x1134 as libc::c_int as u64_0,
     0x4100000000000000 as libc::c_longlong as u64_0,
     0x1115 as libc::c_int as u64_0,
     0x4100000000000000 as libc::c_longlong as u64_0,
     0x10013 as libc::c_int as u64_0,
     0x3100000000000000 as libc::c_longlong as u64_0,
     0x3 as libc::c_int as u64_0,
     0x3100000000000000 as libc::c_longlong as u64_0,
     0x2 as libc::c_int as u64_0,
     0x2100000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x2200000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x2210000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x1110000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x1100000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x1100000000000000 as libc::c_longlong as u64_0,
     0x10 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0];
static mut ovl_Boss_Ganon2_Vtx_00D758: [Vtx; 4] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [3000 as libc::c_int as libc::c_short,
                                -(30000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                5120 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [3000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(3000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(3000 as libc::c_int) as libc::c_short,
                                -(30000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                5120 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
static mut ovl_Boss_Ganon2_DL_00D798: [Gfx; 17] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 17];
static mut ovl_Boss_Ganon2_Tex_00D820: [u64_0; 256] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x100000000 as libc::c_longlong as u64_0,
     0x10201000001 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x1000000000000 as libc::c_longlong as u64_0,
     0x100000000 as libc::c_longlong as u64_0,
     0x20402000101 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x1010100000001 as libc::c_longlong as u64_0,
     0x100000000 as libc::c_longlong as u64_0,
     0x30703010102 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x101010200000002 as libc::c_longlong as u64_0,
     0x101000100000000 as libc::c_longlong as u64_0,
     0x1050904010103 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x102020200000104 as libc::c_longlong as u64_0,
     0x302010100000000 as libc::c_longlong as u64_0,
     0x1060c06010103 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x202020200000206 as libc::c_longlong as u64_0,
     0x504010100000000 as libc::c_longlong as u64_0,
     0x1080f07010103 as libc::c_longlong as u64_0,
     0x100000100000000 as libc::c_longlong as u64_0,
     0x303020200010408 as libc::c_longlong as u64_0,
     0x706020100000000 as libc::c_longlong as u64_0,
     0x1091108010103 as libc::c_longlong as u64_0,
     0x100000100000001 as libc::c_longlong as u64_0,
     0x40403030101050b as libc::c_longlong as u64_0,
     0xa08030100000000 as libc::c_longlong as u64_0,
     0x20b140a010103 as libc::c_longlong as u64_0,
     0x100000100010102 as libc::c_longlong as u64_0,
     0x60604030203070d as libc::c_longlong as u64_0,
     0xc0a040100000000 as libc::c_longlong as u64_0,
     0x30d170b020103 as libc::c_longlong as u64_0,
     0x101000100010205 as libc::c_longlong as u64_0,
     0x90805030205090e as libc::c_longlong as u64_0,
     0xe0d050100000000 as libc::c_longlong as u64_0,
     0x1050f180c020102 as libc::c_longlong as u64_0,
     0x101000100010408 as libc::c_longlong as u64_0,
     0xd0b050203070b0f as libc::c_longlong as u64_0,
     0xf0f060100000000 as libc::c_longlong as u64_0,
     0x20812190d030102 as libc::c_longlong as u64_0,
     0x100010001050b as libc::c_longlong as u64_0,
     0x130f070204080b0f as libc::c_longlong as u64_0,
     0x1011080100000000 as libc::c_longlong as u64_0,
     0x30c14190e040101 as libc::c_longlong as u64_0,
     0x100010001070f as libc::c_longlong as u64_0,
     0x19140a0305090b0e as libc::c_longlong as u64_0,
     0x10130a0200000001 as libc::c_longlong as u64_0,
     0x51217190e040100 as libc::c_longlong as u64_0,
     0x1010201020a13 as libc::c_longlong as u64_0,
     0x1f1a0f0606090a0c as libc::c_longlong as u64_0,
     0x10150b0301000001 as libc::c_longlong as u64_0,
     0x8181b190f050201 as libc::c_longlong as u64_0,
     0x102010202040d18 as libc::c_longlong as u64_0,
     0x2721140a080a0a0c as libc::c_longlong as u64_0,
     0x11160d0402020001 as libc::c_longlong as u64_0,
     0xb1e1e1910070403 as libc::c_longlong as u64_0,
     0x20302020408111d as libc::c_longlong as u64_0,
     0x2f2a1b0f0a0b0b0d as libc::c_longlong as u64_0,
     0x12180f0604040101 as libc::c_longlong as u64_0,
     0xe24211911090606 as libc::c_longlong as u64_0,
     0x4040304070c1623 as libc::c_longlong as u64_0,
     0x383222140e0d0e10 as libc::c_longlong as u64_0,
     0x141a110806060102 as libc::c_longlong as u64_0,
     0x112a241a120b0909 as libc::c_longlong as u64_0,
     0x60505070b111c29 as libc::c_longlong as u64_0,
     0x413b291b13101216 as libc::c_longlong as u64_0,
     0x181b120908080304 as libc::c_longlong as u64_0,
     0x152f271b140e0c0c as libc::c_longlong as u64_0,
     0x907080b10172230 as libc::c_longlong as u64_0,
     0x4a4332231813161d as libc::c_longlong as u64_0,
     0x1d1e140b0a0a0608 as libc::c_longlong as u64_0,
     0x1a342b1e17110f0f as libc::c_longlong as u64_0,
     0xc0b0d11171f2a38 as libc::c_longlong as u64_0,
     0x534c3b2b1e161c25 as libc::c_longlong as u64_0,
     0x2221160d0b0c0a0e as libc::c_longlong as u64_0,
     0x213930231b151211 as libc::c_longlong as u64_0,
     0xf0f12171e273240 as libc::c_longlong as u64_0,
     0x5c564534251b242f as libc::c_longlong as u64_0,
     0x2924190f0e0e0f17 as libc::c_longlong as u64_0,
     0x293e372b21181513 as libc::c_longlong as u64_0,
     0x1113181e26303b48 as libc::c_longlong as u64_0,
     0x655f4e3e2d222d3a as libc::c_longlong as u64_0,
     0x30271c1311111520 as libc::c_longlong as u64_0,
     0x32453f35281d1714 as libc::c_longlong as u64_0,
     0x14181e252f3a4551 as libc::c_longlong as u64_0,
     0x6f695746362b3744 as libc::c_longlong as u64_0,
     0x372a1f1715151d2a as libc::c_longlong as u64_0,
     0x3d4d483f31231a14 as libc::c_longlong as u64_0,
     0x171e252e38444f5b as libc::c_longlong as u64_0,
     0x7974614f4036404c as libc::c_longlong as u64_0,
     0x3c2d231d1a1a2637 as libc::c_longlong as u64_0,
     0x4957524a3a2a1d15 as libc::c_longlong as u64_0,
     0x1a252e3743505b66 as libc::c_longlong as u64_0,
     0x837f6c594a414750 as libc::c_ulonglong,
     0x3f2e272321213245 as libc::c_longlong as u64_0,
     0x57625d5443312216 as libc::c_longlong as u64_0,
     0x1f2d37414d5b6671 as libc::c_longlong as u64_0,
     0x8e8b7662544b4d51 as libc::c_ulonglong,
     0x3f302c2c2b2d4054 as libc::c_longlong as u64_0,
     0x656d675e4c3a281a as libc::c_longlong as u64_0,
     0x2536414b5867717b as libc::c_longlong as u64_0,
     0x9896816c5e545150 as libc::c_ulonglong,
     0x3f323337383c5063 as libc::c_longlong as u64_0,
     0x7177716856432f21 as libc::c_longlong as u64_0,
     0x2c3f4b5663727c86 as libc::c_longlong as u64_0,
     0xa2a08b76685d5651 as libc::c_ulonglong,
     0x3f343a43484d5f70 as libc::c_longlong as u64_0,
     0x7d827b715f4c3829 as libc::c_longlong as u64_0,
     0x344654626f7c8690 as libc::c_longlong as u64_0,
     0xaca9958172655b53 as libc::c_ulonglong,
     0x42394450585e6d7c as libc::c_longlong as u64_0,
     0x878c847968574334 as libc::c_ulonglong,
     0x3d4e5e6e7b88919a as libc::c_longlong as u64_0,
     0xb4b09e8c7c6e6155 as libc::c_ulonglong,
     0x46414f5f676e7b87 as libc::c_longlong as u64_0,
     0x92958c8071625041 as libc::c_ulonglong,
     0x4857697a86929ba3 as libc::c_longlong as u64_0,
     0xbbb7a79686776658 as libc::c_ulonglong,
     0x4d4b5c6e777d8791 as libc::c_longlong as u64_0,
     0x9c9f94877a6d5c4f as libc::c_ulonglong,
     0x54617486919ca4ab as libc::c_longlong as u64_0,
     0xc2bbafa1907f6c5d as libc::c_ulonglong,
     0x55576a7e8589929a as libc::c_longlong as u64_0,
     0xa5a99d908478695e as libc::c_ulonglong,
     0x5f697f939da6acb2 as libc::c_longlong as u64_0,
     0xc8bfb6ac9a877465 as libc::c_ulonglong,
     0x6064788d92949ba1 as libc::c_longlong as u64_0,
     0xadb2a89c8f83766c as libc::c_ulonglong,
     0x6a718aa1a9afb2b8 as libc::c_longlong as u64_0,
     0xcec3bdb6a4907e70 as libc::c_ulonglong,
     0x6c72879b9c9ca2a8 as libc::c_longlong as u64_0,
     0xb5bbb3a99b8e8279 as libc::c_ulonglong,
     0x737693aeb4b6b9be as libc::c_longlong as u64_0,
     0xd5c9c5bfaf9c8b7e as libc::c_ulonglong,
     0x7a8094a5a4a0a7b0 as libc::c_longlong as u64_0,
     0xbdc5c0b7a8998e85 as libc::c_ulonglong,
     0x7b7b9ab7bdbec0c5 as libc::c_longlong as u64_0,
     0xdbcfccc8baa9998e as libc::c_ulonglong,
     0x898e9fada8a1acb8 as libc::c_ulonglong,
     0xc6ceccc5b6a4988f as libc::c_ulonglong,
     0x8381a0bec4c6c8cd as libc::c_ulonglong,
     0xe0d4d3d1c5b7a89d as libc::c_ulonglong,
     0x989ca8b3aba2b0c0 as libc::c_ulonglong,
     0xced8d8d2c2aea298 as libc::c_ulonglong,
     0x8c89a6c3caced1d5 as libc::c_ulonglong,
     0xe5dbdad8d0c4b6ab as libc::c_ulonglong,
     0xa6a8b1b8aea4b5c7 as libc::c_ulonglong,
     0xd6e0e3decdb7aba2 as libc::c_ulonglong,
     0x9590acc9d0d5d9dc as libc::c_ulonglong,
     0xebe1e0dedad1c4b9 as libc::c_ulonglong,
     0xb2b2b8bcb1a7b9ce as libc::c_ulonglong,
     0xdee8ece8d6bdb3ac as libc::c_ulonglong,
     0x9e98b3ced6dbe0e3 as libc::c_ulonglong,
     0xf0e9e6e3e3ddd2c6 as libc::c_ulonglong,
     0xbcbabec0b4aabed5 as libc::c_ulonglong,
     0xe5eff3f0ddc2bbb6 as libc::c_ulonglong,
     0xa79fb9d4dce2e7e9 as libc::c_ulonglong,
     0xf5f0ece7eae8ded2 as libc::c_ulonglong,
     0xc6c1c2c3b7adc4dd as libc::c_ulonglong,
     0xebf3f8f5e1c6c2c1 as libc::c_ulonglong,
     0xb1a7bfd8e1e7edf0 as libc::c_ulonglong,
     0xf9f5f1ebf0f0e9dd as libc::c_ulonglong,
     0xcfc7c7c6bbb1cbe5 as libc::c_ulonglong,
     0xf0f5fbf7e3cacacc as libc::c_ulonglong,
     0xbbb0c5dce5ecf4f6 as libc::c_ulonglong,
     0xfcf9f5eef5f7f0e7 as libc::c_ulonglong,
     0xd7cdcccbbfb7d2eb as libc::c_ulonglong,
     0xf4f7fbf6e4cdd2d6 as libc::c_ulonglong,
     0xc6b9cbe0e9f1f9fb as libc::c_ulonglong,
     0xfdfcf8f2f9faf6ee as libc::c_ulonglong,
     0xdfd5d3d0c5bdd9f0 as libc::c_ulonglong,
     0xf7f9fbf4e5d0d9e0 as libc::c_ulonglong,
     0xd1c2d2e4edf5fcfe as libc::c_ulonglong,
     0xfefdfaf4fbfcf9f3 as libc::c_ulonglong,
     0xe6dddad7cbc3def4 as libc::c_ulonglong,
     0xfafbfcf3e5d3dee8 as libc::c_ulonglong,
     0xdbcddae9f2f8feff as libc::c_ulonglong,
     0xfefdfcf6fcfdfcf7 as libc::c_ulonglong,
     0xece4e2dfd2c9e3f7 as libc::c_ulonglong,
     0xfcfdfbf3e5d6e4ef as libc::c_ulonglong,
     0xe3d6e1eef6fafeff as libc::c_ulonglong,
     0xfefdfdf8fcfdfdfa as libc::c_ulonglong,
     0xf1eae9e7d9cfe7f9 as libc::c_ulonglong,
     0xfefefbf3e7dbe9f4 as libc::c_ulonglong,
     0xebdfe8f3f9fcffff as libc::c_ulonglong,
     0xfefdfdfafdfdfefc as libc::c_ulonglong,
     0xf5efefeee0d5ecfb as libc::c_ulonglong,
     0xfffefbf3e9e1eef8 as libc::c_ulonglong,
     0xf0e6eef6fcfdffff as libc::c_ulonglong,
     0xfefdfefcfefdfefe as libc::c_ulonglong,
     0xf8f4f4f3e7ddf1fd as libc::c_ulonglong,
     0xfffefbf3ece7f3fc as libc::c_ulonglong,
     0xf5ecf2f9fdfeffff as libc::c_ulonglong,
     0xfefdfffefffdfefe as libc::c_ulonglong,
     0xfaf7f8f7ede5f5fe as libc::c_ulonglong,
     0xfffefbf5f0edf7fd as libc::c_ulonglong,
     0xf9f1f5fafeffffff as libc::c_ulonglong,
     0xfefdfffffffefeff as libc::c_ulonglong,
     0xfcfafafaf2ecf8fe as libc::c_ulonglong,
     0xfffefcf7f4f3fafe as libc::c_ulonglong,
     0xfbf6f8fbfeffffff as libc::c_ulonglong,
     0xfefdfffffffefeff as libc::c_ulonglong,
     0xfdfcfcfcf7f2fbff as libc::c_ulonglong,
     0xfffefcfaf8f7fcff as libc::c_ulonglong,
     0xfefafbfcffffffff as libc::c_ulonglong,
     0xfefeffffffffffff as libc::c_ulonglong,
     0xfefdfefdfaf7fcff as libc::c_ulonglong,
     0xfffefdfcfcfbfdff as libc::c_ulonglong,
     0xfffdfdfdffffffff as libc::c_ulonglong,
     0xfffeffffffffffff as libc::c_ulonglong,
     0xfffefefefcfafdff as libc::c_ulonglong,
     0xfffefefefefdfeff as libc::c_ulonglong,
     0xfffffefdffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfffffffffdfcfeff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfffffffeffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfffffffffefeffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong];
static mut ovl_Boss_Ganon2_Tex_00ED48: [u64_0; 128] =
    [0 as libc::c_int as u64_0, 0xff as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffff as libc::c_int as u64_0,
     0xff00000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffff as libc::c_int as u64_0,
     0xff00000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffff as libc::c_int as u64_0,
     0xff00000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffff as libc::c_int as u64_0,
     0xff00000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffff as libc::c_int as u64_0,
     0xff00000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffff as libc::c_int as u64_0,
     0xff00000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffff as libc::c_int as u64_0,
     0xff00000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff00ffff as libc::c_longlong as u64_0,
     0xff00ffffff000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffffffffffff as libc::c_longlong as u64_0,
     0xffffffffffff0000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffffffffffff as libc::c_longlong as u64_0,
     0xffffffffffff0000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff0000ffff as libc::c_longlong as u64_0,
     0xff0000ffffff0000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffff as libc::c_int as u64_0,
     0xff00000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xffffff as libc::c_int as u64_0,
     0xffff000000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0];
// Initialized in run_static_initializers
static mut ovl_Boss_Ganon2_DL_00E1C0: [Gfx; 36] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 36];
static mut ovl_Boss_Ganon2_Tex_00BC98: [u64_0; 512] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x106 as libc::c_int as u64_0,
     0x701000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x935 as libc::c_int as u64_0,
     0x3d0b000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x11f93 as libc::c_int as u64_0, 0xa529030000000000 as libc::c_ulonglong,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0xd5bdb as libc::c_int as u64_0, 0xe373130100000000 as libc::c_ulonglong,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x42fb5f7 as libc::c_int as u64_0,
     0xfac8400700000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1147ae7fe as libc::c_longlong as u64_0,
     0xffee931c01000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x640c8faff as libc::c_longlong as u64_0,
     0xfffcd8540a000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x11c95efffff as libc::c_longlong as u64_0,
     0xfffff3a321020000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xa54dbfdffff as libc::c_longlong as u64_0,
     0xfffffedf600d0000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x221a0f3ffffff as libc::c_longlong as u64_0,
     0xfffffff6b52d0300 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xe60ddfdffffff as libc::c_longlong as u64_0,
     0xfffffffee7781501 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0,
     0x432b5f6ffffffff as libc::c_longlong as u64_0,
     0xfffffffffac94407 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x1884e9feffffffff as libc::c_longlong as u64_0,
     0xfffffffffff09c20 as libc::c_ulonglong,
     0x200000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x8 as libc::c_int as u64_0,
     0x48d0fbffffffffff as libc::c_longlong as u64_0,
     0xfffffffffffdde5d as libc::c_ulonglong,
     0xc00000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x11e as libc::c_int as u64_0, 0x9bf1ffffffffffff as libc::c_ulonglong,
     0xfffffffffffff5a9 as libc::c_ulonglong,
     0x2302000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0xb56 as libc::c_int as u64_0, 0xdbfdffffffffffff as libc::c_ulonglong,
     0xfffffffffffffee0 as libc::c_ulonglong,
     0x630f000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x225a8 as libc::c_int as u64_0, 0xf4ffffffffffffff as libc::c_ulonglong,
     0xfffffffffffffff8 as libc::c_ulonglong,
     0xbc34040000000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xf69e1 as libc::c_int as u64_0,
     0xfeffffffffffffff as libc::c_ulonglong,
     0xfffffffffffffffe as libc::c_ulonglong,
     0xea83170100000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x433bcf8 as libc::c_int as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfbcf470800000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x11985eafe as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfff19d2302000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0xa52d5fcff as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfffddf670e000000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x222a3edf8f9 as libc::c_longlong as u64_0,
     0xf9f9f9f9f9f9f9f9 as libc::c_ulonglong,
     0xf9f9f9f9f9f9f9f9 as libc::c_ulonglong,
     0xf9f9f0af26020000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x83da4bbbcbc as libc::c_longlong as u64_0,
     0xbcbcbcbcbcbcbcbc as libc::c_ulonglong,
     0xbcbcbcbcbcbcbcbc as libc::c_ulonglong,
     0xbcbcbba6450a0000 as libc::c_ulonglong, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1113e36262323 as libc::c_longlong as u64_0,
     0x2323232323232323 as libc::c_longlong as u64_0,
     0x2323232323232323 as libc::c_longlong as u64_0,
     0x2323253444180300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x8315c3a0b0101 as libc::c_longlong as u64_0,
     0x101010101010101 as libc::c_longlong as u64_0,
     0x101010101010101 as libc::c_longlong as u64_0,
     0x10109335e3b0b00 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x218526959200400 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2185269592104 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0,
     0xb3a656b66430e01 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0xb3a656b66430e as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x4 as libc::c_int as u64_0,
     0x225a6a69695e2c07 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x4225a6a69695e2b as libc::c_longlong as u64_0,
     0x600000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x110 as libc::c_int as u64_0,
     0x48676a6969695118 as libc::c_longlong as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x1148676a696a684d as libc::c_longlong as u64_0,
     0x1201000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x529 as libc::c_int as u64_0,
     0x606a6969696a6437 as libc::c_longlong as u64_0,
     0x900000000000000 as libc::c_longlong as u64_0,
     0x7 as libc::c_int as u64_0,
     0x2f616a6969696a62 as libc::c_longlong as u64_0,
     0x2f07000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x11149 as libc::c_int as u64_0,
     0x686a696969696953 as libc::c_longlong as u64_0,
     0x1802000000000000 as libc::c_longlong as u64_0,
     0x215 as libc::c_int as u64_0,
     0x5068696969696969 as libc::c_longlong as u64_0,
     0x5118020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x83161 as libc::c_int as u64_0,
     0x6a69696969696a65 as libc::c_longlong as u64_0,
     0x3b0c010000000000 as libc::c_longlong as u64_0,
     0x933 as libc::c_int as u64_0,
     0x626a69696969696a as libc::c_longlong as u64_0,
     0x653b0c0100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x31b5569 as libc::c_int as u64_0,
     0x696969696969696a as libc::c_longlong as u64_0,
     0x5b25050000000000 as libc::c_longlong as u64_0,
     0x31b54 as libc::c_int as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6a5b250500000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10c3f666a as libc::c_longlong as u64_0,
     0x696969696969696a as libc::c_longlong as u64_0,
     0x6748100100000000 as libc::c_longlong as u64_0,
     0x10c3f66 as libc::c_int as u64_0,
     0x6a69696969696969 as libc::c_longlong as u64_0,
     0x6a67481001000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x5245b6a69 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6a602e0700000000 as libc::c_longlong as u64_0,
     0x5245b6a as libc::c_int as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696a602d07000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x11149686a69 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6969511903000000 as libc::c_longlong as u64_0,
     0x21349686a as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696a684d14020000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x72d616a6969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696a653b0a000000 as libc::c_longlong as u64_0,
     0x834626a69 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x69696a6334080000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2144c686a6969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x69696a561b030000 as libc::c_longlong as u64_0,
     0x21854696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x69696969541a0300 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x933626a696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x69696a653d0c0100 as libc::c_longlong as u64_0,
     0x935646a6969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6969696a653d0c01 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x31d546969696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6969696a5c250500 as libc::c_longlong as u64_0,
     0x31d5569696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696969696a5c2505 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0xe42676a69696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x6969696a684a1302 as libc::c_longlong as u64_0,
     0x10e42676a696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696969696a684b13 as libc::c_longlong as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0x6 as libc::c_int as u64_0,
     0x285e6a6969696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x696969696a623308 as libc::c_longlong as u64_0,
     0x6285e6a69696969 as libc::c_longlong as u64_0,
     0x6969696969696969 as libc::c_longlong as u64_0,
     0x69696969696a6231 as libc::c_longlong as u64_0,
     0x800000000000000 as libc::c_longlong as u64_0,
     0x212 as libc::c_int as u64_0,
     0x4c696b6a6a6a6a6a as libc::c_longlong as u64_0,
     0x6a6a6a6a6a6a6a6a as libc::c_longlong as u64_0,
     0x6a6a6a6a6a6a551a as libc::c_longlong as u64_0,
     0x154c696b6a6a6a6a as libc::c_longlong as u64_0,
     0x6a6a6a6a6a6a6a6a as libc::c_longlong as u64_0,
     0x6a6a6a6a6a6a6a50 as libc::c_longlong as u64_0,
     0x1502000000000000 as libc::c_longlong as u64_0,
     0x527 as libc::c_int as u64_0,
     0x5862626161616161 as libc::c_longlong as u64_0,
     0x6161616161616161 as libc::c_longlong as u64_0,
     0x6161616161625d39 as libc::c_longlong as u64_0,
     0x3359626261616161 as libc::c_longlong as u64_0,
     0x6161616161616161 as libc::c_longlong as u64_0,
     0x616161616161625b as libc::c_longlong as u64_0,
     0x2d07000000000000 as libc::c_longlong as u64_0,
     0x419 as libc::c_int as u64_0,
     0x292a2a2a2a2a2a2a as libc::c_longlong as u64_0,
     0x2a2a2a2a2a2a2a2a as libc::c_longlong as u64_0,
     0x2a2a2a2a2a2a2a23 as libc::c_longlong as u64_0,
     0x22292a2a2a2a2a2a as libc::c_longlong as u64_0,
     0x2a2a2a2a2a2a2a2a as libc::c_longlong as u64_0,
     0x2a2a2a2a2a2a2a29 as libc::c_longlong as u64_0,
     0x1c05000000000000 as libc::c_longlong as u64_0,
     0x104 as libc::c_int as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x505050505050505 as libc::c_longlong as u64_0,
     0x401000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0];
static mut ovl_Boss_Ganon2_Vtx_00CC98: [Vtx; 4] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(5 as libc::c_int) as libc::c_short,
                                -(5 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [5 as libc::c_int as libc::c_short,
                                -(5 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [5 as libc::c_int as libc::c_short,
                                5 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(5 as libc::c_int) as libc::c_short,
                                5 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
static mut ovl_Boss_Ganon2_DL_00CCD8: [Gfx; 16] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 16];
static mut ovl_Boss_Ganon2_Tex_00E2E0: [u64_0; 256] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x101000000 as libc::c_longlong as u64_0,
     0x10202010000 as libc::c_longlong as u64_0,
     0x101010202 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x20202000000 as libc::c_longlong as u64_0,
     0x101020507050200 as libc::c_longlong as u64_0,
     0x101010304 as libc::c_longlong as u64_0,
     0x201000000000000 as libc::c_longlong as u64_0,
     0x30504010001 as libc::c_longlong as u64_0,
     0x50303070a090401 as libc::c_longlong as u64_0,
     0x10101020206 as libc::c_longlong as u64_0,
     0x503020000000000 as libc::c_longlong as u64_0,
     0x101040808030003 as libc::c_longlong as u64_0,
     0x808060709090602 as libc::c_longlong as u64_0,
     0x100000101010104 as libc::c_longlong as u64_0,
     0x506060302010002 as libc::c_longlong as u64_0,
     0x505060a0c080404 as libc::c_longlong as u64_0,
     0x709070706050709 as libc::c_longlong as u64_0,
     0x701000001010101 as libc::c_longlong as u64_0,
     0x5080b0a06020205 as libc::c_longlong as u64_0,
     0x90a0a0c0f0e0a05 as libc::c_longlong as u64_0,
     0x508090505040810 as libc::c_longlong as u64_0,
     0x1006000000010102 as libc::c_longlong as u64_0,
     0x50a11130e080608 as libc::c_longlong as u64_0,
     0xa0c0d101514120d as libc::c_longlong as u64_0,
     0xe0c0d0b09080b15 as libc::c_longlong as u64_0,
     0x190f040201000308 as libc::c_longlong as u64_0,
     0xa0f161a180f0a0a as libc::c_longlong as u64_0,
     0xa0b0b12191b2a20 as libc::c_longlong as u64_0,
     0x221b1f1b1815141c as libc::c_longlong as u64_0,
     0x2217080603030611 as libc::c_longlong as u64_0,
     0x1a1f201e1c140e0e as libc::c_longlong as u64_0,
     0xd0e0f11181d2f3d as libc::c_longlong as u64_0,
     0x3f3335322c261f24 as libc::c_longlong as u64_0,
     0x2e230f0d0a090e18 as libc::c_longlong as u64_0,
     0x242e2d241b141010 as libc::c_longlong as u64_0,
     0x111618131618274a as libc::c_longlong as u64_0,
     0x4e46494842383030 as libc::c_longlong as u64_0,
     0x3931171216151f24 as libc::c_longlong as u64_0,
     0x2331362a1b111013 as libc::c_longlong as u64_0,
     0x191d201c1e273145 as libc::c_longlong as u64_0,
     0x4f51565b584c4140 as libc::c_longlong as u64_0,
     0x4a3f1c141e202d32 as libc::c_longlong as u64_0,
     0x242b363122140f14 as libc::c_longlong as u64_0,
     0x1d23221d273c4a4e as libc::c_longlong as u64_0,
     0x675f636d70645452 as libc::c_longlong as u64_0,
     0x564c26162d363842 as libc::c_longlong as u64_0,
     0x38333f3f35241817 as libc::c_longlong as u64_0,
     0x242c2a252f4f656c as libc::c_longlong as u64_0,
     0x948a7e81887d6a63 as libc::c_ulonglong,
     0x60583b2f4454575f as libc::c_longlong as u64_0,
     0x5b555c5e56493e34 as libc::c_longlong as u64_0,
     0x3941464449627089 as libc::c_longlong as u64_0,
     0xbbbaa89b9b917a70 as libc::c_ulonglong,
     0x67595152677a8184 as libc::c_longlong as u64_0,
     0x857f7a7c756d6a63 as libc::c_ulonglong,
     0x5c5d626e767f8795 as libc::c_longlong as u64_0,
     0xc4d1cabbb5a68c82 as libc::c_ulonglong,
     0x7d706b768b969da7 as libc::c_longlong as u64_0,
     0xaea69592928c8b8a as libc::c_ulonglong,
     0x857d8094a5aaa8a5 as libc::c_ulonglong,
     0xc4cec9c7c2b69e94 as libc::c_ulonglong,
     0x948f89919ea4a9b7 as libc::c_ulonglong,
     0xbebdafa2a2a49f9a as libc::c_ulonglong,
     0x99959bb7c9cecac4 as libc::c_ulonglong,
     0xd7cdc8c8cbc8b6ab as libc::c_ulonglong,
     0xaaaaa7a0a0a2acbd as libc::c_ulonglong,
     0xc6ccc9bdb4bab6a8 as libc::c_ulonglong,
     0xa3a3aecfe3e4e0de as libc::c_ulonglong,
     0xe6dbd4ced0d0c6ba as libc::c_ulonglong,
     0xb6b6b3a79fa7b4c7 as libc::c_ulonglong,
     0xd5d7d8d3c9c9cdbf as libc::c_ulonglong,
     0xb1b2bed9f2ece3e5 as libc::c_ulonglong,
     0xeceae1dadbddd7cb as libc::c_ulonglong,
     0xc2bfbcb4adb4c4d7 as libc::c_ulonglong,
     0xe4e7e4ddd6d6e0dc as libc::c_ulonglong,
     0xc7babfd4e9e8dfe2 as libc::c_ulonglong,
     0xf0f4ede8e6e7e7dd as libc::c_ulonglong,
     0xcfc9cac9c8cedcea as libc::c_ulonglong,
     0xf3f6f1e7e0dee3e7 as libc::c_ulonglong,
     0xdac2c3d6e4e8e3e5 as libc::c_ulonglong,
     0xf7fbf8f1eceaefeb as libc::c_ulonglong,
     0xdfdcdde0e2e4e7ef as libc::c_ulonglong,
     0xf7fcfaf4efe9e5e7 as libc::c_ulonglong,
     0xe2cdc8d7e5e9eaee as libc::c_ulonglong,
     0xfdfefcf7f1ebedf0 as libc::c_ulonglong,
     0xe9e8edf1f3f0eef0 as libc::c_ulonglong,
     0xf5fbfbf8f7f3e9e2 as libc::c_ulonglong,
     0xddd6d3e1ebebebf4 as libc::c_ulonglong,
     0xfcfefefcf6f0f1f4 as libc::c_ulonglong,
     0xedeaf3fafcf5ebea as libc::c_ulonglong,
     0xf0f8f8f6f7f6eee6 as libc::c_ulonglong,
     0xe2e0e4edede9e1ee as libc::c_ulonglong,
     0xfafffdfdfaf7f7f7 as libc::c_ulonglong,
     0xf2eff6fbfbf2e1df as libc::c_ulonglong,
     0xeef8f6f2f4f6f2ee as libc::c_ulonglong,
     0xeae7ecf2eee6e0e5 as libc::c_ulonglong,
     0xf6fcfcfdfdfcfcf9 as libc::c_ulonglong,
     0xf2f0f5fafaf3ded8 as libc::c_ulonglong,
     0xe8f7f7f3f4f8f7f6 as libc::c_ulonglong,
     0xf2eeeef0ece5e2e5 as libc::c_ulonglong,
     0xf8fbf5f7fafbfaf5 as libc::c_ulonglong,
     0xebe7f4fcfaf6e8dd as libc::c_ulonglong,
     0xe8f8fcf8f8f9fafa as libc::c_ulonglong,
     0xf9f4eee9e4dfe0e9 as libc::c_ulonglong,
     0xf9faf1eef2f5f7f5 as libc::c_ulonglong,
     0xebe1edfbfbfaf5ef as libc::c_ulonglong,
     0xf4fcfefdfbf8f8fb as libc::c_ulonglong,
     0xfbf7f2eae4dcd8e5 as libc::c_ulonglong,
     0xf6fbf0eaeceff3f2 as libc::c_ulonglong,
     0xede5eaf9fdfcfdfc as libc::c_ulonglong,
     0xfcfdfdfcf9f5f7fa as libc::c_ulonglong,
     0xfcf9f6f2ebe0d6e1 as libc::c_ulonglong,
     0xedf9f5eeedeef0f0 as libc::c_ulonglong,
     0xeeebeffafefefffc as libc::c_ulonglong,
     0xf9f6f8fbfaf7f6fa as libc::c_ulonglong,
     0xfdfdfbfaf7e8dcdb as libc::c_ulonglong,
     0xecf7f9f4f3f1f0ef as libc::c_ulonglong,
     0xececf3fcfefefef9 as libc::c_ulonglong,
     0xf1edeef7fbfaf9fc as libc::c_ulonglong,
     0xfefefdfcfbf3dfe0 as libc::c_ulonglong,
     0xf0f5fbfaf7f3f3f4 as libc::c_ulonglong,
     0xf1eff2f8fafcfefa as libc::c_ulonglong,
     0xf1eae7f0fafefdfe as libc::c_ulonglong,
     0xfffefefdfdfbe7e9 as libc::c_ulonglong,
     0xf6fbfdfbf8f3f2f7 as libc::c_ulonglong,
     0xf9f4eff0f3f6fbfb as libc::c_ulonglong,
     0xf5eeedf0faffffff as libc::c_ulonglong,
     0xfefdfdfefefdf7f0 as libc::c_ulonglong,
     0xf9fdfcfaf5eceaf4 as libc::c_ulonglong,
     0xfcf8ece8ebeff7fc as libc::c_ulonglong,
     0xf8f6f7f6f9fcfefd as libc::c_ulonglong,
     0xfbfaf8fbfefffef7 as libc::c_ulonglong,
     0xf3fafcf7efe4e1ea as libc::c_ulonglong,
     0xf7f8ebe1e4eaedf5 as libc::c_ulonglong,
     0xf6f3f7f8f7f9faf9 as libc::c_ulonglong,
     0xf5f3f1f0f4fbfffa as libc::c_ulonglong,
     0xeceef6f4ece1dbe1 as libc::c_ulonglong,
     0xeff5ede0e0e2e0e6 as libc::c_ulonglong,
     0xedebeff2f3f6f6f5 as libc::c_ulonglong,
     0xeeecede6e2eefefa as libc::c_ulonglong,
     0xeae3e6e6e5e2dedf as libc::c_ulonglong,
     0xe7ede7dddbddd8da as libc::c_ulonglong,
     0xe5e6e8edeef2f4ef as libc::c_ulonglong,
     0xe3d9dfe4dde2f7fb as libc::c_ulonglong,
     0xf2e5d8d2d4dde3db as libc::c_ulonglong,
     0xd7dcdcd4cfd1d5dc as libc::c_ulonglong,
     0xe6e7e8e8e5e9ebe3 as libc::c_ulonglong,
     0xd1c5cee0e2e2f3fd as libc::c_ulonglong,
     0xf8ead6c2c1cddcd7 as libc::c_ulonglong,
     0xc5bfc4c1b7b9cce7 as libc::c_ulonglong,
     0xf0ede2ddd8d4d7ca as libc::c_ulonglong,
     0xb4afbfd6e4ebf2fc as libc::c_ulonglong,
     0xeeead8c2babecccf as libc::c_ulonglong,
     0xb9a1a3aaa6a2b0db as libc::c_ulonglong,
     0xf0e9d8cec6bfbdae as libc::c_ulonglong,
     0x9292accce0e4e3eb as libc::c_ulonglong,
     0xcfd5cfbfb3aeb1b6 as libc::c_ulonglong,
     0xa68d8a959a99a1c2 as libc::c_ulonglong,
     0xe3dbc6bab4aca292 as libc::c_ulonglong,
     0x757299c0d7d8cbc6 as libc::c_longlong as u64_0,
     0xa5b3bab0a59a9293 as libc::c_ulonglong,
     0x8c7a757e889198ae as libc::c_ulonglong,
     0xcacab7a7a09c9480 as libc::c_ulonglong,
     0x63597696aec0bea8 as libc::c_longlong as u64_0,
     0x8c959f9789807772 as libc::c_ulonglong,
     0x6752536b79808896 as libc::c_longlong as u64_0,
     0xaeb8a894827e796b as libc::c_ulonglong,
     0x59556374849eb6a5 as libc::c_longlong as u64_0,
     0x918f8d7b6a676a66 as libc::c_ulonglong,
     0x533634536a6d6e76 as libc::c_longlong as u64_0,
     0x8a9d9e9073625d58 as libc::c_ulonglong,
     0x5157605f5e749ca7 as libc::c_longlong as u64_0,
     0x968981634e506064 as libc::c_ulonglong,
     0x4a2a1e36565d5b5f as libc::c_longlong as u64_0,
     0x697d8d8c714e4240 as libc::c_longlong as u64_0,
     0x44525e595161869c as libc::c_longlong as u64_0,
     0x81776d543d3a4d5a as libc::c_ulonglong,
     0x46281b22363e424a as libc::c_longlong as u64_0,
     0x545d6e7b714f3630 as libc::c_longlong as u64_0,
     0x313e4e4c44537384 as libc::c_longlong as u64_0,
     0x625b4e3e2e293646 as libc::c_longlong as u64_0,
     0x37201c201e1d1f2d as libc::c_longlong as u64_0,
     0x3e454a595f4d2d20 as libc::c_longlong as u64_0,
     0x2229363e3b4a6a70 as libc::c_longlong as u64_0,
     0x453c3329211f2835 as libc::c_longlong as u64_0,
     0x2a1a1b201307050f as libc::c_longlong as u64_0,
     0x242c293343442c18 as libc::c_longlong as u64_0,
     0x15151c2a3140655c as libc::c_longlong as u64_0,
     0x251b1f1b15161f27 as libc::c_longlong as u64_0,
     0x261d1c2015040005 as libc::c_longlong as u64_0,
     0x141e151626312716 as libc::c_longlong as u64_0,
     0xe0c0d1928385556 as libc::c_longlong as u64_0,
     0x170d15110a0b141e as libc::c_longlong as u64_0,
     0x2222201f170b0403 as libc::c_longlong as u64_0,
     0xd190f0b151f1b10 as libc::c_longlong as u64_0,
     0xb08050c17264546 as libc::c_longlong as u64_0,
     0x130c140c03030c12 as libc::c_longlong as u64_0,
     0x13181f1c16100a07 as libc::c_longlong as u64_0,
     0x90e0f0911160f08 as libc::c_longlong as u64_0,
     0xc0f0a090f1b2e32 as libc::c_longlong as u64_0,
     0x12171d110301070d as libc::c_longlong as u64_0,
     0xb0d1414110f110f as libc::c_longlong as u64_0,
     0xa07070a11150b04 as libc::c_longlong as u64_0,
     0xc15130f0e0e1b23 as libc::c_longlong as u64_0,
     0x101721130401050c as libc::c_longlong as u64_0,
     0xe09090b09090e13 as libc::c_longlong as u64_0,
     0x100905050d120c04 as libc::c_longlong as u64_0,
     0x71419110c0a1016 as libc::c_longlong as u64_0,
     0x910181105020308 as libc::c_longlong as u64_0,
     0xd0906060504060c as libc::c_longlong as u64_0,
     0x110f0903060b0804 as libc::c_longlong as u64_0,
     0x30a100d0a090b0c as libc::c_longlong as u64_0,
     0x5060a0601010204 as libc::c_longlong as u64_0,
     0x708040302010307 as libc::c_longlong as u64_0,
     0xa0d0b0402020302 as libc::c_longlong as u64_0,
     0x203060604040708 as libc::c_longlong as u64_0,
     0x202020000000201 as libc::c_longlong as u64_0,
     0x203020000000102 as libc::c_longlong as u64_0,
     0x506070401000001 as libc::c_longlong as u64_0,
     0x102020100010406 as libc::c_longlong as u64_0,
     0x100020100000000 as libc::c_longlong as u64_0,
     0x1 as libc::c_int as u64_0,
     0x202020201000000 as libc::c_longlong as u64_0,
     0x10100000102 as libc::c_longlong as u64_0,
     0x10000000000 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0x10000000001 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0];
static mut ovl_Boss_Ganon2_Vtx_00EAE0: [Vtx; 22] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [159 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(255 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [819 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [437 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                -(370 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [717 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [257 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(97 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [614 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [540 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(315 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [167 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                -(599 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [922 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(159 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(255 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1229 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(167 as libc::c_int) as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                -(599 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1126 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(257 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                -(97 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1434 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(437 as libc::c_int) as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                -(370 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1331 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(257 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                97 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1638 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(540 as libc::c_int) as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1536 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(159 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                255 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1843 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(437 as libc::c_int) as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                370 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1741 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                315 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(167 as libc::c_int) as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                599 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1946 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [159 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                255 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [205 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [167 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                599 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [102 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                315 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [167 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                599 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2150 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [257 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                97 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [410 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [437 as libc::c_int as libc::c_short,
                                3000 as libc::c_int as libc::c_short,
                                370 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [307 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
static mut ovl_Boss_Ganon2_DL_00EC40: [Gfx; 33] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 33];
static mut ovl_Boss_Ganon2_Tex_00A2C8: [u64_0; 512] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1000000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2010000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103040200 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0x100000104 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x104070401 as libc::c_longlong as u64_0,
     0x100010101 as libc::c_longlong as u64_0,
     0x1010201000105 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10204080703 as libc::c_longlong as u64_0,
     0x101010101030303 as libc::c_longlong as u64_0,
     0x303030401010305 as libc::c_longlong as u64_0,
     0x100010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10305080a06 as libc::c_longlong as u64_0,
     0x303030303040404 as libc::c_longlong as u64_0,
     0x404040503020604 as libc::c_longlong as u64_0,
     0x101010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10405080c0b as libc::c_longlong as u64_0,
     0x604040405060606 as libc::c_longlong as u64_0,
     0x506070705060904 as libc::c_longlong as u64_0,
     0x202020000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x101 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x20407090e11 as libc::c_longlong as u64_0,
     0xa06060708080908 as libc::c_longlong as u64_0,
     0x8080a09060a0c05 as libc::c_longlong as u64_0,
     0x405030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10407 as libc::c_int as u64_0,
     0x704020000010101 as libc::c_longlong as u64_0,
     0x101030407090e13 as libc::c_longlong as u64_0,
     0x100a08090b0c0d0b as libc::c_longlong as u64_0,
     0xb0c0d0c0a100d07 as libc::c_longlong as u64_0,
     0x707040100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1060c as libc::c_int as u64_0,
     0xf0e0a0401010303 as libc::c_longlong as u64_0,
     0x4030405080c0f15 as libc::c_longlong as u64_0,
     0x17110d0d0f101110 as libc::c_longlong as u64_0,
     0xf11120f0e150c09 as libc::c_longlong as u64_0,
     0xa08040301010000 as libc::c_longlong as u64_0,
     0x101010201010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1040b as libc::c_int as u64_0,
     0x1317160f09040404 as libc::c_longlong as u64_0,
     0x5050607090c1016 as libc::c_longlong as u64_0,
     0x1d19141214171816 as libc::c_longlong as u64_0,
     0x1517191515190f0d as libc::c_longlong as u64_0,
     0xc08050403030201 as libc::c_longlong as u64_0,
     0x204040401000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x106 as libc::c_int as u64_0,
     0x101a201e170d0805 as libc::c_longlong as u64_0,
     0x708090a0c0e1318 as libc::c_longlong as u64_0,
     0x22241c1a1a1e1f1d as libc::c_longlong as u64_0,
     0x1c1e201b201b1513 as libc::c_longlong as u64_0,
     0xf0b080605050505 as libc::c_longlong as u64_0,
     0x607070401000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2 as libc::c_int as u64_0,
     0x8121e27281f140a as libc::c_longlong as u64_0,
     0x8090b0c0e11171d as libc::c_longlong as u64_0,
     0x2630282324282927 as libc::c_longlong as u64_0,
     0x26292a2632211c1a as libc::c_longlong as u64_0,
     0x130e0b0807070809 as libc::c_longlong as u64_0,
     0xa0a060200010203 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x208121f2c2f281b as libc::c_longlong as u64_0,
     0x100d0f1112151a22 as libc::c_longlong as u64_0,
     0x2b38393030333635 as libc::c_longlong as u64_0,
     0x343836333d2a261f as libc::c_longlong as u64_0,
     0x19130f0d0c0c0e0f as libc::c_longlong as u64_0,
     0xc08040203040606 as libc::c_longlong as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x2070f1d2d3734 as libc::c_longlong as u64_0,
     0x27181316191c2028 as libc::c_longlong as u64_0,
     0x33404c413e424646 as libc::c_longlong as u64_0,
     0x4548444340353126 as libc::c_longlong as u64_0,
     0x1f19151312141411 as libc::c_longlong as u64_0,
     0xa0605070a0a0804 as libc::c_longlong as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103060e1c3140 as libc::c_longlong as u64_0,
     0x4133221c1f25282f as libc::c_longlong as u64_0,
     0x3a495a585154595a as libc::c_longlong as u64_0,
     0x595c575d4c433a2e as libc::c_longlong as u64_0,
     0x26211d1d1d1d160e as libc::c_longlong as u64_0,
     0xa0a0c0e0d090502 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10304070d1b2e as libc::c_longlong as u64_0,
     0x445047332a2e343a as libc::c_longlong as u64_0,
     0x455568756b6b7172 as libc::c_longlong as u64_0,
     0x72746d705e55473b as libc::c_longlong as u64_0,
     0x312c2a2b281f1510 as libc::c_longlong as u64_0,
     0x1114130e09050200 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x102030407090e19 as libc::c_longlong as u64_0,
     0x2f4c615d4a3e4149 as libc::c_longlong as u64_0,
     0x5362778e89868c90 as libc::c_longlong as u64_0,
     0x8f91888175665649 as libc::c_ulonglong,
     0x413d3c372b1f1a1c as libc::c_longlong as u64_0,
     0x1d18110a06030100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103040507090c11 as libc::c_longlong as u64_0,
     0x1b2f51737865575b as libc::c_longlong as u64_0,
     0x667489a1aba6abb0 as libc::c_longlong as u64_0,
     0xafb0a99b8f7b695c as libc::c_ulonglong,
     0x57544b3a2e2b2b26 as libc::c_longlong as u64_0,
     0x1c120a0603010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030505080b0e12 as libc::c_longlong as u64_0,
     0x1720335680948a79 as libc::c_longlong as u64_0,
     0x7c8b9eb7cccacfd5 as libc::c_longlong as u64_0,
     0xd3d1ccbba8928278 as libc::c_ulonglong,
     0x72655145423d3020 as libc::c_longlong as u64_0,
     0x140d070401000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2040506080c1014 as libc::c_longlong as u64_0,
     0x19202b3c5d8cb3b0 as libc::c_longlong as u64_0,
     0xa2a6b8d0e9eef1f6 as libc::c_ulonglong,
     0xf5f4f2dfc5b0a398 as libc::c_ulonglong,
     0x856f625d4d382619 as libc::c_ulonglong,
     0x100a060301000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x101 as libc::c_int as u64_0,
     0x3040708090c1117 as libc::c_longlong as u64_0,
     0x1d242f3c4d6b9aca as libc::c_longlong as u64_0,
     0xdbcfd8e9fafdfeff as libc::c_ulonglong,
     0xfefefef6e3d4c7b0 as libc::c_ulonglong,
     0x9888775e422e2015 as libc::c_ulonglong,
     0xf09050301010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010304 as libc::c_int as u64_0,
     0x50608090c0f1319 as libc::c_longlong as u64_0,
     0x20293442526783ae as libc::c_longlong as u64_0,
     0xe0f5fafcffffffff as libc::c_ulonglong,
     0xfffffffffbf5e1ca as libc::c_ulonglong,
     0xb3926f523a2a1e15 as libc::c_ulonglong,
     0xf0a060403010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103040507 as libc::c_longlong as u64_0,
     0x8080b0c0f12161c as libc::c_longlong as u64_0,
     0x232d3a485b708aa8 as libc::c_longlong as u64_0,
     0xd0f7ffffffffffff as libc::c_ulonglong,
     0xfffffffffffff7d9 as libc::c_ulonglong,
     0xaf88684f3c2c2118 as libc::c_ulonglong,
     0x110c080504010100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103040708 as libc::c_longlong as u64_0,
     0xa0b0d1014181d24 as libc::c_longlong as u64_0,
     0x2c364250647a95b3 as libc::c_longlong as u64_0,
     0xd5f6feffffffffff as libc::c_ulonglong,
     0xfffffffffffff7d2 as libc::c_ulonglong,
     0xa9886c554131251c as libc::c_ulonglong,
     0x15100c0907050403 as libc::c_longlong as u64_0,
     0x101000000000000 as libc::c_longlong as u64_0,
     0x103040608 as libc::c_longlong as u64_0,
     0xa0c0f12161b222a as libc::c_longlong as u64_0,
     0x33404e5f7389a3c1 as libc::c_longlong as u64_0,
     0xe3fbffffffffffff as libc::c_ulonglong,
     0xfffffffffffff8d8 as libc::c_ulonglong,
     0xb49377604c3c3027 as libc::c_ulonglong,
     0x1e18130f0c0a0806 as libc::c_longlong as u64_0,
     0x403020100000000 as libc::c_longlong as u64_0,
     0x1030405 as libc::c_int as u64_0,
     0x8090d1014192029 as libc::c_longlong as u64_0,
     0x334050647a94b3d3 as libc::c_longlong as u64_0,
     0xf3feffffffffffff as libc::c_ulonglong,
     0xfffffffffffffce8 as libc::c_ulonglong,
     0xc7a88b725c4a3b2f as libc::c_ulonglong,
     0x241c15100c090705 as libc::c_longlong as u64_0,
     0x301010000000000 as libc::c_longlong as u64_0,
     0x102030405 as libc::c_longlong as u64_0,
     0x80a0d1014191f28 as libc::c_longlong as u64_0,
     0x323e4e617892b1d2 as libc::c_longlong as u64_0,
     0xf2feffffffffffff as libc::c_ulonglong,
     0xfffffffffffffce8 as libc::c_ulonglong,
     0xc5a2846952403125 as libc::c_ulonglong,
     0x1b140e0a07040302 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x1030407080a as libc::c_longlong as u64_0,
     0xe1014171c222931 as libc::c_longlong as u64_0,
     0x3c49596c819ab6d5 as libc::c_longlong as u64_0,
     0xf2feffffffffffff as libc::c_ulonglong,
     0xfffffffffffffde8 as libc::c_ulonglong,
     0xc6a4866b55423327 as libc::c_ulonglong,
     0x1c150e0b08050301 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x20506080a0c as libc::c_longlong as u64_0,
     0xf1214171a1f242b as libc::c_longlong as u64_0,
     0x333d4a5a6d85a1c1 as libc::c_longlong as u64_0,
     0xe3fbffffffffffff as libc::c_ulonglong,
     0xfffffffffffff6d8 as libc::c_ulonglong,
     0xb5967c6451403227 as libc::c_ulonglong,
     0x1d16100c09060403 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x10304050708 as libc::c_longlong as u64_0,
     0x90b0c0e11141921 as libc::c_longlong as u64_0,
     0x28323e4e627a96b7 as libc::c_longlong as u64_0,
     0xdefbffffffffffff as libc::c_ulonglong,
     0xfffffffffffdedca as libc::c_ulonglong,
     0xa6876d5643352920 as libc::c_ulonglong,
     0x19130e0b08050403 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x101030304 as libc::c_longlong as u64_0,
     0x507080a0c10151b as libc::c_longlong as u64_0,
     0x222d3a495d7798bf as libc::c_longlong as u64_0,
     0xe4fbffffffffffff as libc::c_ulonglong,
     0xfffffffffffceac1 as libc::c_ulonglong,
     0x9a7d644e3b2d2119 as libc::c_ulonglong,
     0x120d090605040201 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10102 as libc::c_int as u64_0,
     0x30507080b0e1319 as libc::c_longlong as u64_0,
     0x202b384a6180a3c0 as libc::c_longlong as u64_0,
     0xd4eaf7fcffffffff as libc::c_ulonglong,
     0xfffffffffbf9efd2 as libc::c_ulonglong,
     0x9e755a4635281d15 as libc::c_ulonglong,
     0xf0a060403020000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x30407080a0c1118 as libc::c_longlong as u64_0,
     0x212d3c526e8694a7 as libc::c_longlong as u64_0,
     0xc4d5dae8fafffffe as libc::c_ulonglong,
     0xfffdfef8e3d0c8d5 as libc::c_ulonglong,
     0xbe87593f2f231a13 as libc::c_ulonglong,
     0xd09050301010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x20405070a0d131b as libc::c_longlong as u64_0,
     0x2635485b666d7e9a as libc::c_longlong as u64_0,
     0xabadb7cdeef7f7f6 as libc::c_ulonglong,
     0xf7f1eee3c7b09ea1 as libc::c_ulonglong,
     0xaea273472d1f1610 as libc::c_ulonglong,
     0xb08050301000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x10305080c101722 as libc::c_longlong as u64_0,
     0x303e48494e627a84 as libc::c_longlong as u64_0,
     0x838a9bb6e2d7d6d4 as libc::c_ulonglong,
     0xd5cecacaaf958274 as libc::c_ulonglong,
     0x758485653c22150e as libc::c_longlong as u64_0,
     0x907040301000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x304070a0e16202c as libc::c_longlong as u64_0,
     0x3434333b4d606461 as libc::c_longlong as u64_0,
     0x657285a5d3b0b0af as libc::c_longlong as u64_0,
     0xb1aaa5ad997f6b5d as libc::c_ulonglong,
     0x514f616b5a371d0f as libc::c_longlong as u64_0,
     0x805030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1 as libc::c_int as u64_0,
     0x3060a0e161e2527 as libc::c_longlong as u64_0,
     0x25242c3e4b4c4749 as libc::c_longlong as u64_0,
     0x525e7299b390908f as libc::c_longlong as u64_0,
     0x908a8387846e584a as libc::c_ulonglong,
     0x40363646554d341c as libc::c_longlong as u64_0,
     0xc05020100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x103 as libc::c_int as u64_0,
     0x60a10161c1d1b17 as libc::c_longlong as u64_0,
     0x1a24333b39333339 as libc::c_longlong as u64_0,
     0x4350699a8d737472 as libc::c_longlong as u64_0,
     0x736e67676e5e4c3d as libc::c_longlong as u64_0,
     0x322b242432424331 as libc::c_longlong as u64_0,
     0x1a0b040100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x206 as libc::c_int as u64_0,
     0xb0f151715121013 as libc::c_longlong as u64_0,
     0x1d292e2a2423282f as libc::c_longlong as u64_0,
     0x37456790665a5a59 as libc::c_longlong as u64_0,
     0x5a58514f56504032 as libc::c_longlong as u64_0,
     0x27211d1817233135 as libc::c_longlong as u64_0,
     0x2b1a0b0301000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10409 as libc::c_int as u64_0,
     0xf11110e0b0c0f18 as libc::c_longlong as u64_0,
     0x2123201a171b1f26 as libc::c_longlong as u64_0,
     0x2e3f69754a474645 as libc::c_longlong as u64_0,
     0x46443e3c3f433529 as libc::c_longlong as u64_0,
     0x201915120e0f1824 as libc::c_longlong as u64_0,
     0x2b26190c04010000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x3070a as libc::c_int as u64_0,
     0xc0b0907080e151b as libc::c_longlong as u64_0,
     0x1c1713111115191e as libc::c_longlong as u64_0,
     0x27406a5336393534 as libc::c_longlong as u64_0,
     0x3534302d2e352d23 as libc::c_longlong as u64_0,
     0x1b140f0d0b09090f as libc::c_longlong as u64_0,
     0x1b2120170c040100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1030606 as libc::c_int as u64_0,
     0x60505060c121615 as libc::c_longlong as u64_0,
     0x120d0b0b0d111519 as libc::c_longlong as u64_0,
     0x24445c36282d2827 as libc::c_longlong as u64_0,
     0x282824222127271d as libc::c_longlong as u64_0,
     0x15100b0908070505 as libc::c_longlong as u64_0,
     0xa121a1a150c0501 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10201 as libc::c_int as u64_0,
     0x10204090f12110d as libc::c_longlong as u64_0,
     0xa0808090c0d1116 as libc::c_longlong as u64_0,
     0x264944221e221d1d as libc::c_longlong as u64_0,
     0x1e1e1a18171b2119 as libc::c_longlong as u64_0,
     0x120d090605050402 as libc::c_longlong as u64_0,
     0x2060d1315110b04 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x3080d0e0c0a07 as libc::c_longlong as u64_0,
     0x5050507090a0e16 as libc::c_longlong as u64_0,
     0x2e482a15181a1615 as libc::c_longlong as u64_0,
     0x1717141110121a17 as libc::c_longlong as u64_0,
     0x100b070403030301 as libc::c_longlong as u64_0,
     0x103080d0f0d07 as libc::c_longlong as u64_0,
     0x200000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x105080a09070503 as libc::c_longlong as u64_0,
     0x303040506080d19 as libc::c_longlong as u64_0,
     0x353e180e1212100f as libc::c_longlong as u64_0,
     0x10110f0d0c0c1114 as libc::c_longlong as u64_0,
     0xe09060301010000 as libc::c_longlong as u64_0,
     0x104080a08 as libc::c_longlong as u64_0,
     0x401000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x205060504030101 as libc::c_longlong as u64_0,
     0x101030405070d1e as libc::c_longlong as u64_0,
     0x392d0e0b0e0d0b0b as libc::c_longlong as u64_0,
     0xc0d0b0908080a11 as libc::c_longlong as u64_0,
     0xd08050301000000 as libc::c_longlong as u64_0,
     0x1020405 as libc::c_int as u64_0,
     0x301000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0,
     0x102030201000000 as libc::c_longlong as u64_0,
     0x10304070e23 as libc::c_longlong as u64_0,
     0x341b08090b090808 as libc::c_longlong as u64_0,
     0x80907050505060c as libc::c_longlong as u64_0,
     0xc07050300000000 as libc::c_longlong as u64_0,
     0x101 as libc::c_int as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103071227 as libc::c_longlong as u64_0,
     0x280f060809070605 as libc::c_longlong as u64_0,
     0x607050403030407 as libc::c_longlong as u64_0,
     0xa07040100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x103091827 as libc::c_longlong as u64_0,
     0x1907040707050404 as libc::c_longlong as u64_0,
     0x405040301010104 as libc::c_longlong as u64_0,
     0x707030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1030b1d23 as libc::c_longlong as u64_0,
     0xd02020404030303 as libc::c_longlong as u64_0,
     0x304030100000001 as libc::c_longlong as u64_0,
     0x406030100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x40f1e1c as libc::c_int as u64_0,
     0x701010302010001 as libc::c_longlong as u64_0,
     0x101010000000000 as libc::c_longlong as u64_0,
     0x204030000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x106121b11 as libc::c_longlong as u64_0,
     0x300000101000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x1010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x108131409 as libc::c_longlong as u64_0,
     0x100000100000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x10000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x108110d03 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x1080d0601 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x106080200 as libc::c_longlong as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0x2020000 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0];
// Initialized in run_static_initializers
static mut ovl_Boss_Ganon2_DL_00B308: [Gfx; 14] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 14];
static mut ovl_Boss_Ganon2_Vtx_00B2C8: [Vtx; 4] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(7 as libc::c_int) as libc::c_short,
                                -(7 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [7 as libc::c_int as libc::c_short,
                                -(7 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                2048 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [7 as libc::c_int as libc::c_short,
                                7 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [2048 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(7 as libc::c_int) as libc::c_short,
                                7 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
static mut ovl_Boss_Ganon2_DL_00B378: [Gfx; 3] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 3];
static mut D_80907084: [u8_0; 11] =
    [0 as libc::c_int as u8_0, 2 as libc::c_int as u8_0,
     4 as libc::c_int as u8_0, 6 as libc::c_int as u8_0,
     8 as libc::c_int as u8_0, 10 as libc::c_int as u8_0,
     12 as libc::c_int as u8_0, 14 as libc::c_int as u8_0,
     16 as libc::c_int as u8_0, 18 as libc::c_int as u8_0,
     20 as libc::c_int as u8_0];
static mut D_80907090: [u8_0; 11] =
    [1 as libc::c_int as u8_0, 3 as libc::c_int as u8_0,
     5 as libc::c_int as u8_0, 7 as libc::c_int as u8_0,
     9 as libc::c_int as u8_0, 11 as libc::c_int as u8_0,
     13 as libc::c_int as u8_0, 15 as libc::c_int as u8_0,
     17 as libc::c_int as u8_0, 19 as libc::c_int as u8_0,
     21 as libc::c_int as u8_0];
static mut ovl_Boss_Ganon2_Tex_00B420: [u64_0; 128] =
    [0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0xffffffffc9a47c as libc::c_longlong as u64_0,
     0x376c91a9b7aca194 as libc::c_longlong as u64_0,
     0x633e39505651473c as libc::c_longlong as u64_0,
     0x352f2a241e160800 as libc::c_longlong as u64_0,
     0xfffffffffff8ef as libc::c_longlong as u64_0,
     0xddc8c0b5a99b8c7b as libc::c_ulonglong,
     0x6b5d51463c342922 as libc::c_longlong as u64_0,
     0x1c16110e0b080300 as libc::c_longlong as u64_0,
     0xfffffffffffff8 as libc::c_longlong as u64_0,
     0xe5d5cec7bfb7ada2 as libc::c_ulonglong,
     0x978b7d6f62574d36 as libc::c_ulonglong,
     0x2d251d16110c0400 as libc::c_longlong as u64_0,
     0xfffffffefdf2e0 as libc::c_longlong as u64_0,
     0xd5cabeb09f92877c as libc::c_ulonglong,
     0x71625043382e261e as libc::c_longlong as u64_0,
     0x17120f0c0a080300 as libc::c_longlong as u64_0,
     0xfffffff9f7ebda as libc::c_longlong as u64_0,
     0xd0c6bbaf93898078 as libc::c_ulonglong,
     0x6e64594f443b322a as libc::c_longlong as u64_0,
     0x231c1713100e0500 as libc::c_longlong as u64_0,
     0xfffff9f3eadfd3 as libc::c_longlong as u64_0,
     0xc9c0b8afb6afaaa3 as libc::c_ulonglong,
     0x9b938a80765e5147 as libc::c_ulonglong,
     0x3e342c241b170800 as libc::c_longlong as u64_0,
     0xfff5f0eee8e6df as libc::c_longlong as u64_0,
     0xd7cfbeafa79f9991 as libc::c_ulonglong,
     0x897f7465574d4339 as libc::c_ulonglong,
     0x31281d16100c0400 as libc::c_longlong as u64_0,
     0xede7e3e0dcd7d5 as libc::c_longlong as u64_0,
     0xcec7bfafa79e958b as libc::c_ulonglong,
     0x81786c61483d342d as libc::c_ulonglong,
     0x27211c18130c0400 as libc::c_longlong as u64_0,
     0xdcdbd8d7d3cec6 as libc::c_longlong as u64_0,
     0xb5a99e948a7f746a as libc::c_ulonglong,
     0x5f544a443f362d26 as libc::c_longlong as u64_0,
     0x201a15120e0a0300 as libc::c_longlong as u64_0,
     0xd6d2cecdc4bebc as libc::c_longlong as u64_0,
     0xada2998f857a6f64 as libc::c_ulonglong,
     0x564c45403c332a23 as libc::c_longlong as u64_0,
     0x1e1914100d090300 as libc::c_longlong as u64_0,
     0xd0c9c6c6c5c1b7 as libc::c_longlong as u64_0,
     0xb2aba49c958d8581 as libc::c_ulonglong,
     0x7a72655a4f444239 as libc::c_longlong as u64_0,
     0x312a241d17120600 as libc::c_longlong as u64_0,
     0xc5c1bfbfbdbab9 as libc::c_longlong as u64_0,
     0xbcbab5b0a9a49d98 as libc::c_ulonglong,
     0x96918c847c756b5c as libc::c_ulonglong,
     0x4e4032220d060302 as libc::c_longlong as u64_0,
     0xb9b5b3b9b8b0aa as libc::c_longlong as u64_0,
     0xa49e978e88817a73 as libc::c_ulonglong,
     0x6c645c534840362e as libc::c_longlong as u64_0,
     0x261e160900000000 as libc::c_longlong as u64_0,
     0xb2afafa69e958c as libc::c_longlong as u64_0,
     0x878377726d685e54 as libc::c_ulonglong,
     0x4a413a342f2b2822 as libc::c_longlong as u64_0,
     0x1c15100700000000 as libc::c_longlong as u64_0,
     0x9ea2a49f999087 as libc::c_longlong as u64_0,
     0x817e706b6660554b as libc::c_ulonglong,
     0x433b342e2a27241e as libc::c_longlong as u64_0,
     0x1914100700000000 as libc::c_longlong as u64_0,
     0x979b9ea0a09e98 as libc::c_longlong as u64_0,
     0x95918b837c736f6a as libc::c_ulonglong,
     0x62584f463d352d25 as libc::c_longlong as u64_0,
     0x1f19140800000000 as libc::c_longlong as u64_0,
     0x95979798979694 as libc::c_longlong as u64_0,
     0x8d88837a77726c69 as libc::c_ulonglong,
     0x5e55483c322a221b as libc::c_longlong as u64_0,
     0x16110c0500000000 as libc::c_longlong as u64_0,
     0x8a90919291918b as libc::c_longlong as u64_0,
     0x7f787066584d443d as libc::c_longlong as u64_0,
     0x37332c241d17110c as libc::c_longlong as u64_0,
     0x805030200000000 as libc::c_longlong as u64_0,
     0x83878787858481 as libc::c_longlong as u64_0,
     0x7d786f675e574f48 as libc::c_longlong as u64_0,
     0x403a33332b231b15 as libc::c_longlong as u64_0,
     0x100a050200000000 as libc::c_longlong as u64_0,
     0x787d7d7c7b7771 as libc::c_longlong as u64_0,
     0x655e554c443d3731 as libc::c_longlong as u64_0,
     0x2b27231e1914100c as libc::c_longlong as u64_0,
     0x906020000000000 as libc::c_longlong as u64_0,
     0x70716f6e6c6a66 as libc::c_longlong as u64_0,
     0x5c554c433a332d27 as libc::c_longlong as u64_0,
     0x211c1917130f0c08 as libc::c_longlong as u64_0,
     0x604010000000000 as libc::c_longlong as u64_0,
     0x68686766656463 as libc::c_longlong as u64_0,
     0x5f5d59524a45403b as libc::c_longlong as u64_0,
     0x332a231d1814100c as libc::c_longlong as u64_0,
     0x702000000000000 as libc::c_longlong as u64_0,
     0x62626262626262 as libc::c_longlong as u64_0,
     0x5f5e5b5a56524e49 as libc::c_longlong as u64_0,
     0x433b352e27201911 as libc::c_longlong as u64_0,
     0x800000000000000 as libc::c_longlong as u64_0,
     0x4c4c4a48464543 as libc::c_longlong as u64_0,
     0x42413f38342f2a23 as libc::c_longlong as u64_0,
     0x1a15110b07040302 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0x595c5c5a595652 as libc::c_longlong as u64_0,
     0x4d423c38332d261e as libc::c_longlong as u64_0,
     0x1610080403020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x595b5c5c5b5a58 as libc::c_longlong as u64_0,
     0x55514b453f32261f as libc::c_longlong as u64_0,
     0x1812080302020100 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x585a59544c4742 as libc::c_longlong as u64_0,
     0x3d38312920170e07 as libc::c_longlong as u64_0,
     0x302010000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x32322d25201c18 as libc::c_longlong as u64_0,
     0x150e0c0907050402 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x3a3c3a3733302d as libc::c_longlong as u64_0,
     0x2a251f1a17100a04 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0x333232302b2723 as libc::c_longlong as u64_0,
     0x211c17130f0c0703 as libc::c_longlong as u64_0,
     0x100000000000000 as libc::c_longlong as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0, 0 as libc::c_int as u64_0,
     0 as libc::c_int as u64_0];
static mut ovl_Boss_Ganon2_Tex_00B820: [u64_0; 64] =
    [0x123456777777887 as libc::c_longlong as u64_0,
     0x7665555433211000 as libc::c_longlong as u64_0,
     0x1234578888877787 as libc::c_longlong as u64_0,
     0x7665555543221100 as libc::c_longlong as u64_0,
     0x1235689998877787 as libc::c_longlong as u64_0,
     0x7665555544332211 as libc::c_longlong as u64_0,
     0x2235689998777787 as libc::c_longlong as u64_0,
     0x7655555555554322 as libc::c_longlong as u64_0,
     0x2234678887777887 as libc::c_longlong as u64_0,
     0x6544456677776532 as libc::c_longlong as u64_0,
     0x1224677777778887 as libc::c_longlong as u64_0,
     0x544445689aa98642 as libc::c_longlong as u64_0,
     0x1124566777788876 as libc::c_longlong as u64_0,
     0x4333468acddb9642 as libc::c_longlong as u64_0,
     0x1123456667788865 as libc::c_longlong as u64_0,
     0x333457adefec9642 as libc::c_longlong as u64_0,
     0x1123445567888764 as libc::c_longlong as u64_0,
     0x333469ceffec9531 as libc::c_longlong as u64_0,
     0x1123344567888754 as libc::c_longlong as u64_0,
     0x33357befffeb7421 as libc::c_longlong as u64_0,
     0x1123344578998764 as libc::c_longlong as u64_0,
     0x33458ceffec96311 as libc::c_longlong as u64_0,
     0x11234456799a9875 as libc::c_longlong as u64_0,
     0x44469dfffda74210 as libc::c_longlong as u64_0,
     0x123445679abcba87 as libc::c_longlong as u64_0,
     0x5567adffeb853111 as libc::c_longlong as u64_0,
     0x23456778abdedca8 as libc::c_longlong as u64_0,
     0x7679cefec9642111 as libc::c_longlong as u64_0,
     0x45677889aceffeca as libc::c_longlong as u64_0,
     0x99abeffda7532123 as libc::c_ulonglong,
     0x56788899abdeffec as libc::c_longlong as u64_0,
     0xbbceffeb96432234 as libc::c_ulonglong,
     0x778888889abdfffe as libc::c_longlong as u64_0,
     0xeeefffda75433456 as libc::c_ulonglong,
     0x77776666789cefff as libc::c_longlong as u64_0,
     0xfffffec975444567 as libc::c_ulonglong,
     0x76655445568adfff as libc::c_longlong as u64_0,
     0xffffeda876556777 as libc::c_ulonglong,
     0x654433334579cdee as libc::c_longlong as u64_0,
     0xdeeedb9876677887 as libc::c_ulonglong,
     0x543222223579bccc as libc::c_longlong as u64_0,
     0xccccca9877788876 as libc::c_ulonglong,
     0x432111123568aaba as libc::c_longlong as u64_0,
     0xabbba98777788775 as libc::c_ulonglong,
     0x4211001134689aaa as libc::c_longlong as u64_0,
     0xabaa987666777765 as libc::c_ulonglong,
     0x3210000124679aaa as libc::c_longlong as u64_0,
     0xbaa9876656677765 as libc::c_ulonglong,
     0x31000001235789aa as libc::c_longlong as u64_0,
     0xba98765445566665 as libc::c_ulonglong,
     0x21000000134689aa as libc::c_longlong as u64_0,
     0xa987654333456654 as libc::c_ulonglong,
     0x200000001245789a as libc::c_longlong as u64_0,
     0x9876543223345553 as libc::c_ulonglong,
     0x1000000001356899 as libc::c_longlong as u64_0,
     0x8765432222344542 as libc::c_ulonglong,
     0x1346888 as libc::c_int as u64_0,
     0x8755432222233331 as libc::c_ulonglong,
     0x112346788 as libc::c_longlong as u64_0,
     0x7654432222222211 as libc::c_longlong as u64_0,
     0x112223457788 as libc::c_longlong as u64_0,
     0x7655443222221110 as libc::c_longlong as u64_0,
     0x11234455667888 as libc::c_longlong as u64_0,
     0x7655544332211000 as libc::c_longlong as u64_0];
static mut ovl_Boss_Ganon2_Vtx_00BA20: [Vtx; 22] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [20000 as libc::c_int as libc::c_short,
                                4000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [20000 as libc::c_int as libc::c_short,
                                -(4000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [18000 as libc::c_int as libc::c_short,
                                4000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [922 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [18000 as libc::c_int as libc::c_short,
                                -(4000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [922 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [16000 as libc::c_int as libc::c_short,
                                4000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [819 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [16000 as libc::c_int as libc::c_short,
                                -(4000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [819 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [14000 as libc::c_int as libc::c_short,
                                4000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [717 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [14000 as libc::c_int as libc::c_short,
                                -(4000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [717 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [12000 as libc::c_int as libc::c_short,
                                4000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [614 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [12000 as libc::c_int as libc::c_short,
                                -(4000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [614 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [10000 as libc::c_int as libc::c_short,
                                4000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [10000 as libc::c_int as libc::c_short,
                                -(4000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [512 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [8000 as libc::c_int as libc::c_short,
                                4000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [410 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [8000 as libc::c_int as libc::c_short,
                                -(4000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [410 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [6000 as libc::c_int as libc::c_short,
                                4000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [307 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [6000 as libc::c_int as libc::c_short,
                                -(4000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [307 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [4000 as libc::c_int as libc::c_short,
                                4000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [205 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [4000 as libc::c_int as libc::c_short,
                                -(4000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [205 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [2000 as libc::c_int as libc::c_short,
                                4000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [102 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [2000 as libc::c_int as libc::c_short,
                                -(4000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [102 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                4000 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(4000 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
static mut ovl_Boss_Ganon2_DL_00BB80: [Gfx; 35] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 35];
static mut D_80907080: s16 = 0 as libc::c_int as s16;
static mut D_809105D8: [Vec3f; 4] = [Vec3f{x: 0., y: 0., z: 0.,}; 4];
static mut D_80910608: [Vec3f; 4] = [Vec3f{x: 0., y: 0., z: 0.,}; 4];
static mut D_80910638: s8 = 0;
static mut ovl_Boss_Ganon2_Vtx_00FC08: [Vtx; 3] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                342 as libc::c_int as libc::c_short,
                                29 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1518 as libc::c_int as libc::c_short],
                           cn:
                               [210 as libc::c_int as libc::c_uchar,
                                7 as libc::c_int as libc::c_uchar,
                                110 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                361 as libc::c_int as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1519 as libc::c_int as libc::c_short],
                           cn:
                               [209 as libc::c_int as libc::c_uchar,
                                249 as libc::c_int as libc::c_uchar,
                                110 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(74 as libc::c_int) as libc::c_short,
                                384 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [790 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [210 as libc::c_int as libc::c_uchar,
                                252 as libc::c_int as libc::c_uchar,
                                110 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_Ganon2_Vtx_00FC38: [Vtx; 32] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                361 as libc::c_int as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1519 as libc::c_int as libc::c_short],
                           cn:
                               [209 as libc::c_int as libc::c_uchar,
                                249 as libc::c_int as libc::c_uchar,
                                110 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(43 as libc::c_int) as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                15 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [779 as libc::c_int as libc::c_short,
                                1528 as libc::c_int as libc::c_short],
                           cn:
                               [209 as libc::c_int as libc::c_uchar,
                                249 as libc::c_int as libc::c_uchar,
                                110 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(74 as libc::c_int) as libc::c_short,
                                384 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [790 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [210 as libc::c_int as libc::c_uchar,
                                252 as libc::c_int as libc::c_uchar,
                                110 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                342 as libc::c_int as libc::c_short,
                                29 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1518 as libc::c_int as libc::c_short],
                           cn:
                               [46 as libc::c_int as libc::c_uchar,
                                8 as libc::c_int as libc::c_uchar,
                                110 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [74 as libc::c_int as libc::c_short,
                                384 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [746 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [45 as libc::c_int as libc::c_uchar,
                                254 as libc::c_int as libc::c_uchar,
                                111 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                361 as libc::c_int as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1519 as libc::c_int as libc::c_short],
                           cn:
                               [45 as libc::c_int as libc::c_uchar,
                                253 as libc::c_int as libc::c_uchar,
                                111 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [43 as libc::c_int as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                15 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [757 as libc::c_int as libc::c_short,
                                1528 as libc::c_int as libc::c_short],
                           cn:
                               [45 as libc::c_int as libc::c_uchar,
                                253 as libc::c_int as libc::c_uchar,
                                111 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(74 as libc::c_int) as libc::c_short,
                                384 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [790 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [209 as libc::c_int as libc::c_uchar,
                                254 as libc::c_int as libc::c_uchar,
                                146 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                361 as libc::c_int as libc::c_short,
                                -(30 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1553 as libc::c_int as libc::c_short],
                           cn:
                               [207 as libc::c_int as libc::c_uchar,
                                251 as libc::c_int as libc::c_uchar,
                                147 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                342 as libc::c_int as libc::c_short,
                                -(31 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1555 as libc::c_int as libc::c_short],
                           cn:
                               [209 as libc::c_int as libc::c_uchar,
                                8 as libc::c_int as libc::c_uchar,
                                147 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(43 as libc::c_int) as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                -(15 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [779 as libc::c_int as libc::c_short,
                                1544 as libc::c_int as libc::c_short],
                           cn:
                               [207 as libc::c_int as libc::c_uchar,
                                251 as libc::c_int as libc::c_uchar,
                                147 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                342 as libc::c_int as libc::c_short,
                                -(31 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1555 as libc::c_int as libc::c_short],
                           cn:
                               [46 as libc::c_int as libc::c_uchar,
                                10 as libc::c_int as libc::c_uchar,
                                146 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                361 as libc::c_int as libc::c_short,
                                -(30 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1553 as libc::c_int as libc::c_short],
                           cn:
                               [45 as libc::c_int as libc::c_uchar,
                                3 as libc::c_int as libc::c_uchar,
                                145 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [74 as libc::c_int as libc::c_short,
                                384 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [746 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [45 as libc::c_int as libc::c_uchar,
                                2 as libc::c_int as libc::c_uchar,
                                145 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [43 as libc::c_int as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                -(15 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [757 as libc::c_int as libc::c_short,
                                1544 as libc::c_int as libc::c_short],
                           cn:
                               [45 as libc::c_int as libc::c_uchar,
                                3 as libc::c_int as libc::c_uchar,
                                145 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(111 as libc::c_int) as libc::c_short,
                                240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(212 as libc::c_int) as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [212 as libc::c_int as libc::c_uchar,
                                12 as libc::c_int as libc::c_uchar,
                                110 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1506 as libc::c_int as libc::c_short],
                           cn:
                               [219 as libc::c_int as libc::c_uchar,
                                252 as libc::c_int as libc::c_uchar,
                                114 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                342 as libc::c_int as libc::c_short,
                                29 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1518 as libc::c_int as libc::c_short],
                           cn:
                               [210 as libc::c_int as libc::c_uchar,
                                7 as libc::c_int as libc::c_uchar,
                                110 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [111 as libc::c_int as libc::c_short,
                                240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [724 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [44 as libc::c_int as libc::c_uchar,
                                12 as libc::c_int as libc::c_uchar,
                                110 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1506 as libc::c_int as libc::c_short],
                           cn:
                               [37 as libc::c_int as libc::c_uchar,
                                252 as libc::c_int as libc::c_uchar,
                                114 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(86 as libc::c_int) as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [214 as libc::c_int as libc::c_short,
                                1535 as libc::c_int as libc::c_short],
                           cn:
                               [217 as libc::c_int as libc::c_uchar,
                                249 as libc::c_int as libc::c_uchar,
                                113 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(74 as libc::c_int) as libc::c_short,
                                300 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [794 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [202 as libc::c_int as libc::c_uchar,
                                19 as libc::c_int as libc::c_uchar,
                                151 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [74 as libc::c_int as libc::c_short,
                                300 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [742 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [54 as libc::c_int as libc::c_uchar,
                                19 as libc::c_int as libc::c_uchar,
                                151 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [111 as libc::c_int as libc::c_short,
                                240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [724 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [45 as libc::c_int as libc::c_uchar,
                                12 as libc::c_int as libc::c_uchar,
                                146 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [74 as libc::c_int as libc::c_short,
                                300 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [742 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [53 as libc::c_int as libc::c_uchar,
                                18 as libc::c_int as libc::c_uchar,
                                106 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(111 as libc::c_int) as libc::c_short,
                                240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [812 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [211 as libc::c_int as libc::c_uchar,
                                12 as libc::c_int as libc::c_uchar,
                                146 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(74 as libc::c_int) as libc::c_short,
                                300 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [794 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [203 as libc::c_int as libc::c_uchar,
                                18 as libc::c_int as libc::c_uchar,
                                106 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(111 as libc::c_int) as libc::c_short,
                                240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [812 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [212 as libc::c_int as libc::c_uchar,
                                12 as libc::c_int as libc::c_uchar,
                                110 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [86 as libc::c_int as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [298 as libc::c_int as libc::c_short,
                                1535 as libc::c_int as libc::c_short],
                           cn:
                               [39 as libc::c_int as libc::c_uchar,
                                249 as libc::c_int as libc::c_uchar,
                                113 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [86 as libc::c_int as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [298 as libc::c_int as libc::c_short,
                                1535 as libc::c_int as libc::c_short],
                           cn:
                               [39 as libc::c_int as libc::c_uchar,
                                249 as libc::c_int as libc::c_uchar,
                                143 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(774 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [39 as libc::c_int as libc::c_uchar,
                                244 as libc::c_int as libc::c_uchar,
                                144 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                -(30 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1565 as libc::c_int as libc::c_short],
                           cn:
                               [37 as libc::c_int as libc::c_uchar,
                                252 as libc::c_int as libc::c_uchar,
                                142 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_Ganon2_Vtx_00FE38: [Vtx; 15] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(774 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [217 as libc::c_int as libc::c_uchar,
                                244 as libc::c_int as libc::c_uchar,
                                144 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(86 as libc::c_int) as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [214 as libc::c_int as libc::c_short,
                                1535 as libc::c_int as libc::c_short],
                           cn:
                               [217 as libc::c_int as libc::c_uchar,
                                249 as libc::c_int as libc::c_uchar,
                                143 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                -(30 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1565 as libc::c_int as libc::c_short],
                           cn:
                               [219 as libc::c_int as libc::c_uchar,
                                252 as libc::c_int as libc::c_uchar,
                                142 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1506 as libc::c_int as libc::c_short],
                           cn:
                               [37 as libc::c_int as libc::c_uchar,
                                252 as libc::c_int as libc::c_uchar,
                                114 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(774 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [39 as libc::c_int as libc::c_uchar,
                                244 as libc::c_int as libc::c_uchar,
                                112 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [86 as libc::c_int as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [298 as libc::c_int as libc::c_short,
                                1535 as libc::c_int as libc::c_short],
                           cn:
                               [39 as libc::c_int as libc::c_uchar,
                                249 as libc::c_int as libc::c_uchar,
                                113 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                342 as libc::c_int as libc::c_short,
                                -(31 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1555 as libc::c_int as libc::c_short],
                           cn:
                               [209 as libc::c_int as libc::c_uchar,
                                8 as libc::c_int as libc::c_uchar,
                                147 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(111 as libc::c_int) as libc::c_short,
                                240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(212 as libc::c_int) as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [211 as libc::c_int as libc::c_uchar,
                                12 as libc::c_int as libc::c_uchar,
                                146 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1506 as libc::c_int as libc::c_short],
                           cn:
                               [219 as libc::c_int as libc::c_uchar,
                                252 as libc::c_int as libc::c_uchar,
                                114 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(86 as libc::c_int) as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [214 as libc::c_int as libc::c_short,
                                1535 as libc::c_int as libc::c_short],
                           cn:
                               [217 as libc::c_int as libc::c_uchar,
                                249 as libc::c_int as libc::c_uchar,
                                113 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(774 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [217 as libc::c_int as libc::c_uchar,
                                244 as libc::c_int as libc::c_uchar,
                                112 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [111 as libc::c_int as libc::c_short,
                                240 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [724 as libc::c_int as libc::c_short,
                                1536 as libc::c_int as libc::c_short],
                           cn:
                               [45 as libc::c_int as libc::c_uchar,
                                12 as libc::c_int as libc::c_uchar,
                                146 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                -(30 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1565 as libc::c_int as libc::c_short],
                           cn:
                               [37 as libc::c_int as libc::c_uchar,
                                252 as libc::c_int as libc::c_uchar,
                                142 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                342 as libc::c_int as libc::c_short,
                                -(31 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1555 as libc::c_int as libc::c_short],
                           cn:
                               [46 as libc::c_int as libc::c_uchar,
                                10 as libc::c_int as libc::c_uchar,
                                146 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [86 as libc::c_int as libc::c_short,
                                -(488 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [298 as libc::c_int as libc::c_short,
                                1535 as libc::c_int as libc::c_short],
                           cn:
                               [39 as libc::c_int as libc::c_uchar,
                                249 as libc::c_int as libc::c_uchar,
                                143 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_Ganon2_Vtx_010298: [Vtx; 17] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                361 as libc::c_int as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1344 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                222 as libc::c_int as libc::c_uchar,
                                114 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                412 as libc::c_int as libc::c_short,
                                45 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(256 as libc::c_int) as libc::c_short,
                                1073 as libc::c_int as libc::c_short],
                           cn:
                               [191 as libc::c_int as libc::c_uchar,
                                227 as libc::c_int as libc::c_uchar,
                                96 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(43 as libc::c_int) as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                15 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(10 as libc::c_int) as libc::c_short,
                                1425 as libc::c_int as libc::c_short],
                           cn:
                               [187 as libc::c_int as libc::c_uchar,
                                4 as libc::c_int as libc::c_uchar,
                                98 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                412 as libc::c_int as libc::c_short,
                                45 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1073 as libc::c_int as libc::c_short],
                           cn:
                               [27 as libc::c_int as libc::c_uchar,
                                18 as libc::c_int as libc::c_uchar,
                                115 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                450 as libc::c_int as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1342 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                44 as libc::c_int as libc::c_uchar,
                                111 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(43 as libc::c_int) as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                15 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1014 as libc::c_int as libc::c_short,
                                1425 as libc::c_int as libc::c_short],
                           cn:
                               [187 as libc::c_int as libc::c_uchar,
                                4 as libc::c_int as libc::c_uchar,
                                98 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [43 as libc::c_int as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                15 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [522 as libc::c_int as libc::c_short,
                                1425 as libc::c_int as libc::c_short],
                           cn:
                               [69 as libc::c_int as libc::c_uchar,
                                4 as libc::c_int as libc::c_uchar,
                                98 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                412 as libc::c_int as libc::c_short,
                                45 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(256 as libc::c_int) as libc::c_short,
                                1073 as libc::c_int as libc::c_short],
                           cn:
                               [27 as libc::c_int as libc::c_uchar,
                                18 as libc::c_int as libc::c_uchar,
                                115 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                361 as libc::c_int as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1344 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                222 as libc::c_int as libc::c_uchar,
                                114 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(43 as libc::c_int) as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                -(15 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(10 as libc::c_int) as libc::c_short,
                                1645 as libc::c_int as libc::c_short],
                           cn:
                               [187 as libc::c_int as libc::c_uchar,
                                5 as libc::c_int as libc::c_uchar,
                                159 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                412 as libc::c_int as libc::c_short,
                                -(45 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(256 as libc::c_int) as libc::c_short,
                                1999 as libc::c_int as libc::c_short],
                           cn:
                               [229 as libc::c_int as libc::c_uchar,
                                19 as libc::c_int as libc::c_uchar,
                                141 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                361 as libc::c_int as libc::c_short,
                                -(30 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                1732 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                223 as libc::c_int as libc::c_uchar,
                                141 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(43 as libc::c_int) as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                -(15 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1014 as libc::c_int as libc::c_short,
                                1645 as libc::c_int as libc::c_short],
                           cn:
                               [187 as libc::c_int as libc::c_uchar,
                                5 as libc::c_int as libc::c_uchar,
                                159 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                450 as libc::c_int as libc::c_short,
                                -(30 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1729 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                45 as libc::c_int as libc::c_uchar,
                                145 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                412 as libc::c_int as libc::c_short,
                                -(45 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [768 as libc::c_int as libc::c_short,
                                1999 as libc::c_int as libc::c_short],
                           cn:
                               [229 as libc::c_int as libc::c_uchar,
                                19 as libc::c_int as libc::c_uchar,
                                141 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                412 as libc::c_int as libc::c_short,
                                -(45 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(256 as libc::c_int) as libc::c_short,
                                1999 as libc::c_int as libc::c_short],
                           cn:
                               [65 as libc::c_int as libc::c_uchar,
                                229 as libc::c_int as libc::c_uchar,
                                160 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [43 as libc::c_int as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                -(15 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [522 as libc::c_int as libc::c_short,
                                1645 as libc::c_int as libc::c_short],
                           cn:
                               [69 as libc::c_int as libc::c_uchar,
                                5 as libc::c_int as libc::c_uchar,
                                159 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_Ganon2_Vtx_00FF28: [Vtx; 11] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [152 as libc::c_int as libc::c_short,
                                355 as libc::c_int as libc::c_short,
                                -(40 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [534 as libc::c_int as libc::c_short,
                                236 as libc::c_int as libc::c_short],
                           cn:
                               [207 as libc::c_int as libc::c_uchar,
                                185 as libc::c_int as libc::c_uchar,
                                174 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [122 as libc::c_int as libc::c_short,
                                417 as libc::c_int as libc::c_short,
                                -(40 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [571 as libc::c_int as libc::c_short,
                                485 as libc::c_int as libc::c_short],
                           cn:
                               [244 as libc::c_int as libc::c_uchar,
                                231 as libc::c_int as libc::c_uchar,
                                140 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [213 as libc::c_int as libc::c_short,
                                458 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [170 as libc::c_int as libc::c_short,
                                575 as libc::c_int as libc::c_short],
                           cn:
                               [37 as libc::c_int as libc::c_uchar,
                                24 as libc::c_int as libc::c_uchar,
                                145 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [213 as libc::c_int as libc::c_short,
                                458 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [170 as libc::c_int as libc::c_short,
                                575 as libc::c_int as libc::c_short],
                           cn:
                               [37 as libc::c_int as libc::c_uchar,
                                24 as libc::c_int as libc::c_uchar,
                                111 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [152 as libc::c_int as libc::c_short,
                                355 as libc::c_int as libc::c_short,
                                41 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [534 as libc::c_int as libc::c_short,
                                236 as libc::c_int as libc::c_short],
                           cn:
                               [244 as libc::c_int as libc::c_uchar,
                                193 as libc::c_int as libc::c_uchar,
                                101 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [254 as libc::c_int as libc::c_short,
                                355 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [148 as libc::c_int as libc::c_short,
                                164 as libc::c_int as libc::c_short],
                           cn:
                               [82 as libc::c_int as libc::c_uchar,
                                169 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [122 as libc::c_int as libc::c_short,
                                417 as libc::c_int as libc::c_short,
                                40 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [571 as libc::c_int as libc::c_short,
                                485 as libc::c_int as libc::c_short],
                           cn:
                               [221 as libc::c_int as libc::c_uchar,
                                221 as libc::c_int as libc::c_uchar,
                                109 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [74 as libc::c_int as libc::c_short,
                                384 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [797 as libc::c_int as libc::c_short,
                                398 as libc::c_int as libc::c_short],
                           cn:
                               [1 as libc::c_int as libc::c_uchar,
                                140 as libc::c_int as libc::c_uchar,
                                227 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                450 as libc::c_int as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [993 as libc::c_int as libc::c_short,
                                695 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                247 as libc::c_int as libc::c_uchar,
                                119 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [43 as libc::c_int as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                15 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [884 as libc::c_int as libc::c_short,
                                511 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [57 as libc::c_int as libc::c_short,
                                486 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [728 as libc::c_int as libc::c_short,
                                786 as libc::c_int as libc::c_short],
                           cn:
                               [254 as libc::c_int as libc::c_uchar,
                                59 as libc::c_int as libc::c_uchar,
                                104 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_Ganon2_Vtx_00FFD8: [Vtx; 6] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                450 as libc::c_int as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                -(1348 as libc::c_int) as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                247 as libc::c_int as libc::c_uchar,
                                119 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [67 as libc::c_int as libc::c_short,
                                839 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [543 as libc::c_int as libc::c_short,
                                312 as libc::c_int as libc::c_short],
                           cn:
                               [52 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                107 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                896 as libc::c_int as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                555 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                77 as libc::c_int as libc::c_uchar,
                                92 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(67 as libc::c_int) as libc::c_short,
                                839 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(31 as libc::c_int) as libc::c_short,
                                312 as libc::c_int as libc::c_short],
                           cn:
                               [182 as libc::c_int as libc::c_uchar,
                                36 as libc::c_int as libc::c_uchar,
                                87 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(56 as libc::c_int) as libc::c_short,
                                456 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [17 as libc::c_int as libc::c_short,
                                -(1322 as libc::c_int) as libc::c_short],
                           cn:
                               [199 as libc::c_int as libc::c_uchar,
                                254 as libc::c_int as libc::c_uchar,
                                105 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [56 as libc::c_int as libc::c_short,
                                456 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [495 as libc::c_int as libc::c_short,
                                -(1322 as libc::c_int) as libc::c_short],
                           cn:
                               [57 as libc::c_int as libc::c_uchar,
                                254 as libc::c_int as libc::c_uchar,
                                105 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_Ganon2_Vtx_010038: [Vtx; 12] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [152 as libc::c_int as libc::c_short,
                                355 as libc::c_int as libc::c_short,
                                41 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [534 as libc::c_int as libc::c_short,
                                236 as libc::c_int as libc::c_short],
                           cn:
                               [244 as libc::c_int as libc::c_uchar,
                                193 as libc::c_int as libc::c_uchar,
                                101 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [213 as libc::c_int as libc::c_short,
                                458 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [170 as libc::c_int as libc::c_short,
                                575 as libc::c_int as libc::c_short],
                           cn:
                               [37 as libc::c_int as libc::c_uchar,
                                24 as libc::c_int as libc::c_uchar,
                                111 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [122 as libc::c_int as libc::c_short,
                                417 as libc::c_int as libc::c_short,
                                40 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [571 as libc::c_int as libc::c_short,
                                485 as libc::c_int as libc::c_short],
                           cn:
                               [221 as libc::c_int as libc::c_uchar,
                                221 as libc::c_int as libc::c_uchar,
                                109 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [124 as libc::c_int as libc::c_short,
                                515 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [434 as libc::c_int as libc::c_short,
                                848 as libc::c_int as libc::c_short],
                           cn:
                               [8 as libc::c_int as libc::c_uchar,
                                41 as libc::c_int as libc::c_uchar,
                                112 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [57 as libc::c_int as libc::c_short,
                                486 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [728 as libc::c_int as libc::c_short,
                                786 as libc::c_int as libc::c_short],
                           cn:
                               [254 as libc::c_int as libc::c_uchar,
                                59 as libc::c_int as libc::c_uchar,
                                104 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [74 as libc::c_int as libc::c_short,
                                384 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [797 as libc::c_int as libc::c_short,
                                398 as libc::c_int as libc::c_short],
                           cn:
                               [1 as libc::c_int as libc::c_uchar,
                                140 as libc::c_int as libc::c_uchar,
                                227 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [122 as libc::c_int as libc::c_short,
                                417 as libc::c_int as libc::c_short,
                                -(40 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [571 as libc::c_int as libc::c_short,
                                485 as libc::c_int as libc::c_short],
                           cn:
                               [244 as libc::c_int as libc::c_uchar,
                                231 as libc::c_int as libc::c_uchar,
                                140 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [124 as libc::c_int as libc::c_short,
                                515 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [434 as libc::c_int as libc::c_short,
                                848 as libc::c_int as libc::c_short],
                           cn:
                               [8 as libc::c_int as libc::c_uchar,
                                41 as libc::c_int as libc::c_uchar,
                                144 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [213 as libc::c_int as libc::c_short,
                                458 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [170 as libc::c_int as libc::c_short,
                                575 as libc::c_int as libc::c_short],
                           cn:
                               [37 as libc::c_int as libc::c_uchar,
                                24 as libc::c_int as libc::c_uchar,
                                145 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [57 as libc::c_int as libc::c_short,
                                486 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [728 as libc::c_int as libc::c_short,
                                786 as libc::c_int as libc::c_short],
                           cn:
                               [254 as libc::c_int as libc::c_uchar,
                                59 as libc::c_int as libc::c_uchar,
                                152 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [43 as libc::c_int as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                -(15 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [884 as libc::c_int as libc::c_short,
                                511 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                450 as libc::c_int as libc::c_short,
                                -(30 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [993 as libc::c_int as libc::c_short,
                                695 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                248 as libc::c_int as libc::c_uchar,
                                137 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_Ganon2_Tex_00F208: [u64_0; 64] =
    [0x529facab210f2117 as libc::c_longlong as u64_0,
     0x41db62a19c29b52d as libc::c_longlong as u64_0,
     0x9c692117319939db as libc::c_ulonglong,
     0x295718d131976b63 as libc::c_longlong as u64_0,
     0x525facab108b084b as libc::c_longlong as u64_0,
     0x189139995a5d6ae1 as libc::c_longlong as u64_0,
     0x732349dd31993199 as libc::c_longlong as u64_0,
     0x20d1080929975ae1 as libc::c_longlong as u64_0,
     0x529facab08470807 as libc::c_longlong as u64_0,
     0x47188b29113197 as libc::c_longlong as u64_0,
     0x211118cf188d1089 as libc::c_longlong as u64_0,
     0x849000729956b61 as libc::c_longlong as u64_0,
     0x4a5facab188b2115 as libc::c_longlong as u64_0,
     0x4a1b5a9f6ae18be7 as libc::c_longlong as u64_0,
     0x94695ae14a5d41d9 as libc::c_ulonglong,
     0x2955188f319773a3 as libc::c_longlong as u64_0,
     0x4a5faceb108918d1 as libc::c_longlong as u64_0,
     0x39db5ae183e5acab as libc::c_longlong as u64_0,
     0x83a539db31573199 as libc::c_ulonglong,
     0x3197188f31976b63 as libc::c_longlong as u64_0,
     0x525faceb108920d1 as libc::c_longlong as u64_0,
     0x41db525f8be7bd2d as libc::c_longlong as u64_0,
     0xacab41dd319939d9 as libc::c_ulonglong,
     0x3157108f31976323 as libc::c_longlong as u64_0,
     0x525faceb0807108d as libc::c_longlong as u64_0,
     0x3153521b6b2373a7 as libc::c_longlong as u64_0,
     0x62e341db39993155 as libc::c_longlong as u64_0,
     0x188f0809319762e1 as libc::c_longlong as u64_0,
     0x4a5facab08050807 as libc::c_longlong as u64_0,
     0x809104b188d2115 as libc::c_longlong as u64_0,
     0x21551915084d0809 as libc::c_longlong as u64_0,
     0x84b000729976321 as libc::c_longlong as u64_0,
     0x4a5facab108b20d3 as libc::c_longlong as u64_0,
     0x41db6ae1a427b4eb as libc::c_longlong as u64_0,
     0xa4677ae149d93157 as libc::c_ulonglong,
     0x291520d331976b63 as libc::c_longlong as u64_0,
     0x529fa4ab108b108d as libc::c_longlong as u64_0,
     0x29154a5fa46bbd6d as libc::c_longlong as u64_0,
     0x9c29315929572957 as libc::c_ulonglong,
     0x3157211531976b65 as libc::c_longlong as u64_0,
     0x52a1a4ab188b18cf as libc::c_longlong as u64_0,
     0x29554a5f9c69b52d as libc::c_longlong as u64_0,
     0x8c27315929593199 as libc::c_ulonglong,
     0x3199211331976b65 as libc::c_longlong as u64_0,
     0x52a1a4ab18cd2113 as libc::c_longlong as u64_0,
     0x295752a19c69c5ad as libc::c_longlong as u64_0,
     0xb4ab421d3199399b as libc::c_ulonglong,
     0x3199291531976b65 as libc::c_longlong as u64_0,
     0x529fa4ab10891891 as libc::c_longlong as u64_0,
     0x18d3399b6b257be7 as libc::c_longlong as u64_0,
     0x62e33199211318d1 as libc::c_longlong as u64_0,
     0x188f104b31976323 as libc::c_longlong as u64_0,
     0x52a1a4ab00050005 as libc::c_longlong as u64_0,
     0x9108d18d12957 as libc::c_longlong as u64_0,
     0x39991891104f080d as libc::c_longlong as u64_0,
     0x809084931976323 as libc::c_longlong as u64_0,
     0x529facab108b2113 as libc::c_longlong as u64_0,
     0x39994a5d83e7b4eb as libc::c_longlong as u64_0,
     0xaceb6b234a5f39db as libc::c_ulonglong,
     0x295718d131976b21 as libc::c_longlong as u64_0,
     0x525facab295120d5 as libc::c_longlong as u64_0,
     0x39db529f9427b52d as libc::c_longlong as u64_0,
     0x9c69295731993199 as libc::c_ulonglong,
     0x2113108d31976b63 as libc::c_longlong as u64_0];
static mut ovl_Boss_Ganon2_Vtx_0100F8: [Vtx; 10] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                450 as libc::c_int as libc::c_short,
                                -(30 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                -(1348 as libc::c_int) as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                248 as libc::c_int as libc::c_uchar,
                                137 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(67 as libc::c_int) as libc::c_short,
                                839 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(31 as libc::c_int) as libc::c_short,
                                312 as libc::c_int as libc::c_short],
                           cn:
                               [203 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                149 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                896 as libc::c_int as libc::c_short,
                                -(31 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                555 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                77 as libc::c_int as libc::c_uchar,
                                164 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [67 as libc::c_int as libc::c_short,
                                839 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [543 as libc::c_int as libc::c_short,
                                312 as libc::c_int as libc::c_short],
                           cn:
                               [74 as libc::c_int as libc::c_uchar,
                                36 as libc::c_int as libc::c_uchar,
                                170 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(56 as libc::c_int) as libc::c_short,
                                456 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [17 as libc::c_int as libc::c_short,
                                -(1322 as libc::c_int) as libc::c_short],
                           cn:
                               [199 as libc::c_int as libc::c_uchar,
                                254 as libc::c_int as libc::c_uchar,
                                151 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [56 as libc::c_int as libc::c_short,
                                456 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [495 as libc::c_int as libc::c_short,
                                -(1322 as libc::c_int) as libc::c_short],
                           cn:
                               [57 as libc::c_int as libc::c_uchar,
                                254 as libc::c_int as libc::c_uchar,
                                151 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                896 as libc::c_int as libc::c_short,
                                -(31 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                127 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                77 as libc::c_int as libc::c_uchar,
                                164 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(67 as libc::c_int) as libc::c_short,
                                839 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [-(31 as libc::c_int) as libc::c_short,
                                170 as libc::c_int as libc::c_short],
                           cn:
                               [182 as libc::c_int as libc::c_uchar,
                                36 as libc::c_int as libc::c_uchar,
                                87 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                896 as libc::c_int as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [256 as libc::c_int as libc::c_short,
                                210 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                77 as libc::c_int as libc::c_uchar,
                                92 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [67 as libc::c_int as libc::c_short,
                                839 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [543 as libc::c_int as libc::c_short,
                                170 as libc::c_int as libc::c_short],
                           cn:
                               [74 as libc::c_int as libc::c_uchar,
                                36 as libc::c_int as libc::c_uchar,
                                170 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
static mut ovl_Boss_Ganon2_Tex_00F408: [u64_0; 256] =
    [0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff0843294f0849 as libc::c_ulonglong,
     0x108b18cf18d3421d as libc::c_longlong as u64_0,
     0x2157295929592157 as libc::c_longlong as u64_0,
     0x4a5f319963239ced as libc::c_longlong as u64_0,
     0xf7ffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff000331910847 as libc::c_ulonglong,
     0x108b10cf18d14a5d as libc::c_longlong as u64_0,
     0x2117215721192117 as libc::c_longlong as u64_0,
     0x4aa12959319b5ae1 as libc::c_longlong as u64_0,
     0xd6b7ffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff000331910847 as libc::c_ulonglong,
     0x108b10cf18d14a5d as libc::c_longlong as u64_0,
     0x2117215721192117 as libc::c_longlong as u64_0,
     0x52a129593159421d as libc::c_longlong as u64_0,
     0x8c6bef7bffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff0003318f0847 as libc::c_ulonglong,
     0x1089108d18cf4a9f as libc::c_longlong as u64_0,
     0x2115211721572117 as libc::c_longlong as u64_0,
     0x52e12959295939db as libc::c_longlong as u64_0,
     0x6323ceb7ffffffff as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff0003294d0845 as libc::c_ulonglong,
     0x849108d108f529f as libc::c_longlong as u64_0,
     0x2115211721592117 as libc::c_longlong as u64_0,
     0x4aa12959295939dd as libc::c_longlong as u64_0,
     0x6323c635ffffffff as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff0001214d0845 as libc::c_ulonglong,
     0x849108b108d4a5b as libc::c_longlong as u64_0,
     0x1913211521172117 as libc::c_longlong as u64_0,
     0x39dd2959295931db as libc::c_longlong as u64_0,
     0x52e1ad6fffffffff as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff000118c90847 as libc::c_ulonglong,
     0x847108b108d3197 as libc::c_longlong as u64_0,
     0x18d3211521152117 as libc::c_longlong as u64_0,
     0x295931db2999319b as libc::c_longlong as u64_0,
     0x3a1d73a5ef7dffff as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff000108450887 as libc::c_ulonglong,
     0x8471089108b1911 as libc::c_longlong as u64_0,
     0x2113211521152117 as libc::c_longlong as u64_0,
     0x2117421d29593199 as libc::c_longlong as u64_0,
     0x319b6323f7bdffff as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff18c70003210d as libc::c_ulonglong,
     0x8470849108b108d as libc::c_longlong as u64_0,
     0x3197215519152115 as libc::c_longlong as u64_0,
     0x21174aa129592959 as libc::c_longlong as u64_0,
     0x319b6363efbdffff as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff4a53000339d3 as libc::c_ulonglong,
     0x8470847108b108b as libc::c_longlong as u64_0,
     0x4a5d295519132115 as libc::c_longlong as u64_0,
     0x21154a5f21592959 as libc::c_longlong as u64_0,
     0x319b6b65def9f7ff as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xfffff7bda52dffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff9ce7000339d3 as libc::c_ulonglong,
     0x84508470889108b as libc::c_longlong as u64_0,
     0x4a5b18d119132115 as libc::c_longlong as u64_0,
     0x2115319929992959 as libc::c_longlong as u64_0,
     0x319b52e1b5b1e73b as libc::c_longlong as u64_0,
     0xf7bffffffffff7bf as libc::c_ulonglong,
     0x9ceb52dd29936b5d as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffe7390003318f as libc::c_ulonglong,
     0x80508470849108b as libc::c_longlong as u64_0,
     0x319318d118d31913 as libc::c_longlong as u64_0,
     0x21152115425f2959 as libc::c_longlong as u64_0,
     0x319b4a5f7be794ab as libc::c_longlong as u64_0,
     0xceb5ef7ddef96b61 as libc::c_ulonglong,
     0x3195210f108b0849 as libc::c_longlong as u64_0,
     0xdef7ffffffffffff as libc::c_ulonglong,
     0xffffffff00011085 as libc::c_ulonglong,
     0x1087084708490849 as libc::c_longlong as u64_0,
     0x108b319718d11913 as libc::c_longlong as u64_0,
     0x191321154a5f2959 as libc::c_longlong as u64_0,
     0x295939dd4a5d39d9 as libc::c_longlong as u64_0,
     0x529d4a9b39d72953 as libc::c_longlong as u64_0,
     0x211318d110cf108d as libc::c_longlong as u64_0,
     0x2111c635ffffffff as libc::c_longlong as u64_0,
     0xffffffff00030003 as libc::c_ulonglong,
     0x294f084708470849 as libc::c_longlong as u64_0,
     0x88b4a5b18d118d1 as libc::c_longlong as u64_0,
     0x191319153199295b as libc::c_longlong as u64_0,
     0x295939db31992155 as libc::c_longlong as u64_0,
     0x21532113211318d3 as libc::c_longlong as u64_0,
     0x2115211521152115 as libc::c_longlong as u64_0,
     0x21152955def9ffff as libc::c_longlong as u64_0,
     0xffffffff63190003 as libc::c_ulonglong,
     0x39d3084508470849 as libc::c_longlong as u64_0,
     0x108b2951211118d1 as libc::c_longlong as u64_0,
     0x1913191321154a5f as libc::c_longlong as u64_0,
     0x2959319b29992957 as libc::c_longlong as u64_0,
     0x2115211521152117 as libc::c_longlong as u64_0,
     0x21592959319b39db as libc::c_longlong as u64_0,
     0x421b4a5d529f8c69 as libc::c_longlong as u64_0,
     0xffffffffdef70003 as libc::c_ulonglong,
     0x190b084708470847 as libc::c_longlong as u64_0,
     0x849108b421918d1 as libc::c_longlong as u64_0,
     0x18d3191319133199 as libc::c_longlong as u64_0,
     0x319b2959319b2959 as libc::c_longlong as u64_0,
     0x295921572959319b as libc::c_longlong as u64_0,
     0x421d4a5d4a5b529d as libc::c_longlong as u64_0,
     0x4a994a5942172951 as libc::c_longlong as u64_0,
     0xffffffffffff0001 as libc::c_ulonglong,
     0x3299108470847 as libc::c_longlong as u64_0,
     0x8491089319318d1 as libc::c_longlong as u64_0,
     0x18d118d319132113 as libc::c_longlong as u64_0,
     0x4a9f2959319b31db as libc::c_longlong as u64_0,
     0x319b319b421d31d7 as libc::c_longlong as u64_0,
     0x3193294f210d210d as libc::c_longlong as u64_0,
     0x210d210b18cb631d as libc::c_longlong as u64_0,
     0xffffffffffff5ad7 as libc::c_ulonglong,
     0x339d308450847 as libc::c_longlong as u64_0,
     0x8490849108b39d7 as libc::c_longlong as u64_0,
     0x18d118d118d32113 as libc::c_longlong as u64_0,
     0x2957421d319b319b as libc::c_longlong as u64_0,
     0x421d39d92951294f as libc::c_longlong as u64_0,
     0x210b108910870847 as libc::c_longlong as u64_0,
     0x847084708471049 as libc::c_longlong as u64_0,
     0xffffffffffffef7b as libc::c_ulonglong,
     0x3108710890847 as libc::c_longlong as u64_0,
     0x847084908492953 as libc::c_longlong as u64_0,
     0x211118d118d318d3 as libc::c_longlong as u64_0,
     0x18d33199421f39db as libc::c_longlong as u64_0,
     0x4217190d10891087 as libc::c_longlong as u64_0,
     0x845084508471049 as libc::c_longlong as u64_0,
     0x108b108b108b108b as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0x18c9000339d30845 as libc::c_longlong as u64_0,
     0x847084910890889 as libc::c_longlong as u64_0,
     0x39d718d118d318d3 as libc::c_longlong as u64_0,
     0x211319154a5d3193 as libc::c_longlong as u64_0,
     0x18c9084508430845 as libc::c_longlong as u64_0,
     0x84708471089108b as libc::c_longlong as u64_0,
     0x108d108d108d108d as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xc631000318cb1089 as libc::c_ulonglong,
     0x847084708490849 as libc::c_longlong as u64_0,
     0x18cd319718d118d1 as libc::c_longlong as u64_0,
     0x191331d918c91089 as libc::c_longlong as u64_0,
     0x845084508450847 as libc::c_longlong as u64_0,
     0x8491089108b108d as libc::c_longlong as u64_0,
     0x108d108d108d108d as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffff0845000339d3 as libc::c_ulonglong,
     0x845084708470889 as libc::c_longlong as u64_0,
     0x8493195295318d1 as libc::c_longlong as u64_0,
     0x2955294f10890845 as libc::c_longlong as u64_0,
     0x845084708470849 as libc::c_longlong as u64_0,
     0x108b108b108b108b as libc::c_longlong as u64_0,
     0x108b108d108d10cd as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffbdef00031089 as libc::c_ulonglong,
     0x18cb084708470849 as libc::c_longlong as u64_0,
     0x849088939d72113 as libc::c_longlong as u64_0,
     0x294f084508470845 as libc::c_longlong as u64_0,
     0x847084708491089 as libc::c_longlong as u64_0,
     0x108b108b108b108b as libc::c_longlong as u64_0,
     0x108b108b108d10cd as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffff42110003 as libc::c_ulonglong,
     0x294f084708470847 as libc::c_longlong as u64_0,
     0x8490889088b39d5 as libc::c_longlong as u64_0,
     0x845084708470847 as libc::c_longlong as u64_0,
     0x84708491089108b as libc::c_longlong as u64_0,
     0x108b108b108b108d as libc::c_longlong as u64_0,
     0x108b108b108d108d as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffef7b0003 as libc::c_ulonglong,
     0x5319308450847 as libc::c_longlong as u64_0,
     0x8490849210d0845 as libc::c_longlong as u64_0,
     0x847084708470847 as libc::c_longlong as u64_0,
     0x8470849108b108b as libc::c_longlong as u64_0,
     0x1089108b108b108d as libc::c_longlong as u64_0,
     0x108b108b108d108d as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffff94a5 as libc::c_ulonglong,
     0x318cb294f0847 as libc::c_longlong as u64_0,
     0x8470849294f0849 as libc::c_longlong as u64_0,
     0x889084708470847 as libc::c_longlong as u64_0,
     0x84910891089108b as libc::c_longlong as u64_0,
     0x108b108b108b108d as libc::c_longlong as u64_0,
     0x108d108d108d108d as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0x210b000529511089 as libc::c_longlong as u64_0,
     0x847294f108b1089 as libc::c_longlong as u64_0,
     0x849084708470847 as libc::c_longlong as u64_0,
     0x10491089108b088b as libc::c_longlong as u64_0,
     0x108b108b108b108b as libc::c_longlong as u64_0,
     0x108b10cd18cd10cd as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xf7bd210b0005294f as libc::c_ulonglong,
     0x1089294f18cb1089 as libc::c_longlong as u64_0,
     0x847084708470849 as libc::c_longlong as u64_0,
     0x10891089108b108b as libc::c_longlong as u64_0,
     0x108b108b108b108b as libc::c_longlong as u64_0,
     0x108d10cd18cd18cd as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffe73908450845 as libc::c_ulonglong,
     0x39d3211118cb1089 as libc::c_longlong as u64_0,
     0x847084708470889 as libc::c_longlong as u64_0,
     0x10891089108b108b as libc::c_longlong as u64_0,
     0x108b108b108b108b as libc::c_longlong as u64_0,
     0x108d108d18cd18cf as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffce731087 as libc::c_ulonglong,
     0x3193210f10890847 as libc::c_longlong as u64_0,
     0x847084908491089 as libc::c_longlong as u64_0,
     0x108b108b108b108b as libc::c_longlong as u64_0,
     0x188b10cd108b108d as libc::c_longlong as u64_0,
     0x108b108d10cd18cf as libc::c_longlong as u64_0,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffffff as libc::c_ulonglong,
     0xffffffffffffb56d as libc::c_ulonglong,
     0x3a1718cd08490847 as libc::c_longlong as u64_0,
     0x1089108908891089 as libc::c_longlong as u64_0,
     0x108b108b18cb10cb as libc::c_longlong as u64_0,
     0x188b18cd108b108d as libc::c_longlong as u64_0,
     0x108d10cd10cd18cf as libc::c_longlong as u64_0];
static mut ovl_Boss_Ganon2_Vtx_010198: [Vtx; 16] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(57 as libc::c_int) as libc::c_short,
                                486 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [728 as libc::c_int as libc::c_short,
                                786 as libc::c_int as libc::c_short],
                           cn:
                               [2 as libc::c_int as libc::c_uchar,
                                59 as libc::c_int as libc::c_uchar,
                                152 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                450 as libc::c_int as libc::c_short,
                                -(30 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [993 as libc::c_int as libc::c_short,
                                695 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                248 as libc::c_int as libc::c_uchar,
                                137 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(122 as libc::c_int) as libc::c_short,
                                417 as libc::c_int as libc::c_short,
                                -(40 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [571 as libc::c_int as libc::c_short,
                                485 as libc::c_int as libc::c_short],
                           cn:
                               [12 as libc::c_int as libc::c_uchar,
                                231 as libc::c_int as libc::c_uchar,
                                140 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(43 as libc::c_int) as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                -(15 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [884 as libc::c_int as libc::c_short,
                                511 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(74 as libc::c_int) as libc::c_short,
                                384 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [797 as libc::c_int as libc::c_short,
                                398 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                140 as libc::c_int as libc::c_uchar,
                                227 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(124 as libc::c_int) as libc::c_short,
                                515 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [434 as libc::c_int as libc::c_short,
                                848 as libc::c_int as libc::c_short],
                           cn:
                               [248 as libc::c_int as libc::c_uchar,
                                41 as libc::c_int as libc::c_uchar,
                                144 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(213 as libc::c_int) as libc::c_short,
                                458 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [170 as libc::c_int as libc::c_short,
                                575 as libc::c_int as libc::c_short],
                           cn:
                               [219 as libc::c_int as libc::c_uchar,
                                24 as libc::c_int as libc::c_uchar,
                                145 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(122 as libc::c_int) as libc::c_short,
                                417 as libc::c_int as libc::c_short,
                                40 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [571 as libc::c_int as libc::c_short,
                                485 as libc::c_int as libc::c_short],
                           cn:
                               [35 as libc::c_int as libc::c_uchar,
                                221 as libc::c_int as libc::c_uchar,
                                109 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(57 as libc::c_int) as libc::c_short,
                                486 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [728 as libc::c_int as libc::c_short,
                                786 as libc::c_int as libc::c_short],
                           cn:
                               [2 as libc::c_int as libc::c_uchar,
                                59 as libc::c_int as libc::c_uchar,
                                104 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(124 as libc::c_int) as libc::c_short,
                                515 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [434 as libc::c_int as libc::c_short,
                                848 as libc::c_int as libc::c_short],
                           cn:
                               [248 as libc::c_int as libc::c_uchar,
                                41 as libc::c_int as libc::c_uchar,
                                112 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(213 as libc::c_int) as libc::c_short,
                                458 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [170 as libc::c_int as libc::c_short,
                                575 as libc::c_int as libc::c_short],
                           cn:
                               [219 as libc::c_int as libc::c_uchar,
                                24 as libc::c_int as libc::c_uchar,
                                111 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(152 as libc::c_int) as libc::c_short,
                                355 as libc::c_int as libc::c_short,
                                41 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [534 as libc::c_int as libc::c_short,
                                236 as libc::c_int as libc::c_short],
                           cn:
                               [12 as libc::c_int as libc::c_uchar,
                                193 as libc::c_int as libc::c_uchar,
                                101 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [0 as libc::c_int as libc::c_short,
                                450 as libc::c_int as libc::c_short,
                                30 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [993 as libc::c_int as libc::c_short,
                                695 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                247 as libc::c_int as libc::c_uchar,
                                119 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(43 as libc::c_int) as libc::c_short,
                                408 as libc::c_int as libc::c_short,
                                15 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [884 as libc::c_int as libc::c_short,
                                511 as libc::c_int as libc::c_short],
                           cn:
                               [0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(152 as libc::c_int) as libc::c_short,
                                355 as libc::c_int as libc::c_short,
                                -(40 as libc::c_int) as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [534 as libc::c_int as libc::c_short,
                                236 as libc::c_int as libc::c_short],
                           cn:
                               [49 as libc::c_int as libc::c_uchar,
                                185 as libc::c_int as libc::c_uchar,
                                174 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(254 as libc::c_int) as libc::c_short,
                                355 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [148 as libc::c_int as libc::c_short,
                                164 as libc::c_int as libc::c_short],
                           cn:
                               [174 as libc::c_int as libc::c_uchar,
                                169 as libc::c_int as libc::c_uchar,
                                0 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
static mut ovl_Boss_Ganon2_DL_0103A8: [Gfx; 122] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 122];
static mut D_80906D6C: Vec3f =
    { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: 500.0f32,}; init };
static mut ovl_Boss_Ganon2_Vtx_00F148: [Vtx; 4] =
    [Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(20 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [20 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                1024 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [20 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                40 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [1024 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },},
     Vtx{v:
             {
                 let mut init =
                     Vtx_t{ob:
                               [-(20 as libc::c_int) as libc::c_short,
                                0 as libc::c_int as libc::c_short,
                                40 as libc::c_int as libc::c_short],
                           flag: 0 as libc::c_int as libc::c_ushort,
                           tc:
                               [0 as libc::c_int as libc::c_short,
                                0 as libc::c_int as libc::c_short],
                           cn:
                               [255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar,
                                255 as libc::c_int as libc::c_uchar],};
                 init
             },}];
// Initialized in run_static_initializers
static mut ovl_Boss_Ganon2_DL_00F188: [Gfx; 16] =
    [Gfx{words: Gwords{w0: 0, w1: 0,},}; 16];
static mut D_80907074: [s16; 6] =
    [0 as libc::c_int as s16, 1 as libc::c_int as s16,
     2 as libc::c_int as s16, 2 as libc::c_int as s16,
     1 as libc::c_int as s16, 0 as libc::c_int as s16];
static mut sPrimColor: Color_RGBA8 =
    {
        let mut init =
            Color_RGBA8{r: 0 as libc::c_int as u8_0,
                        g: 120 as libc::c_int as u8_0,
                        b: 0 as libc::c_int as u8_0,
                        a: 255 as libc::c_int as u8_0,};
        init
    };
static mut sEnvColor: Color_RGBA8 =
    {
        let mut init =
            Color_RGBA8{r: 0 as libc::c_int as u8_0,
                        g: 120 as libc::c_int as u8_0,
                        b: 0 as libc::c_int as u8_0,
                        a: 255 as libc::c_int as u8_0,};
        init
    };
static mut D_8090702C: [Vec3f; 3] =
    [{ let mut init = Vec3f{x: 10.0f32, y: -10.0f32, z: 0.0f32,}; init },
     { let mut init = Vec3f{x: 0.0f32, y: 0.0f32, z: -60.0f32,}; init },
     { let mut init = Vec3f{x: 70.0f32, y: -30.0f32, z: 10.0f32,}; init }];
static mut D_80907050: [Vec3f; 3] =
    [{ let mut init = Vec3f{x: -20.0f32, y: 0.0f32, z: 0.0f32,}; init },
     { let mut init = Vec3f{x: -15.0f32, y: 0.0f32, z: 10.0f32,}; init },
     { let mut init = Vec3f{x: -16.0f32, y: -12.0f32, z: 40.0f32,}; init }];
static mut D_8090EB20: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
static mut sParticles: [BossGanon2Effect; 100] =
    [BossGanon2Effect{type_0: 0,
                      unk_01: 0,
                      position: Vec3f{x: 0., y: 0., z: 0.,},
                      velocity: Vec3f{x: 0., y: 0., z: 0.,},
                      accel: Vec3f{x: 0., y: 0., z: 0.,},
                      unk_28: [0; 6],
                      unk_2E: 0,
                      unk_30: [0; 4],
                      scale: 0.,
                      unk_38: Vec3f{x: 0., y: 0., z: 0.,},}; 100];
static mut sJntSphItemsInit1: [ColliderJntSphElementInit; 16] =
    [{
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    0
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         30
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    1
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         30
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    2
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         30
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    3
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    4
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    5
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    6
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    7
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    8
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    9
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    10
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    11
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    12
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    13
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x10
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    14
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         20
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK0
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffcfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    15
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         30
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     }];
// Initialized in run_static_initializers
static mut sJntSphInit1: ColliderJntSphInit =
    ColliderJntSphInit{base:
                           ColliderInit{colType: 0,
                                        atFlags: 0,
                                        acFlags: 0,
                                        ocFlags1: 0,
                                        ocFlags2: 0,
                                        shape: 0,},
                       count: 0,
                       elements:
                           0 as *const ColliderJntSphElementInit as
                               *mut ColliderJntSphElementInit,};
static mut sJntSphItemsInit2: [ColliderJntSphElementInit; 2] =
    [{
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK2
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x40
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffdfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    15
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         45
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     },
     {
         let mut init =
             ColliderJntSphElementInit{info:
                                           {
                                               let mut init =
                                                   ColliderInfoInit{elemType:
                                                                        ELEMTYPE_UNK2
                                                                            as
                                                                            libc::c_int
                                                                            as
                                                                            u8_0,
                                                                    toucher:
                                                                        {
                                                                            let mut init =
                                                                                ColliderTouch{dmgFlags:
                                                                                                  0xffcfffff
                                                                                                      as
                                                                                                      libc::c_uint,
                                                                                              effect:
                                                                                                  0
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,
                                                                                              damage:
                                                                                                  0x40
                                                                                                      as
                                                                                                      libc::c_int
                                                                                                      as
                                                                                                      u8_0,};
                                                                            init
                                                                        },
                                                                    bumper:
                                                                        {
                                                                            let mut init =
                                                                                ColliderBumpInit{dmgFlags:
                                                                                                     0xffdfffff
                                                                                                         as
                                                                                                         libc::c_uint,
                                                                                                 effect:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,
                                                                                                 defense:
                                                                                                     0
                                                                                                         as
                                                                                                         libc::c_int
                                                                                                         as
                                                                                                         u8_0,};
                                                                            init
                                                                        },
                                                                    toucherFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int
                                                                             |
                                                                             (0
                                                                                  as
                                                                                  libc::c_int)
                                                                                 <<
                                                                                 3
                                                                                     as
                                                                                     libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    bumperFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,
                                                                    ocElemFlags:
                                                                        ((1 as
                                                                              libc::c_int)
                                                                             <<
                                                                             0
                                                                                 as
                                                                                 libc::c_int)
                                                                            as
                                                                            u8_0,};
                                               init
                                           },
                                       dim:
                                           {
                                               let mut init =
                                                   ColliderJntSphElementDimInit{limb:
                                                                                    16
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        u8_0,
                                                                                modelSphere:
                                                                                    {
                                                                                        let mut init =
                                                                                            Sphere16{center:
                                                                                                         {
                                                                                                             let mut init =
                                                                                                                 Vec3s{x:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       y:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,
                                                                                                                       z:
                                                                                                                           0
                                                                                                                               as
                                                                                                                               libc::c_int
                                                                                                                               as
                                                                                                                               s16,};
                                                                                                             init
                                                                                                         },
                                                                                                     radius:
                                                                                                         45
                                                                                                             as
                                                                                                             libc::c_int
                                                                                                             as
                                                                                                             s16,};
                                                                                        init
                                                                                    },
                                                                                scale:
                                                                                    100
                                                                                        as
                                                                                        libc::c_int
                                                                                        as
                                                                                        s16,};
                                               init
                                           },};
         init
     }];
// Initialized in run_static_initializers
static mut sJntSphInit2: ColliderJntSphInit =
    ColliderJntSphInit{base:
                           ColliderInit{colType: 0,
                                        atFlags: 0,
                                        acFlags: 0,
                                        ocFlags1: 0,
                                        ocFlags2: 0,
                                        shape: 0,},
                       count: 0,
                       elements:
                           0 as *const ColliderJntSphElementInit as
                               *mut ColliderJntSphElementInit,};
static mut D_80906D78: u8_0 = 0 as libc::c_int as u8_0;
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_InitRand(mut seedInit0: s32,
                                             mut seedInit1: s32,
                                             mut seedInit2: s32) {
    sSeed1 = seedInit0;
    sSeed2 = seedInit1;
    sSeed3 = seedInit2;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_RandZeroOne() -> f32_0 {
    // Wichmann-Hill algorithm
    let mut randFloat: f32_0 = 0.;
    sSeed1 = sSeed1 * 171 as libc::c_int % 30269 as libc::c_int;
    sSeed2 = sSeed2 * 172 as libc::c_int % 30307 as libc::c_int;
    sSeed3 = sSeed3 * 170 as libc::c_int % 30323 as libc::c_int;
    randFloat =
        sSeed1 as libc::c_float / 30269.0f32 +
            sSeed2 as libc::c_float / 30307.0f32 +
            sSeed3 as libc::c_float / 30323.0f32;
    while randFloat >= 1.0f32 { randFloat -= 1.0f32 }
    return fabsf(randFloat);
}
#[no_mangle]
pub unsafe extern "C" fn func_808FD080(mut idx: s32,
                                       mut collider: *mut ColliderJntSph,
                                       mut arg2: *mut Vec3f) {
    (*(*collider).elements.offset(idx as isize)).dim.worldSphere.center.x =
        (*arg2).x as s16;
    (*(*collider).elements.offset(idx as isize)).dim.worldSphere.center.y =
        (*arg2).y as s16;
    (*(*collider).elements.offset(idx as isize)).dim.worldSphere.center.z =
        (*arg2).z as s16;
    (*(*collider).elements.offset(idx as isize)).dim.worldSphere.radius =
        ((*(*collider).elements.offset(idx as isize)).dim.modelSphere.radius
             as libc::c_int as libc::c_float *
             (*(*collider).elements.offset(idx as isize)).dim.scale) as s16;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_SetObjectSegment(mut this:
                                                         *mut BossGanon2,
                                                     mut globalCtx:
                                                         *mut GlobalContext,
                                                     mut objectId: s32,
                                                     mut setRSPSegment:
                                                         u8_0) {
    let mut pad: s32 = 0;
    let mut objectIdx: s32 =
        Object_GetIndex(&mut (*globalCtx).objectCtx, objectId as s16);
    gSegments[6 as libc::c_int as usize] =
        ((*globalCtx).objectCtx.status[objectIdx as usize].segment as
             u32_0).wrapping_add(0x80000000 as libc::c_uint) as
            *mut libc::c_void as u32_0;
    if setRSPSegment != 0 {
        let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
        let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
        __gfxCtx = (*globalCtx).state.gfxCtx;
        Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                        b"../z_boss_ganon2.c\x00" as *const u8 as
                            *const libc::c_char, 790 as libc::c_int);
        let fresh0 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g: *mut Gfx = fresh0;
        (*_g).words.w0 =
            (0xdb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0x6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((0x6 as libc::c_int * 4 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 =
            (*globalCtx).objectCtx.status[objectIdx as usize].segment as
                libc::c_uint;
        let fresh1 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh1;
        (*_g_0).words.w0 =
            (0xdb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0x6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((0x6 as libc::c_int * 4 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_0).words.w1 =
            (*globalCtx).objectCtx.status[objectIdx as usize].segment as
                libc::c_uint;
        Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                         b"../z_boss_ganon2.c\x00" as *const u8 as
                             *const libc::c_char, 799 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808FD210(mut globalCtx: *mut GlobalContext,
                                       mut arg1: *mut Vec3f) {
    let mut effect: *mut BossGanon2Effect =
        (*globalCtx).specialEffects as *mut BossGanon2Effect;
    (*effect).type_0 = 1 as libc::c_int as u8_0;
    (*effect).position = *arg1;
    (*effect).unk_2E = 0 as libc::c_int as s16;
    (*effect).unk_01 = 0 as libc::c_int as u8_0;
    (*effect).velocity.x = 25.0f32;
    (*effect).velocity.y = 15.0f32;
    (*effect).velocity.z = 0.0f32;
    (*effect).accel.x = 0.0f32;
    (*effect).accel.y = -1.0f32;
    (*effect).accel.z = 0.0f32;
}
#[no_mangle]
pub unsafe extern "C" fn func_808FD27C(mut globalCtx: *mut GlobalContext,
                                       mut position: *mut Vec3f,
                                       mut velocity: *mut Vec3f,
                                       mut scale: f32_0) {
    let mut effect: *mut BossGanon2Effect =
        (*globalCtx).specialEffects as *mut BossGanon2Effect;
    let mut i: s16 = 0;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              (::std::mem::size_of::<[BossGanon2Effect; 100]>() as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<BossGanon2Effect>()
                                                   as libc::c_ulong) as s32 {
        if (*effect).type_0 as libc::c_int == 0 as libc::c_int {
            (*effect).type_0 = 2 as libc::c_int as u8_0;
            (*effect).position = *position;
            (*effect).velocity = *velocity;
            (*effect).accel.x = 0.0f64 as f32_0;
            (*effect).accel.y = -1.0f32;
            (*effect).accel.z = 0.0f64 as f32_0;
            (*effect).unk_38.z =
                Rand_ZeroFloat(2 as libc::c_int as libc::c_float *
                                   3.14159265358979323846f32);
            (*effect).unk_38.y =
                Rand_ZeroFloat(2 as libc::c_int as libc::c_float *
                                   3.14159265358979323846f32);
            (*effect).unk_38.x =
                Rand_ZeroFloat(2 as libc::c_int as libc::c_float *
                                   3.14159265358979323846f32);
            (*effect).scale = scale;
            break ;
        } else { i += 1; effect = effect.offset(1) }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_Init(mut thisx: *mut Actor,
                                         mut globalCtx: *mut GlobalContext) {
    let mut this: *mut BossGanon2 = thisx as *mut BossGanon2;
    let mut pad: s32 = 0;
    let mut i: s16 = 0;
    (*globalCtx).specialEffects =
        sParticles.as_mut_ptr() as *mut libc::c_void;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              (::std::mem::size_of::<[BossGanon2Effect; 100]>() as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<BossGanon2Effect>()
                                                   as libc::c_ulong) as s32 {
        sParticles[i as usize].type_0 = 0 as libc::c_int as u8_0;
        i += 1
    }
    (*this).actor.colChkInfo.mass = 0xff as libc::c_int as u8_0;
    (*this).actor.colChkInfo.health = 30 as libc::c_int as u8_0;
    Collider_InitJntSph(globalCtx, &mut (*this).unk_424);
    Collider_SetJntSph(globalCtx, &mut (*this).unk_424, &mut (*this).actor,
                       &mut sJntSphInit1, (*this).unk_464.as_mut_ptr());
    Collider_InitJntSph(globalCtx, &mut (*this).unk_444);
    Collider_SetJntSph(globalCtx, &mut (*this).unk_444, &mut (*this).actor,
                       &mut sJntSphInit2, (*this).unk_864.as_mut_ptr());
    BossGanon2_SetObjectSegment(this, globalCtx, OBJECT_GANON as libc::c_int,
                                0 as libc::c_int as u8_0);
    SkelAnime_InitFlex(globalCtx, &mut (*this).skelAnime, &mut gDorfSkel,
                       0 as *mut AnimationHeader, 0 as *mut Vec3s,
                       0 as *mut Vec3s, 0 as libc::c_int);
    func_808FD5C4(this, globalCtx);
    (*this).actor.naviEnemyId = 0x3e as libc::c_int as u8_0;
    (*this).actor.gravity = 0.0f32;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_Destroy(mut thisx: *mut Actor,
                                            mut globalCtx:
                                                *mut GlobalContext) {
    let mut this: *mut BossGanon2 = thisx as *mut BossGanon2;
    SkelAnime_Free(&mut (*this).skelAnime, globalCtx);
    Collider_DestroyJntSph(globalCtx, &mut (*this).unk_424);
    Collider_DestroyJntSph(globalCtx, &mut (*this).unk_444);
}
#[no_mangle]
pub unsafe extern "C" fn func_808FD4D4(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext,
                                       mut arg2: s16, mut arg3: s16) {
    if arg2 as libc::c_int == 0 as libc::c_int ||
           arg2 as libc::c_int == 1 as libc::c_int {
        Actor_SpawnFloorDustRing(globalCtx, &mut (*this).actor,
                                 &mut (*this).unk_1D0, 25.0f32, arg3 as s32,
                                 8.0f32, 0x1f4 as libc::c_int as s16,
                                 0xa as libc::c_int as s16,
                                 1 as libc::c_int as u8_0);
    }
    if arg2 as libc::c_int == 0 as libc::c_int ||
           arg2 as libc::c_int == 2 as libc::c_int {
        Actor_SpawnFloorDustRing(globalCtx, &mut (*this).actor,
                                 &mut (*this).unk_1DC, 25.0f32, arg3 as s32,
                                 8.0f32, 0x1f4 as libc::c_int as s16,
                                 0xa as libc::c_int as s16,
                                 1 as libc::c_int as u8_0);
    }
    Audio_PlayActorSound2(&mut (*this).actor, 0x39d7 as libc::c_int as u16_0);
    func_80033E88(&mut (*this).actor, globalCtx, 2 as libc::c_int as s16,
                  0xa as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_808FD5C4(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    (*this).actionFunc =
        Some(func_808FD5F4 as
                 unsafe extern "C" fn(_: *mut BossGanon2,
                                      _: *mut GlobalContext) -> ());
    (*this).actor.flags &=
        !((1 as libc::c_int) << 0 as libc::c_int) as libc::c_uint;
    (*this).actor.world.pos.y = -3000.0f32;
}
#[no_mangle]
pub unsafe extern "C" fn func_808FD5F4(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut pad: s16 = 0;
    let mut sp8D: u8_0 = 0;
    let mut player: *mut Player = 0 as *mut Player;
    let mut objectIdx: s32 = 0;
    let mut zero: s32 = 0 as libc::c_int;
    let mut pad2: s32 = 0;
    sp8D = 0 as libc::c_int as u8_0;
    player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    (*this).unk_398 = (*this).unk_398.wrapping_add(1);
    let mut current_block_599: u64;
    match (*this).unk_39C as libc::c_int {
        0 => {
            objectIdx =
                Object_GetIndex(&mut (*globalCtx).objectCtx,
                                OBJECT_GANON_ANIME3 as libc::c_int as s16);
            if Object_IsLoaded(&mut (*globalCtx).objectCtx, objectIdx) != 0 {
                func_80064520(globalCtx, &mut (*globalCtx).csCtx);
                func_8002DF54(globalCtx, &mut (*this).actor,
                              8 as libc::c_int as u8_0);
                (*this).unk_39E = Gameplay_CreateSubCamera(globalCtx);
                Gameplay_ChangeCameraStatus(globalCtx,
                                            0 as libc::c_int as s16,
                                            1 as libc::c_int as s16);
                Gameplay_ChangeCameraStatus(globalCtx, (*this).unk_39E,
                                            7 as libc::c_int as s16);
                (*this).unk_39C = 1 as libc::c_int as s16;
                sZelda =
                    Actor_SpawnAsChild(&mut (*globalCtx).actorCtx,
                                       &mut (*this).actor, globalCtx,
                                       ACTOR_EN_ZL3 as libc::c_int as s16,
                                       970.0f32, 1086.0f32, -200.0f32,
                                       0 as libc::c_int as s16,
                                       0 as libc::c_int as s16,
                                       0 as libc::c_int as s16,
                                       1 as libc::c_int as s16) as *mut EnZl3;
                (*sZelda).unk_3C8 = 0 as libc::c_int as u8_0;
                (*sZelda).actor.world.pos.x = 970.0f32;
                (*sZelda).actor.world.pos.y = 1086.0f32;
                (*sZelda).actor.world.pos.z = -214.0f32;
                (*sZelda).actor.shape.rot.y = -(0x7000 as libc::c_int) as s16;
                (*this).unk_3BC.x = 0.0f32;
                (*this).unk_3BC.y = 1.0f32;
                (*this).unk_3BC.z = 0.0f32;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_3A4.x = 0.0f32;
                (*this).unk_3A4.y = 1400.0f32;
                (*this).unk_3A4.z = 1600.0f32;
                (*player).actor.world.pos.x = 970.0f32;
                (*player).actor.world.pos.y = 1086.0f32;
                (*player).actor.world.pos.z = -186.0f32;
                (*player).actor.shape.rot.y = -(0x5000 as libc::c_int) as s16;
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon_anime3_Anim_002168,
                                      0.0f32);
                (*globalCtx).envCtx.unk_D8 = 0.0f32;
                // fake, tricks the compiler into allocating more stack
                if zero != 0 {
                    (*this).unk_3A4.x =
                        ((*this).unk_3A4.x as libc::c_double * 2.0f64) as
                            f32_0
                }
                current_block_599 = 15735329692871936256;
            } else { current_block_599 = 1413697737627625973; }
        }
        1 => { current_block_599 = 15735329692871936256; }
        2 => { current_block_599 = 18442378986915135212; }
        3 => {
            Math_ApproachF(&mut (*this).unk_3B0.y,
                           (*player).actor.world.pos.y + 47.0f32 + 7.0f32,
                           0.1f32, 2.0f32);
            (*this).unk_339 = 4 as libc::c_int as s8;
            if (*this).unk_398 == 10 as libc::c_int as libc::c_uint {
                func_80078914(&mut D_80906D6C,
                              0x281d as libc::c_int as u16_0);
                Audio_QueueSeqCmd(((SEQ_PLAYER_BGM_MAIN as libc::c_int) <<
                                       24 as libc::c_int |
                                       0x100000ff as libc::c_int) as u32_0);
            }
            if (*this).unk_398 == 20 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 3 as libc::c_int as u8_0;
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x50 as libc::c_int as u8_0);
            }
            if (*this).unk_398 == 55 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 4 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_410.x = 0.0f32;
                (*sZelda).unk_3C8 = 4 as libc::c_int as u8_0;
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x50 as libc::c_int as u8_0);
            }
            current_block_599 = 1413697737627625973;
        }
        4 => {
            (*this).unk_339 = 4 as libc::c_int as s8;
            Math_ApproachF(&mut (*this).unk_3A4.x, -360.0f32, 0.1f32,
                           (*this).unk_410.x * 1290.0f32);
            Math_ApproachF(&mut (*this).unk_3A4.z, -20.0f32, 0.1f32,
                           (*this).unk_410.x * 170.0f32);
            Math_ApproachF(&mut (*this).unk_410.x, 0.04f32, 1.0f32,
                           0.0005f32);
            if (*this).unk_398 == 100 as libc::c_int as libc::c_uint {
                let mut camera: *mut Camera =
                    Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16);
                (*camera).eye = (*this).unk_3A4;
                (*camera).eyeNext = (*this).unk_3A4;
                (*camera).at = (*this).unk_3B0;
                func_800C08AC(globalCtx, (*this).unk_39E,
                              0 as libc::c_int as s16);
                (*this).unk_39E = 0 as libc::c_int as s16;
                func_80064534(globalCtx, &mut (*globalCtx).csCtx);
                func_8002DF54(globalCtx, &mut (*this).actor,
                              7 as libc::c_int as u8_0);
                (*this).unk_39C = 5 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0
            }
            current_block_599 = 1413697737627625973;
        }
        5 => {
            (*this).unk_339 = 4 as libc::c_int as s8;
            if (*this).actor.xzDistToPlayer < 500.0f32 {
                Message_CloseTextbox(globalCtx);
                (*this).unk_39C = 10 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                func_80064520(globalCtx, &mut (*globalCtx).csCtx);
                (*this).unk_39E = Gameplay_CreateSubCamera(globalCtx);
                Gameplay_ChangeCameraStatus(globalCtx,
                                            0 as libc::c_int as s16,
                                            1 as libc::c_int as s16);
                Gameplay_ChangeCameraStatus(globalCtx, (*this).unk_39E,
                                            7 as libc::c_int as s16);
                current_block_599 = 643603858153977587;
            } else { current_block_599 = 1413697737627625973; }
        }
        10 => { current_block_599 = 643603858153977587; }
        11 => {
            (*this).unk_339 = 5 as libc::c_int as s8;
            func_80078884((0x381c as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            (*player).actor.world.pos.x = 490.0f32;
            (*player).actor.world.pos.y = 1086.0f32;
            (*player).actor.world.pos.z = -166.0f32;
            (*sZelda).actor.world.pos.x = 724.0f32;
            (*sZelda).actor.world.pos.y = 1086.0f32;
            (*sZelda).actor.world.pos.z = -186.0f32;
            (*player).actor.shape.rot.y = -(0x4000 as libc::c_int) as s16;
            (*sZelda).actor.shape.rot.y = -(0x5000 as libc::c_int) as s16;
            (*this).unk_3A4.x = 450.0f32;
            (*this).unk_3A4.y = 1121.0f32;
            (*this).unk_3A4.z = -158.0f32;
            (*this).unk_3B0.x =
                (*player).actor.world.pos.x - 20.0f32 + 2.0f32;
            (*this).unk_3B0.y =
                (*player).actor.world.pos.y + 200.0f32 - 151.0f32 - 2.0f32;
            (*this).unk_3B0.z = (*player).actor.world.pos.z + 2.0f32;
            if (*this).unk_398 == 10 as libc::c_int as libc::c_uint {
                func_80078914(&mut D_80906D6C,
                              0x281d as libc::c_int as u16_0);
            }
            if (*this).unk_398 == 20 as libc::c_int as libc::c_uint {
                func_80078884(0x281d as libc::c_int as u16_0);
            }
            if (*this).unk_398 == 30 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x52 as libc::c_int as u8_0);
            }
            if (*this).unk_398 == 50 as libc::c_int as libc::c_uint {
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_39C = 12 as libc::c_int as s16;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon_anime3_Anim_002168,
                                          0.0f32);
                (*this).unk_194 =
                    Animation_GetLastFrame(&mut object_ganon_anime3_Anim_002168
                                               as *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                (*this).actor.world.pos.z = -200.0f32;
                (*this).actor.world.pos.x = (*this).actor.world.pos.z;
                (*this).actor.world.pos.y = 1009.0f32;
                (*this).actor.shape.yOffset = 7000.0f32;
                (*this).actor.world.rot.y = 0x5000 as libc::c_int as s16;
                (*this).unk_3A4.x = -60.0f32;
                (*this).unk_3A4.y = 1106.0f32;
                (*this).unk_3A4.z = -200.0f32;
                (*this).unk_3B0.z = -200.0f32;
                (*this).unk_3B0.x = (*this).unk_3B0.z;
                (*this).unk_3B0.y = (*this).actor.world.pos.y + 70.0f32;
                (*globalCtx).envCtx.unk_D8 = 0.0f32;
                (*globalCtx).envCtx.unk_BD = 0 as libc::c_int as u8_0;
                (*globalCtx).envCtx.unk_BE = (*globalCtx).envCtx.unk_BD;
                (*this).unk_339 = 0 as libc::c_int as s8;
                current_block_599 = 14026816289903752430;
            } else { current_block_599 = 1413697737627625973; }
        }
        12 | 13 => { current_block_599 = 14026816289903752430; }
        14 => { current_block_599 = 10433015008054693148; }
        15 => {
            if (*globalCtx).gameplayFrames.wrapping_rem(32 as libc::c_int as
                                                            libc::c_uint) ==
                   0 as libc::c_int as libc::c_uint &&
                   (*this).unk_398 < 100 as libc::c_int as libc::c_uint {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d1 as libc::c_int as u16_0);
            }
            SkelAnime_Update(&mut (*this).skelAnime);
            Math_ApproachF(&mut (*this).unk_3B0.y,
                           (*this).actor.world.pos.y + 77.0f32, 0.05f32,
                           5.0f32);
            if (*this).unk_398 >= 50 as libc::c_int as libc::c_uint {
                if (*this).unk_398 == 50 as libc::c_int as libc::c_uint {
                    Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                              &mut object_ganon_anime3_Anim_000BFC,
                                              0.0f32);
                    (*this).unk_194 =
                        Animation_GetLastFrame(&mut object_ganon_anime3_Anim_000BFC
                                                   as *mut AnimationHeader as
                                                   *mut libc::c_void) as
                            f32_0;
                    (*this).unk_314 = 3 as libc::c_int as u8_0
                }
                if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194)
                       != 0 {
                    Animation_MorphToLoop(&mut (*this).skelAnime,
                                          &mut object_ganon_anime3_Anim_003F38,
                                          0.0f32);
                    (*this).unk_194 = 1000.0f32
                }
            }
            if (*this).unk_398 > 70 as libc::c_int as libc::c_uint {
                Math_ApproachF(&mut (*this).unk_1B4, 255.0f32, 1.0f32,
                               10.0f32);
            }
            if (*this).unk_398 == 140 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 16 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon_anime3_Anim_003754,
                                          0.0f32);
                (*this).unk_194 =
                    Animation_GetLastFrame(&mut object_ganon_anime3_Anim_003754
                                               as *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                (*this).unk_339 = 55 as libc::c_int as s8;
                (*globalCtx).envCtx.unk_D8 = 1.0f32;
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d3 as libc::c_int as u16_0);
                current_block_599 = 4217900976592759659;
            } else { current_block_599 = 1413697737627625973; }
        }
        16 => { current_block_599 = 4217900976592759659; }
        17 => {
            (*this).unk_339 = 6 as libc::c_int as s8;
            SkelAnime_Update(&mut (*this).skelAnime);
            (*this).unk_3A4.x = (*player).actor.world.pos.x - 40.0f32;
            (*this).unk_3A4.y = (*player).actor.world.pos.y + 40.0f32;
            (*this).unk_3A4.z = (*player).actor.world.pos.z + 20.0f32;
            (*this).unk_3B0.x = (*player).actor.world.pos.x;
            (*this).unk_3B0.y =
                (*player).actor.world.pos.y + 10.0f32 + 60.0f32 - 30.0f32;
            (*this).unk_3B0.z = (*player).actor.world.pos.z;
            if (*this).unk_398 == 25 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 18 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon_anime3_Anim_010380,
                                          0.0f32);
                (*this).skelAnime.playSpeed = 0.0f32;
                (*this).unk_3A4.x =
                    (*this).actor.world.pos.x + 500.0f32 - 350.0f32 - 50.0f32;
                (*this).unk_3A4.y = (*this).actor.world.pos.y;
                (*this).unk_3A4.z = (*this).actor.world.pos.z;
                (*this).unk_3B0.x = (*this).actor.world.pos.x + 50.0f32;
                (*this).unk_3B0.y = (*this).actor.world.pos.y + 60.0f32;
                (*this).unk_3B0.z = (*this).actor.world.pos.z;
                (*this).actor.world.rot.y = 0x4000 as libc::c_int as s16
            }
            current_block_599 = 1413697737627625973;
        }
        18 => {
            (*this).unk_339 = 6 as libc::c_int as s8;
            if (*this).unk_398 == 30 as libc::c_int as libc::c_uint {
                Audio_QueueSeqCmd(((SEQ_PLAYER_BGM_MAIN as libc::c_int) <<
                                       24 as libc::c_int |
                                       0x65 as libc::c_int) as u32_0);
            }
            Math_ApproachF(&mut (*this).unk_30C, 7.0f32, 1.0f32, 0.1f32);
            Math_ApproachF(&mut (*this).unk_3A4.x,
                           (*this).actor.world.pos.x + 500.0f32 - 350.0f32,
                           0.1f32, 1.0f32);
            Math_ApproachF(&mut (*this).unk_3B0.x, (*this).actor.world.pos.x,
                           0.1f32, 1.0f32);
            Math_ApproachF(&mut (*this).unk_228, 1.0f32, 0.1f32, 0.02f32);
            if (*this).unk_398 == 65 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 19 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0
            }
            current_block_599 = 1413697737627625973;
        }
        19 => {
            (*this).unk_394 += 0.5f32;
            (*this).unk_339 = 6 as libc::c_int as s8;
            (*this).actor.world.pos.y += (*this).actor.velocity.y;
            (*this).actor.velocity.y -= 1.0f32;
            if (*this).unk_398 == 10 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 20 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).actor.world.pos.x +=
                    250 as libc::c_int as libc::c_float;
                (*this).actor.world.pos.y = 1886.0f32;
                (*this).unk_394 = 0.0f32;
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x53 as libc::c_int as u8_0);
                (*this).unk_30C = 5.0f32;
                (*this).unk_228 = 1.0f32
            }
            current_block_599 = 1413697737627625973;
        }
        20 => {
            (*this).unk_339 = 6 as libc::c_int as s8;
            SkelAnime_Update(&mut (*this).skelAnime);
            (*this).actor.world.pos.y += (*this).actor.velocity.y;
            (*this).actor.velocity.y -= 1.0f32;
            (*player).actor.world.pos.x = 250.0f32;
            (*player).actor.world.pos.y = 1086.0f32;
            (*player).actor.world.pos.z = -266.0f32;
            (*player).actor.shape.rot.y = -(0x4000 as libc::c_int) as s16;
            (*this).unk_3A4.x =
                (*player).actor.world.pos.x - 40.0f32 - 200.0f32;
            (*this).unk_3A4.y =
                (*player).actor.world.pos.y + 40.0f32 - 30.0f32;
            (*this).unk_3A4.z =
                (*player).actor.world.pos.z - 20.0f32 + 100.0f32;
            (*this).unk_3B0.x = (*player).actor.world.pos.x;
            (*this).unk_3B0.y =
                (*player).actor.world.pos.y + 10.0f32 + 60.0f32 - 20.0f32 +
                    30.0f32;
            (*this).unk_3B0.z = (*player).actor.world.pos.z;
            (*this).unk_3BC.x = 0.8f32;
            if (*this).actor.world.pos.y <= 1099.0f32 {
                (*this).actor.world.pos.y = 1099.0f32;
                (*this).unk_39C = 21 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_420 = 10.0f32;
                (*this).actor.velocity.y = 0.0f32;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon_anime3_Anim_010380,
                                          0.0f32);
                func_808FD4D4(this, globalCtx, 0 as libc::c_int as s16,
                              3 as libc::c_int as s16);
                func_800A9F6C(0.0f32, 0xc8 as libc::c_int as u8_0,
                              0x14 as libc::c_int as u8_0,
                              0x14 as libc::c_int as u8_0);
            }
            current_block_599 = 1413697737627625973;
        }
        21 => {
            (*this).unk_339 = 6 as libc::c_int as s8;
            SkelAnime_Update(&mut (*this).skelAnime);
            (*this).unk_41C =
                Math_CosS((*globalCtx).gameplayFrames.wrapping_mul(0x8000 as
                                                                       libc::c_int
                                                                       as
                                                                       libc::c_uint)
                              as s16) * (*this).unk_420;
            Math_ApproachZeroF(&mut (*this).unk_420, 1.0f32, 0.75f32);
            if (*this).unk_398 == 30 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 22 as libc::c_int as s16;
                (*this).unk_30C = 10.0f32;
                current_block_599 = 9322584641567792192;
            } else { current_block_599 = 1413697737627625973; }
        }
        22 => { current_block_599 = 9322584641567792192; }
        23 => {
            SkelAnime_Update(&mut (*this).skelAnime);
            if (*this).unk_398 > 222 as libc::c_int as libc::c_uint &&
                   (*this).unk_398 < 232 as libc::c_int as libc::c_uint {
                (*this).unk_312 = 2 as libc::c_int as u8_0
            }
            if (*this).unk_398 == 222 as libc::c_int as libc::c_uint {
                func_80078884(0x3997 as libc::c_int as u16_0);
                func_80078884(0x398f as libc::c_int as u16_0);
            }
            (*this).unk_3A4.x =
                (*player).actor.world.pos.x - 40.0f32 + 6.0f32;
            (*this).unk_3A4.y = (*player).actor.world.pos.y + 40.0f32;
            (*this).unk_3A4.z =
                (*player).actor.world.pos.z + 20.0f32 - 7.0f32;
            (*this).unk_3B0.x = (*player).actor.world.pos.x;
            (*this).unk_3B0.y =
                (*player).actor.world.pos.y + 10.0f32 + 60.0f32 - 20.0f32 -
                    2.0f32;
            (*this).unk_3B0.z = (*player).actor.world.pos.z;
            if (*this).unk_398 == 228 as libc::c_int as libc::c_uint {
                func_80078884(0x1808 as libc::c_int as u16_0);
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x56 as libc::c_int as u8_0);
                func_800A9F6C(0.0f32, 0xff as libc::c_int as u8_0,
                              0xa as libc::c_int as u8_0,
                              0x32 as libc::c_int as u8_0);
            }
            if (*this).unk_398 >= 229 as libc::c_int as libc::c_uint {
                (*globalCtx).envCtx.fillScreen = 1 as libc::c_int as u8_0;
                (*globalCtx).envCtx.screenFillColor[2 as libc::c_int as usize]
                    = 255 as libc::c_int as u8_0;
                (*globalCtx).envCtx.screenFillColor[1 as libc::c_int as usize]
                    =
                    (*globalCtx).envCtx.screenFillColor[2 as libc::c_int as
                                                            usize];
                (*globalCtx).envCtx.screenFillColor[0 as libc::c_int as usize]
                    =
                    (*globalCtx).envCtx.screenFillColor[1 as libc::c_int as
                                                            usize];
                (*globalCtx).envCtx.screenFillColor[3 as libc::c_int as usize]
                    = 100 as libc::c_int as u8_0;
                if (*this).unk_398 == 234 as libc::c_int as libc::c_uint {
                    let mut sp68: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
                    (*globalCtx).envCtx.fillScreen = 0 as libc::c_int as u8_0;
                    (*this).unk_39C = 24 as libc::c_int as s16;
                    (*this).unk_398 = 0 as libc::c_int as u32_0;
                    sp68 = (*player).actor.world.pos;
                    sp68.y += 60.0f32;
                    func_808FD210(globalCtx, &mut sp68);
                    (*globalCtx).envCtx.unk_D8 = 0.0f32;
                    (*globalCtx).envCtx.unk_BE = 0 as libc::c_int as u8_0;
                    (*this).unk_339 = 0 as libc::c_int as s8
                }
            }
            current_block_599 = 1413697737627625973;
        }
        24 => {
            SkelAnime_Update(&mut (*this).skelAnime);
            let mut effect: *mut BossGanon2Effect =
                (*globalCtx).specialEffects as *mut BossGanon2Effect;
            (*this).unk_3B0 = (*effect).position;
            (*this).unk_3A4.x = (*effect).position.x + 70.0f32;
            (*this).unk_3A4.y = (*effect).position.y - 30.0f32;
            (*this).unk_3A4.z = (*effect).position.z + 70.0f32;
            if (*this).unk_398 & 3 as libc::c_int as libc::c_uint ==
                   0 as libc::c_int as libc::c_uint {
                func_80078884(0x1801 as libc::c_int as u16_0);
            }
            if (*this).unk_398 == 25 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x57 as libc::c_int as u8_0);
                (*this).unk_39C = 25 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0
            }
            current_block_599 = 1413697737627625973;
        }
        25 => {
            SkelAnime_Update(&mut (*this).skelAnime);
            (*this).unk_3A4.x =
                (*player).actor.world.pos.x - 40.0f32 + 80.0f32;
            (*this).unk_3A4.y =
                (*player).actor.world.pos.y + 40.0f32 + 10.0f32;
            (*this).unk_3A4.z =
                (*player).actor.world.pos.z + 20.0f32 + 10.0f32;
            (*this).unk_3B0.x = (*player).actor.world.pos.x - 20.0f32;
            (*this).unk_3B0.y =
                (*player).actor.world.pos.y + 10.0f32 + 60.0f32 - 20.0f32 -
                    3.0f32;
            (*this).unk_3B0.z =
                (*player).actor.world.pos.z - 40.0f32 - 10.0f32;
            if (*this).unk_398 == 10 as libc::c_int as libc::c_uint {
                let mut effect_0: *mut BossGanon2Effect =
                    (*globalCtx).specialEffects as *mut BossGanon2Effect;
                (*effect_0).unk_2E = 1 as libc::c_int as s16;
                (*effect_0).position.x =
                    (*sZelda).actor.world.pos.x + 50.0f32 + 10.0f32;
                (*effect_0).position.y =
                    (*sZelda).actor.world.pos.y + 350.0f32;
                (*effect_0).position.z =
                    (*sZelda).actor.world.pos.z - 25.0f32;
                (*effect_0).velocity.x = 0.0f32;
                (*effect_0).velocity.z = 0.0f32;
                (*effect_0).velocity.y = -30.0f32;
                (*this).unk_39C = 26 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                current_block_599 = 11542054629892852787;
            } else { current_block_599 = 1413697737627625973; }
        }
        26 => { current_block_599 = 11542054629892852787; }
        27 => {
            (*this).unk_3BC.z = 0.0f32;
            if (*this).unk_398 == 4 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x58 as libc::c_int as u8_0);
            }
            (*this).unk_3A4.x = (*player).actor.world.pos.x - 20.0f32;
            (*this).unk_3A4.y = (*player).actor.world.pos.y + 50.0f32;
            (*this).unk_3A4.z = (*player).actor.world.pos.z;
            (*this).unk_3B0.x = (*player).actor.world.pos.x;
            (*this).unk_3B0.y = (*player).actor.world.pos.y + 50.0f32;
            (*this).unk_3B0.z = (*player).actor.world.pos.z;
            if (*this).unk_398 == 26 as libc::c_int as libc::c_uint {
                D_8090EB30 =
                    (*globalCtx).actorCtx.actorLists[ACTORCAT_ITEMACTION as
                                                         libc::c_int as
                                                         usize].head;
                while !D_8090EB30.is_null() {
                    if (*D_8090EB30).id as libc::c_int ==
                           ACTOR_EN_ELF as libc::c_int {
                        (*this).unk_3A4.x =
                            (*D_8090EB30).world.pos.x - 30.0f32;
                        (*this).unk_3A4.y = (*D_8090EB30).world.pos.y;
                        (*this).unk_3A4.z = (*D_8090EB30).world.pos.z;
                        (*this).unk_3B0.x = (*D_8090EB30).world.pos.x;
                        (*this).unk_3B0.y = (*D_8090EB30).world.pos.y;
                        (*this).unk_3B0.z = (*D_8090EB30).world.pos.z;
                        break ;
                    } else { D_8090EB30 = (*D_8090EB30).next }
                }
                (*this).unk_39C = 28 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0
            }
            current_block_599 = 1413697737627625973;
        }
        28 => {
            if (*this).unk_398 == 5 as libc::c_int as libc::c_uint {
                Message_StartTextbox(globalCtx,
                                     0x70d6 as libc::c_int as u16_0,
                                     0 as *mut Actor);
            }
            if !D_8090EB30.is_null() {
                (*this).unk_3A4.x = (*D_8090EB30).world.pos.x - 20.0f32;
                (*this).unk_3A4.y = (*D_8090EB30).world.pos.y;
                (*this).unk_3A4.z = (*D_8090EB30).world.pos.z;
                Math_ApproachF(&mut (*this).unk_3B0.x,
                               (*D_8090EB30).world.pos.x, 0.2f32, 50.0f32);
                Math_ApproachF(&mut (*this).unk_3B0.y,
                               (*D_8090EB30).world.pos.y, 0.2f32, 50.0f32);
                Math_ApproachF(&mut (*this).unk_3B0.z,
                               (*D_8090EB30).world.pos.z, 0.2f32, 50.0f32);
                if (*this).unk_398 > 40 as libc::c_int as libc::c_uint &&
                       Message_GetState(&mut (*globalCtx).msgCtx) as
                           libc::c_int == TEXT_STATE_NONE as libc::c_int {
                    (*this).unk_39C = 29 as libc::c_int as s16;
                    (*this).unk_398 = 0 as libc::c_int as u32_0;
                    Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                              &mut object_ganon_anime3_Anim_0147E0,
                                              0.0f32);
                    (*this).unk_194 =
                        Animation_GetLastFrame(&mut object_ganon_anime3_Anim_0147E0
                                                   as *mut AnimationHeader as
                                                   *mut libc::c_void) as
                            f32_0;
                    (*this).actor.shape.yOffset = 0.0f32;
                    (*this).actor.world.pos.y = 1086.0f32;
                    (*this).actor.gravity = -1.0f32;
                    (*this).unk_335 = 1 as libc::c_int as u8_0;
                    (*this).unk_224 = 1.0f32
                }
            }
            current_block_599 = 1413697737627625973;
        }
        29 => {
            SkelAnime_Update(&mut (*this).skelAnime);
            (*this).unk_3A4.x =
                (*this).actor.world.pos.x + 500.0f32 - 350.0f32 + 100.0f32 -
                    60.0f32;
            (*this).unk_3B0.x = (*this).actor.world.pos.x;
            (*this).unk_3B0.z = (*this).actor.world.pos.z;
            (*this).unk_3A4.y = (*this).actor.world.pos.y;
            (*this).unk_3A4.z = (*this).actor.world.pos.z + 10.0f32;
            (*this).unk_3B0.y = (*this).unk_1B8.y + 60.0f32 - 40.0f32;
            (*player).actor.shape.rot.y = -(0x4000 as libc::c_int) as s16;
            (*player).actor.world.pos.x = 140.0f32;
            (*player).actor.world.pos.z = -196.0f32;
            if (*this).unk_398 == 50 as libc::c_int as libc::c_uint {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x398f as libc::c_int as u16_0);
            }
            if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194) != 0
               {
                let mut camera_1: *mut Camera =
                    Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16);
                (*camera_1).eye = (*this).unk_3A4;
                (*camera_1).eyeNext = (*this).unk_3A4;
                (*camera_1).at = (*this).unk_3B0;
                func_800C08AC(globalCtx, (*this).unk_39E,
                              0 as libc::c_int as s16);
                (*this).unk_39E = 0 as libc::c_int as s16;
                func_80064534(globalCtx, &mut (*globalCtx).csCtx);
                func_8002DF54(globalCtx, &mut (*this).actor,
                              7 as libc::c_int as u8_0);
                (*this).unk_39C = 0 as libc::c_int as s16;
                (*this).unk_337 = 1 as libc::c_int as u8_0;
                func_808FFDB0(this, globalCtx);
                (*this).unk_1A2[1 as libc::c_int as usize] =
                    50 as libc::c_int as s16;
                (*this).actor.flags |=
                    ((1 as libc::c_int) << 0 as libc::c_int) as libc::c_uint;
                (*sZelda).unk_3C8 = 7 as libc::c_int as u8_0
            }
            current_block_599 = 1413697737627625973;
        }
        _ => { current_block_599 = 1413697737627625973; }
    }
    match current_block_599 {
        11542054629892852787 => {
            (*this).unk_3A4.x =
                (*sZelda).actor.world.pos.x + 100.0f32 + 30.0f32;
            (*this).unk_3A4.y = (*sZelda).actor.world.pos.y + 10.0f32;
            (*this).unk_3A4.z = (*sZelda).actor.world.pos.z + 5.0f32;
            (*this).unk_3B0.x = (*sZelda).actor.world.pos.x;
            (*this).unk_3B0.y = (*sZelda).actor.world.pos.y + 30.0f32;
            (*this).unk_3B0.z = (*sZelda).actor.world.pos.z - 20.0f32;
            (*this).unk_3BC.z = -0.5f32;
            if (*this).unk_398 == 13 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 6 as libc::c_int as u8_0
            }
            if (*this).unk_398 == 50 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 27 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0
            }
            current_block_599 = 1413697737627625973;
        }
        9322584641567792192 => {
            if (*this).unk_398 < 60 as libc::c_int as libc::c_uint {
                (*this).unk_339 = 7 as libc::c_int as s8
            }
            (*this).unk_3BC.x = 0.0f32;
            (*this).actor.world.pos.y = 1099.0f32;
            SkelAnime_Update(&mut (*this).skelAnime);
            Math_ApproachZeroF(&mut (*this).unk_30C, 1.0f32, 0.1f32);
            if (*this).unk_398 > 50 as libc::c_int as libc::c_uint {
                Math_ApproachF(&mut (*this).unk_224, 1.0f32, 1.0f32,
                               0.025f32);
            }
            if (*this).unk_398 == 60 as libc::c_int as libc::c_uint {
                (*this).unk_336 = 2 as libc::c_int as u8_0
            }
            if (*this).unk_398 == 80 as libc::c_int as libc::c_uint {
                BossGanon2_SetObjectSegment(this, globalCtx,
                                            OBJECT_GANON2 as libc::c_int,
                                            0 as libc::c_int as u8_0);
                TitleCard_InitBossName(globalCtx,
                                       &mut (*globalCtx).actorCtx.titleCtx,
                                       gSegments[((object_ganon2_Tex_021A90.as_mut_ptr()
                                                       as u32_0) <<
                                                      4 as libc::c_int >>
                                                      28 as libc::c_int) as
                                                     usize].wrapping_add(object_ganon2_Tex_021A90.as_mut_ptr()
                                                                             as
                                                                             u32_0
                                                                             &
                                                                             0xffffff
                                                                                 as
                                                                                 libc::c_int
                                                                                 as
                                                                                 libc::c_uint).wrapping_add(0x80000000
                                                                                                                as
                                                                                                                libc::c_uint)
                                           as *mut libc::c_void,
                                       160 as libc::c_int as s16,
                                       180 as libc::c_int as s16,
                                       128 as libc::c_int as u8_0,
                                       40 as libc::c_int as u8_0);
            }
            (*this).unk_3A4.x =
                (*this).actor.world.pos.x + 500.0f32 - 350.0f32 + 100.0f32;
            (*this).unk_3A4.y = (*this).actor.world.pos.y;
            (*this).unk_3A4.z = (*this).actor.world.pos.z;
            (*this).unk_3B0.x = (*this).actor.world.pos.x;
            (*this).unk_3B0.z = (*this).actor.world.pos.z;
            (*this).unk_3B0.y = (*this).unk_1B8.y + 60.0f32 - 40.0f32;
            if (*this).unk_398 > 166 as libc::c_int as libc::c_uint &&
                   (*this).unk_398 < 173 as libc::c_int as libc::c_uint {
                (*this).unk_312 = 2 as libc::c_int as u8_0
            }
            if (*this).unk_398 > 186 as libc::c_int as libc::c_uint &&
                   (*this).unk_398 < 196 as libc::c_int as libc::c_uint {
                (*this).unk_312 = 1 as libc::c_int as u8_0
            }
            if (*this).unk_398 > 202 as libc::c_int as libc::c_uint &&
                   (*this).unk_398 < 210 as libc::c_int as libc::c_uint {
                (*this).unk_312 = 2 as libc::c_int as u8_0
            }
            if (*this).unk_398 == 166 as libc::c_int as libc::c_uint ||
                   (*this).unk_398 == 185 as libc::c_int as libc::c_uint ||
                   (*this).unk_398 == 200 as libc::c_int as libc::c_uint {
                func_80078884(0x3997 as libc::c_int as u16_0);
                func_80078884(0x398f as libc::c_int as u16_0);
            }
            if (*this).unk_398 == 215 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 23 as libc::c_int as s16;
                (*this).unk_224 = 0.0f32;
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x55 as libc::c_int as u8_0);
            }
            current_block_599 = 1413697737627625973;
        }
        4217900976592759659 => {
            if (*this).unk_398 < 25 as libc::c_int as libc::c_uint {
                (*this).unk_339 = 55 as libc::c_int as s8
            } else {
                (*this).unk_339 = 6 as libc::c_int as s8;
                if (*this).unk_194 > 100.0f32 {
                    Math_ApproachF(&mut (*this).unk_30C, 15.0f32, 1.0f32,
                                   2.0f32);
                } else {
                    Math_ApproachF(&mut (*this).unk_30C, 7.0f32, 1.0f32,
                                   0.2f32);
                }
            }
            (*this).unk_1B4 = 0.0f32;
            SkelAnime_Update(&mut (*this).skelAnime);
            if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194) != 0
               {
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon_anime3_Anim_0028A8,
                                          0.0f32);
                (*this).unk_194 = 1000.0f32
            }
            Math_ApproachF(&mut (*this).unk_3A4.x,
                           (*this).actor.world.pos.x + 200.0f32 - 90.0f32,
                           0.1f32, 6.3999996f32);
            Math_ApproachF(&mut (*this).unk_3A4.y,
                           (*this).actor.world.pos.y + 60.0f32 - 60.0f32 -
                               70.0f32, 0.1f32, 13.0f32);
            Math_ApproachF(&mut (*this).unk_3B0.y,
                           (*this).actor.world.pos.y + 40.0f32, 0.1f32,
                           3.6999998f32);
            if (*this).unk_398 == 30 as libc::c_int as libc::c_uint {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d4 as libc::c_int as u16_0);
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x396d as libc::c_int as u16_0);
            }
            if (*this).unk_398 <= 50 as libc::c_int as libc::c_uint {
                sp8D = 1 as libc::c_int as u8_0
            }
            if (*this).unk_398 >= 60 as libc::c_int as libc::c_uint {
                let mut camera_0: *mut Camera =
                    Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16);
                (*camera_0).eye = (*this).unk_3A4;
                (*camera_0).eyeNext = (*this).unk_3A4;
                (*camera_0).at = (*this).unk_3B0;
                (*this).unk_39C = 17 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_337 = 2 as libc::c_int as u8_0;
                BossGanon2_SetObjectSegment(this, globalCtx,
                                            OBJECT_GANON2 as libc::c_int,
                                            0 as libc::c_int as u8_0);
                SkelAnime_Free(&mut (*this).skelAnime, globalCtx);
                SkelAnime_InitFlex(globalCtx, &mut (*this).skelAnime,
                                   &mut object_ganon2_Skel_025970,
                                   0 as *mut AnimationHeader, 0 as *mut Vec3s,
                                   0 as *mut Vec3s, 0 as libc::c_int);
                BossGanon2_SetObjectSegment(this, globalCtx,
                                            OBJECT_GANON_ANIME3 as
                                                libc::c_int,
                                            0 as libc::c_int as u8_0);
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x54 as libc::c_int as u8_0);
                (*this).unk_314 = 3 as libc::c_int as u8_0
            }
            // fake, tricks the compiler into using stack the way we need it to
            if zero != 0 {
                Math_ApproachF(&mut (*this).unk_3B0.y, 0.0f32, 0.0f32,
                               0.0f32);
            }
            current_block_599 = 1413697737627625973;
        }
        14026816289903752430 => {
            SkelAnime_Update(&mut (*this).skelAnime);
            if (*this).unk_398 == 30 as libc::c_int as libc::c_uint {
                D_80906D78 = 1 as libc::c_int as u8_0;
                (*this).unk_314 = 1 as libc::c_int as u8_0;
                func_800A9F6C(0.0f32, 0xc8 as libc::c_int as u8_0,
                              0x14 as libc::c_int as u8_0,
                              0x14 as libc::c_int as u8_0);
            }
            if (*this).unk_398 == 30 as libc::c_int as libc::c_uint {
                func_80078884(0x28c2 as libc::c_int as u16_0);
            }
            if (*this).unk_398 >= 30 as libc::c_int as libc::c_uint {
                Math_ApproachF(&mut (*this).actor.world.pos.y, 1289.0f32,
                               0.1f32, 10.0f32);
                (*this).unk_3B0.y = (*this).actor.world.pos.y + 70.0f32
            }
            if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194) != 0
               {
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon_anime3_Anim_002E6C,
                                      0.0f32);
                (*this).unk_39C = 14 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).actor.world.pos.x = -200.0f32;
                (*this).actor.world.pos.y =
                    (*this).actor.world.pos.y - 30.0f32;
                (*this).actor.world.pos.z = -200.0f32;
                Audio_QueueSeqCmd(((SEQ_PLAYER_BGM_MAIN as libc::c_int) <<
                                       24 as libc::c_int |
                                       0x23 as libc::c_int) as u32_0);
                current_block_599 = 10433015008054693148;
            } else { current_block_599 = 1413697737627625973; }
        }
        643603858153977587 => {
            (*player).actor.world.pos.x = 490.0f32;
            (*player).actor.world.pos.y = 1086.0f32;
            (*player).actor.world.pos.z = -166.0f32;
            (*sZelda).actor.world.pos.x = 724.0f32;
            (*sZelda).actor.world.pos.y = 1086.0f32;
            (*sZelda).actor.world.pos.z = -186.0f32;
            (*player).actor.shape.rot.y = -(0x4000 as libc::c_int) as s16;
            (*sZelda).actor.shape.rot.y = -(0x5000 as libc::c_int) as s16;
            (*this).unk_3A4.x = 410.0f32;
            (*this).unk_3A4.y = 1096.0f32;
            (*this).unk_3A4.z = -110.0f32;
            (*this).unk_3B0.x = (*player).actor.world.pos.x + 10.0f32;
            (*this).unk_3B0.y =
                (*player).actor.world.pos.y + 200.0f32 - 160.0f32;
            (*this).unk_3B0.z = (*player).actor.world.pos.z;
            if (*this).unk_398 >= 20 as libc::c_int as libc::c_uint {
                func_80078884((0x381c as libc::c_int - 0x800 as libc::c_int)
                                  as u16_0);
                Math_ApproachF(&mut (*this).unk_324, 255.0f32, 1.0f32,
                               10.0f32);
                (*this).unk_339 = 5 as libc::c_int as s8;
                if (*this).unk_398 == 20 as libc::c_int as libc::c_uint {
                    (*this).unk_33C = 0.0f32;
                    (*globalCtx).envCtx.unk_D8 = 0.0f32
                }
            } else { (*this).unk_339 = 4 as libc::c_int as s8 }
            if (*this).unk_398 == 30 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 5 as libc::c_int as u8_0;
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x51 as libc::c_int as u8_0);
            }
            if (*this).unk_398 == 50 as libc::c_int as libc::c_uint {
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_39C = 11 as libc::c_int as s16
            }
            current_block_599 = 1413697737627625973;
        }
        15735329692871936256 => {
            if (*this).unk_398 < 70 as libc::c_int as libc::c_uint {
                (*globalCtx).envCtx.unk_D8 = 0.0f32
            }
            (*this).unk_339 = 3 as libc::c_int as s8;
            Math_ApproachF(&mut (*this).unk_3A4.x, 1500.0f32, 0.1f32,
                           (*this).unk_410.x * 1500.0f32);
            Math_ApproachF(&mut (*this).unk_3A4.z, -160.0f32, 0.1f32,
                           (*this).unk_410.x * 1760.0f32);
            Math_ApproachF(&mut (*this).unk_410.x, 0.0075f32, 1.0f32,
                           0.0001f32);
            (*this).unk_3B0.x = -200.0f32;
            (*this).unk_3B0.y = 1086.0f32;
            (*this).unk_3B0.z = -200.0f32;
            if (*this).unk_398 == 150 as libc::c_int as libc::c_uint {
                Message_StartTextbox(globalCtx,
                                     0x70d3 as libc::c_int as u16_0,
                                     0 as *mut Actor);
            }
            if (*this).unk_398 > 250 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                (*this).unk_39C = 2 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_410.x = 0.0f32;
                (*globalCtx).envCtx.unk_D8 = 1.0f32;
                current_block_599 = 18442378986915135212;
            } else { current_block_599 = 1413697737627625973; }
        }
        _ => { }
    }
    match current_block_599 {
        10433015008054693148 => {
            SkelAnime_Update(&mut (*this).skelAnime);
            Math_ApproachF(&mut (*this).actor.world.pos.y, 1289.0f32, 0.05f32,
                           1.0f32);
            (*player).actor.world.pos.x = 250.0f32;
            (*player).actor.world.pos.y = 1086.0f32;
            (*player).actor.world.pos.z = -266.0f32;
            (*player).actor.shape.rot.y = -(0x4000 as libc::c_int) as s16;
            (*sZelda).actor.world.pos.x = 724.0f32;
            (*sZelda).actor.world.pos.y = 1086.0f32;
            (*sZelda).actor.world.pos.z = -186.0f32;
            (*this).unk_3A4.x = (*this).actor.world.pos.x + -10.0f32;
            (*this).unk_3A4.y = (*this).actor.world.pos.y + 80.0f32;
            (*this).unk_3A4.z = (*this).actor.world.pos.z + 50.0f32;
            (*this).unk_3B0.x = (*player).actor.world.pos.x;
            (*this).unk_3B0.y = (*player).actor.world.pos.y;
            (*this).unk_3B0.z = (*player).actor.world.pos.z - 200.0f32;
            if (*this).unk_398 == 20 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x1e as libc::c_int as u8_0);
            }
            if (*this).unk_398 == 60 as libc::c_int as libc::c_uint {
                (*this).unk_3A4.x =
                    (*this).actor.world.pos.x + 200.0f32 - 154.0f32;
                (*this).unk_3A4.y = (*this).actor.world.pos.y + 60.0f32;
                (*this).unk_3A4.z = (*this).actor.world.pos.z - 15.0f32;
                (*this).unk_39C = 15 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_3B0.y =
                    (*this).actor.world.pos.y + 77.0f32 + 100.0f32;
                (*this).unk_314 = 2 as libc::c_int as u8_0;
                (*this).unk_3B0.z = (*this).actor.world.pos.z + 5.0f32;
                (*this).unk_3B0.x = (*this).actor.world.pos.x
            }
            if (*globalCtx).gameplayFrames.wrapping_rem(32 as libc::c_int as
                                                            libc::c_uint) ==
                   0 as libc::c_int as libc::c_uint {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d1 as libc::c_int as u16_0);
            }
        }
        18442378986915135212 => {
            (*this).unk_339 = 4 as libc::c_int as s8;
            (*player).actor.world.pos.x = 970.0f32;
            (*player).actor.world.pos.y = 1086.0f32;
            (*player).actor.world.pos.z = -166.0f32;
            (*sZelda).actor.world.pos.x = 974.0f32;
            (*sZelda).actor.world.pos.y = 1086.0f32;
            (*sZelda).actor.world.pos.z = -186.0f32;
            (*player).actor.shape.rot.y = -(0x5000 as libc::c_int) as s16;
            (*sZelda).actor.shape.rot.y = -(0x5000 as libc::c_int) as s16;
            if (*this).unk_398 == 60 as libc::c_int as libc::c_uint {
                Message_StartTextbox(globalCtx,
                                     0x70d4 as libc::c_int as u16_0,
                                     0 as *mut Actor);
            }
            if (*this).unk_398 == 40 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 1 as libc::c_int as u8_0;
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x4e as libc::c_int as u8_0);
            }
            if (*this).unk_398 == 85 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 2 as libc::c_int as u8_0;
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x4f as libc::c_int as u8_0);
            }
            (*this).unk_3A4.x = 930.0f32;
            (*this).unk_3A4.y = 1129.0f32;
            (*this).unk_3A4.z = -181.0f32;
            (*this).unk_3B0.x = (*player).actor.world.pos.x;
            (*this).unk_3B0.z =
                (*player).actor.world.pos.z - 15.0f32 + 5.0f32;
            if (*this).unk_398 > 104 as libc::c_int as libc::c_uint {
                Math_ApproachF(&mut (*this).unk_3B0.y,
                               (*player).actor.world.pos.y + 47.0f32 + 7.0f32
                                   + 15.0f32, 0.1f32, (*this).unk_410.x);
                Math_ApproachF(&mut (*this).unk_410.x, 2.0f32, 1.0f32,
                               0.1f32);
            } else {
                (*this).unk_3B0.y =
                    (*player).actor.world.pos.y + 47.0f32 + 7.0f32
            }
            if (*this).unk_398 > 170 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                (*this).unk_39C = 3 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_410.x = 0.0f32
            }
        }
        _ => { }
    }
    if (*this).unk_30C > 4.0f32 && sp8D == 0 {
        Audio_PlayActorSound2(&mut (*this).actor,
                              (0x3963 as libc::c_int - 0x800 as libc::c_int)
                                  as u16_0);
    }
    if (*this).unk_39E as libc::c_int != 0 as libc::c_int {
        // fake, tricks the compiler into putting some pointers on the stack
        if zero != 0 {
            osSyncPrintf(0 as *const libc::c_char, 0 as libc::c_int,
                         0 as libc::c_int);
        }
        (*this).unk_3B0.y += (*this).unk_41C;
        Gameplay_CameraSetAtEyeUp(globalCtx, (*this).unk_39E,
                                  &mut (*this).unk_3B0, &mut (*this).unk_3A4,
                                  &mut (*this).unk_3BC);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808FF898(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).unk_312 as libc::c_int != 0 as libc::c_int &&
           (*this).unk_39E as libc::c_int == 0 as libc::c_int {
        let mut actor: *mut Actor =
            (*globalCtx).actorCtx.actorLists[ACTORCAT_PROP as libc::c_int as
                                                 usize].head;
        while !actor.is_null() {
            if (*actor).id as libc::c_int == ACTOR_DEMO_GJ as libc::c_int {
                let mut gj: *mut DemoGj = actor as *mut DemoGj;
                if (*actor).params as libc::c_int & 0xff as libc::c_int ==
                       0x10 as libc::c_int ||
                       (*actor).params as libc::c_int & 0xff as libc::c_int ==
                           0x11 as libc::c_int ||
                       (*actor).params as libc::c_int & 0xff as libc::c_int ==
                           0x16 as libc::c_int {
                    if ((*this).unk_218.x - (*gj).dyna.actor.world.pos.x) *
                           ((*this).unk_218.x - (*gj).dyna.actor.world.pos.x)
                           +
                           ((*this).unk_218.z - (*gj).dyna.actor.world.pos.z)
                               *
                               ((*this).unk_218.z -
                                    (*gj).dyna.actor.world.pos.z) <
                           100.0f32 * 100.0f32 {
                        let mut pad: s32 = 0;
                        let mut sp28: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
                        Matrix_RotateY((*this).actor.shape.rot.y as
                                           libc::c_int as libc::c_float /
                                           0x8000 as libc::c_int as f32_0 *
                                           3.14159265358979323846f32 + 0.5f32,
                                       MTXMODE_NEW as libc::c_int as u8_0);
                        sp28.x = 0.0f32;
                        sp28.y = 0.0f32;
                        sp28.z = 1.0f32;
                        Matrix_MultVec3f(&mut sp28, &mut (*gj).unk_26C);
                        (*gj).killFlag = 1 as libc::c_int;
                        func_800A9F6C(0.0f32, 0x96 as libc::c_int as u8_0,
                                      0x14 as libc::c_int as u8_0,
                                      0x32 as libc::c_int as u8_0);
                        (*this).unk_392 = 6 as libc::c_int as s16;
                        return
                    }
                }
            }
            actor = (*actor).next
        }
        if (*this).unk_392 as libc::c_int == 4 as libc::c_int {
            func_80078884(0x28c2 as libc::c_int as u16_0);
        }
        if (*this).unk_392 as libc::c_int == 3 as libc::c_int {
            func_80078884(0x39df as libc::c_int as u16_0);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808FFA24(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext)
 -> s32 {
    let mut actor: *mut Actor =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PROP as libc::c_int as
                                             usize].head;
    while !actor.is_null() {
        if (*actor).id as libc::c_int == ACTOR_DEMO_GJ as libc::c_int {
            let mut gj: *mut DemoGj = actor as *mut DemoGj;
            if (*actor).params as libc::c_int & 0xff as libc::c_int ==
                   0x10 as libc::c_int ||
                   (*actor).params as libc::c_int & 0xff as libc::c_int ==
                       0x11 as libc::c_int ||
                   (*actor).params as libc::c_int & 0xff as libc::c_int ==
                       0x16 as libc::c_int {
                if ((*this).actor.world.pos.x - (*gj).dyna.actor.world.pos.x)
                       *
                       ((*this).actor.world.pos.x -
                            (*gj).dyna.actor.world.pos.x) +
                       ((*this).actor.world.pos.z -
                            (*gj).dyna.actor.world.pos.z) *
                           ((*this).actor.world.pos.z -
                                (*gj).dyna.actor.world.pos.z) <
                       200.0f32 * 200.0f32 {
                    return 1 as libc::c_int
                }
            }
        }
        actor = (*actor).next
    }
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn func_808FFAC8(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext,
                                       mut arg2: u8_0) {
    let mut temp_v1: s16 = 0;
    let mut phi_a1: s16 = 0;
    if (*this).unk_313 as libc::c_int != 0 ||
           arg2 as libc::c_int != 0 as libc::c_int {
        phi_a1 =
            ((*this).actor.shape.rot.y as libc::c_int -
                 (*this).actor.yawTowardsPlayer as libc::c_int) as s16;
        if phi_a1 as libc::c_int > 0x3000 as libc::c_int {
            phi_a1 = 0x3000 as libc::c_int as s16
        } else if (phi_a1 as libc::c_int) < -(0x3000 as libc::c_int) {
            phi_a1 = -(0x3000 as libc::c_int) as s16
        }
    } else if (*this).unk_19C as libc::c_int & 0x20 as libc::c_int != 0 {
        phi_a1 = 0x3000 as libc::c_int as s16
    } else { phi_a1 = -(0x3000 as libc::c_int) as s16 }
    Math_ApproachS(&mut (*this).unk_31A, phi_a1, 5 as libc::c_int as s16,
                   0x7d0 as libc::c_int as s16);
    temp_v1 =
        (Math_Atan2S((*this).actor.xzDistToPlayer, 150.0f32) as libc::c_int -
             0xbb8 as libc::c_int) as s16;
    temp_v1 =
        if temp_v1 as libc::c_int > 0x1b58 as libc::c_int {
            0x1b58 as libc::c_int
        } else { temp_v1 as libc::c_int } as s16;
    temp_v1 =
        if (temp_v1 as libc::c_int) < -(0x1b58 as libc::c_int) {
            -(0x1b58 as libc::c_int)
        } else { temp_v1 as libc::c_int } as s16;
    Math_ApproachS(&mut (*this).unk_31C, temp_v1, 5 as libc::c_int as s16,
                   0x7d0 as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_808FFBBC(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext,
                                       mut arg2: u8_0) {
    if arg2 as libc::c_int != 0 as libc::c_int ||
           (*this).unk_313 as libc::c_int != 0 {
        let mut phi_f0: f32_0 = 0.;
        let mut phi_f2: f32_0 = 0.;
        Math_ApproachS(&mut (*this).actor.world.rot.y,
                       (*this).actor.yawTowardsPlayer,
                       5 as libc::c_int as s16, (*this).unk_320 as s16);
        if (*this).unk_334 as libc::c_int != 0 as libc::c_int {
            phi_f0 = 5000.0f32;
            phi_f2 = 200.0f32
        } else { phi_f0 = 3000.0f32; phi_f2 = 30.0f32 }
        Math_ApproachF(&mut (*this).unk_320, phi_f0, 1.0f32, phi_f2);
    } else { (*this).unk_320 = 0.0f32 };
}
#[no_mangle]
pub unsafe extern "C" fn func_808FFC84(mut this: *mut BossGanon2) {
    if (if ((*this).actor.yawTowardsPlayer as libc::c_int -
                (*this).actor.shape.rot.y as libc::c_int) as s16 as
               libc::c_int >= 0 as libc::c_int {
            ((*this).actor.yawTowardsPlayer as libc::c_int -
                 (*this).actor.shape.rot.y as libc::c_int) as s16 as
                libc::c_int
        } else {
            -(((*this).actor.yawTowardsPlayer as libc::c_int -
                   (*this).actor.shape.rot.y as libc::c_int) as s16 as
                  libc::c_int)
        }) < 0x2800 as libc::c_int {
        (*this).unk_313 = 1 as libc::c_int as u8_0;
        (*this).actor.focus.pos = (*this).unk_1B8
    } else {
        (*this).unk_313 = 0 as libc::c_int as u8_0;
        (*this).actor.focus.pos = (*this).unk_1C4
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808FFCFC(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).actor.xzDistToPlayer < 150.0f32 &&
           (if ((*this).actor.yawTowardsPlayer as libc::c_int -
                    (*this).actor.shape.rot.y as libc::c_int) as s16 as
                   libc::c_int >= 0 as libc::c_int {
                ((*this).actor.yawTowardsPlayer as libc::c_int -
                     (*this).actor.shape.rot.y as libc::c_int) as s16 as
                    libc::c_int
            } else {
                -(((*this).actor.yawTowardsPlayer as libc::c_int -
                       (*this).actor.shape.rot.y as libc::c_int) as s16 as
                      libc::c_int)
            }) < 0x2800 as libc::c_int {
        (*this).unk_311 = 0 as libc::c_int as u8_0;
        func_80900580(this, globalCtx);
        Audio_StopSfxById(0x39d9 as libc::c_int as u32_0);
    } else if (*this).actor.bgCheckFlags as libc::c_int & 8 as libc::c_int !=
                  0 && func_808FFA24(this, globalCtx) != 0 {
        (*this).unk_311 = 0 as libc::c_int as u8_0;
        func_80900580(this, globalCtx);
        Audio_StopSfxById(0x39d9 as libc::c_int as u32_0);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808FFDB0(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp28: s32 = 0;
    let mut objectIdx: s32 =
        Object_GetIndex(&mut (*globalCtx).objectCtx,
                        OBJECT_GANON2 as libc::c_int as s16);
    if Object_IsLoaded(&mut (*globalCtx).objectCtx, objectIdx) != 0 {
        gSegments[6 as libc::c_int as usize] =
            ((*globalCtx).objectCtx.status[objectIdx as usize].segment as
                 u32_0).wrapping_add(0x80000000 as libc::c_uint) as
                *mut libc::c_void as u32_0;
        Animation_MorphToLoop(&mut (*this).skelAnime,
                              &mut object_ganon2_Anim_00FFE4, -10.0f32);
        (*this).actionFunc =
            Some(func_808FFEBC as
                     unsafe extern "C" fn(_: *mut BossGanon2,
                                          _: *mut GlobalContext) -> ());
        if (*this).unk_334 as libc::c_int != 0 as libc::c_int {
            (*this).unk_1A2[0 as libc::c_int as usize] =
                Rand_ZeroFloat(30.0f32) as s16
        } else {
            (*this).unk_1A2[0 as libc::c_int as usize] =
                40 as libc::c_int as s16
        }
        (*this).unk_336 = 1 as libc::c_int as u8_0;
        (*this).actor.flags |=
            ((1 as libc::c_int) << 0 as libc::c_int) as libc::c_uint;
        (*this).unk_228 = 1.0f32;
        (*this).unk_224 = 1.0f32
    } else {
        (*this).actionFunc =
            Some(func_808FFDB0 as
                     unsafe extern "C" fn(_: *mut BossGanon2,
                                          _: *mut GlobalContext) -> ())
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_808FFEBC(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).unk_390 as libc::c_int == 0 as libc::c_int {
        (*this).unk_390 =
            (Rand_ZeroFloat(50.0f32) as s16 as libc::c_int +
                 30 as libc::c_int) as s16;
        Audio_PlayActorSound2(&mut (*this).actor,
                              0x39d9 as libc::c_int as u16_0);
    }
    SkelAnime_Update(&mut (*this).skelAnime);
    Math_ApproachZeroF(&mut (*this).actor.speedXZ, 0.5f32, 1.0f32);
    if (*this).unk_1A2[0 as libc::c_int as usize] as libc::c_int ==
           0 as libc::c_int {
        func_809002CC(this, globalCtx);
    } else if (*this).unk_1A2[1 as libc::c_int as usize] as libc::c_int ==
                  0 as libc::c_int {
        func_808FFCFC(this, globalCtx);
    }
    func_808FFAC8(this, globalCtx, 0 as libc::c_int as u8_0);
    func_808FFBBC(this, globalCtx, 0 as libc::c_int as u8_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_808FFF90(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    Animation_MorphToLoop(&mut (*this).skelAnime,
                          &mut object_ganon2_Anim_00FFE4, -10.0f32);
    (*this).actionFunc =
        Some(func_808FFFE0 as
                 unsafe extern "C" fn(_: *mut BossGanon2,
                                      _: *mut GlobalContext) -> ());
    (*this).unk_1A2[0 as libc::c_int as usize] = 40 as libc::c_int as s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_808FFFE0(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut target: s16 = 0;
    SkelAnime_Update(&mut (*this).skelAnime);
    Math_ApproachZeroF(&mut (*this).actor.speedXZ, 0.5f32, 1.0f32);
    if (*this).unk_1A2[0 as libc::c_int as usize] as libc::c_int ==
           0 as libc::c_int {
        func_809002CC(this, globalCtx);
    }
    if ((*this).unk_1A2[0 as libc::c_int as usize] as libc::c_int) <
           30 as libc::c_int &&
           (*this).unk_1A2[0 as libc::c_int as usize] as libc::c_int >=
               10 as libc::c_int {
        target =
            (Math_SinS(((*this).unk_1A2[0 as libc::c_int as usize] as
                            libc::c_int * 0x3000 as libc::c_int) as s16) *
                 0x2000 as libc::c_int as f32_0) as s16
    } else { target = 0 as libc::c_int as s16 }
    Math_ApproachS(&mut (*this).unk_31A, target, 2 as libc::c_int as s16,
                   0x4000 as libc::c_int as s16);
}
#[no_mangle]
pub unsafe extern "C" fn func_809000A0(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    Animation_MorphToLoop(&mut (*this).skelAnime,
                          &mut object_ganon2_Anim_026510, -2.0f32);
    (*this).unk_194 =
        Animation_GetLastFrame(&mut object_ganon2_Anim_026510 as
                                   *mut AnimationHeader as *mut libc::c_void)
            as f32_0;
    (*this).unk_1AC = 0 as libc::c_int as s16;
    (*this).actionFunc =
        Some(func_80900104 as
                 unsafe extern "C" fn(_: *mut BossGanon2,
                                      _: *mut GlobalContext) -> ());
}
#[no_mangle]
pub unsafe extern "C" fn func_80900104(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    SkelAnime_Update(&mut (*this).skelAnime);
    Math_ApproachZeroF(&mut (*this).actor.speedXZ, 0.5f32, 1.0f32);
    match (*this).unk_1AC as libc::c_int {
        0 => {
            if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194) != 0
               {
                (*this).unk_1AC = 1 as libc::c_int as s16;
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon2_Anim_026AF4, 0.0f32);
                (*this).unk_1A2[0 as libc::c_int as usize] =
                    80 as libc::c_int as s16
            }
        }
        1 => {
            if (*this).unk_1A2[0 as libc::c_int as usize] as libc::c_int ==
                   0 as libc::c_int {
                (*this).unk_1AC = 2 as libc::c_int as s16;
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon2_Anim_027824,
                                      -5.0f32);
                (*this).unk_194 =
                    Animation_GetLastFrame(&mut object_ganon2_Anim_027824 as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0
            }
        }
        2 => {
            if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194) != 0
               {
                func_809002CC(this, globalCtx);
            }
        }
        _ => { }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80900210(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                              &mut object_ganon2_Anim_00DFF0, -3.0f32);
    (*this).unk_194 =
        Animation_GetLastFrame(&mut object_ganon2_Anim_00DFF0 as
                                   *mut AnimationHeader as *mut libc::c_void)
            as f32_0;
    (*this).actionFunc =
        Some(func_8090026C as
                 unsafe extern "C" fn(_: *mut BossGanon2,
                                      _: *mut GlobalContext) -> ());
}
#[no_mangle]
pub unsafe extern "C" fn func_8090026C(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    SkelAnime_Update(&mut (*this).skelAnime);
    Math_ApproachZeroF(&mut (*this).actor.speedXZ, 0.5f32, 2.0f32);
    if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194) != 0 {
        func_809002CC(this, globalCtx);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_809002CC(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    Animation_MorphToLoop(&mut (*this).skelAnime,
                          &mut object_ganon2_Anim_00E8EC, -10.0f32);
    (*this).actionFunc =
        Some(func_80900344 as
                 unsafe extern "C" fn(_: *mut BossGanon2,
                                      _: *mut GlobalContext) -> ());
    (*this).unk_338 = 0 as libc::c_int as u8_0;
    (*this).unk_1A2[0 as libc::c_int as usize] = 100 as libc::c_int as s16;
    (*this).unk_390 =
        (Rand_ZeroFloat(50.0f32) as s16 as libc::c_int + 50 as libc::c_int) as
            s16;
}
#[no_mangle]
pub unsafe extern "C" fn func_80900344(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut phi_f0: f32_0 = 0.;
    if (*this).unk_390 as libc::c_int == 0 as libc::c_int {
        (*this).unk_390 =
            (Rand_ZeroFloat(50.0f32) as s16 as libc::c_int +
                 30 as libc::c_int) as s16;
        Audio_PlayActorSound2(&mut (*this).actor,
                              0x39d9 as libc::c_int as u16_0);
    }
    Math_ApproachF(&mut (*this).unk_324, 255.0f32, 1.0f32, 10.0f32);
    if (*this).unk_338 as libc::c_int != 0 as libc::c_int {
        if Animation_OnFrame(&mut (*this).skelAnime, 13.0f32) != 0 {
            func_808FD4D4(this, globalCtx, 1 as libc::c_int as s16,
                          3 as libc::c_int as s16);
        } else if Animation_OnFrame(&mut (*this).skelAnime, 28.0f32) != 0 {
            func_808FD4D4(this, globalCtx, 2 as libc::c_int as s16,
                          3 as libc::c_int as s16);
        }
        if (*this).actor.xzDistToPlayer < 200.0f32 {
            (*this).unk_338 = 0 as libc::c_int as u8_0;
            Animation_MorphToLoop(&mut (*this).skelAnime,
                                  &mut object_ganon2_Anim_00E8EC, -10.0f32);
        } else {
            (*this).skelAnime.playSpeed =
                ((*this).actor.xzDistToPlayer - 300.0f32) * 0.005f32 + 1.0f32;
            if (*this).skelAnime.playSpeed > 2.0f32 {
                (*this).skelAnime.playSpeed = 2.0f32
            }
            if (*this).unk_334 as libc::c_int != 0 as libc::c_int {
                (*this).skelAnime.playSpeed *= 1.5f32
            }
        }
        phi_f0 = (*this).skelAnime.playSpeed * 3.0f32
    } else {
        phi_f0 = 2.0f32;
        if (*this).actor.xzDistToPlayer >= 200.0f32 {
            (*this).unk_338 = 1 as libc::c_int as u8_0;
            Animation_MorphToLoop(&mut (*this).skelAnime,
                                  &mut object_ganon2_Anim_0353C0, -10.0f32);
        }
    }
    SkelAnime_Update(&mut (*this).skelAnime);
    Math_ApproachF(&mut (*this).actor.speedXZ, phi_f0, 0.5f32, 1.0f32);
    if (*this).unk_1A2[0 as libc::c_int as usize] as libc::c_int ==
           0 as libc::c_int {
        func_808FFDB0(this, globalCtx);
    } else { func_808FFCFC(this, globalCtx); }
    func_808FFAC8(this, globalCtx, 1 as libc::c_int as u8_0);
    func_808FFBBC(this, globalCtx, 1 as libc::c_int as u8_0);
}
#[no_mangle]
pub unsafe extern "C" fn func_80900580(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    if (*this).unk_311 as libc::c_int == 0 as libc::c_int {
        Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                  &mut object_ganon2_Anim_00ADD0, -5.0f32);
        (*this).unk_194 =
            Animation_GetLastFrame(&mut object_ganon2_Anim_00ADD0 as
                                       *mut AnimationHeader as
                                       *mut libc::c_void) as f32_0;
        (*this).unk_198 = (*this).unk_194 - 15.0f32 - 5.0f32
    } else {
        Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                  &mut object_ganon2_Anim_00CAF8, -5.0f32);
        (*this).unk_194 =
            Animation_GetLastFrame(&mut object_ganon2_Anim_00CAF8 as
                                       *mut AnimationHeader as
                                       *mut libc::c_void) as f32_0;
        (*this).unk_198 = (*this).unk_194 - 15.0f32 - 5.0f32
    }
    (*this).actionFunc =
        Some(func_80900650 as
                 unsafe extern "C" fn(_: *mut BossGanon2,
                                      _: *mut GlobalContext) -> ());
}
#[no_mangle]
pub unsafe extern "C" fn func_80900650(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    SkelAnime_Update(&mut (*this).skelAnime);
    if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_198) != 0 {
        Audio_PlayActorSound2(&mut (*this).actor,
                              0x3997 as libc::c_int as u16_0);
        Audio_PlayActorSound2(&mut (*this).actor,
                              0x398f as libc::c_int as u16_0);
    }
    if (*this).unk_311 as libc::c_int == 0 as libc::c_int {
        if (*this).unk_198 - 4.0f32 < (*this).skelAnime.curFrame &&
               (*this).skelAnime.curFrame < (*this).unk_198 + 6.0f32 {
            (*this).unk_312 = 1 as libc::c_int as u8_0
        }
    } else if (*this).unk_198 - 4.0f32 + 4.0f32 < (*this).skelAnime.curFrame
                  && (*this).skelAnime.curFrame < (*this).unk_198 + 6.0f32 {
        (*this).unk_312 = 2 as libc::c_int as u8_0
    }
    Math_ApproachZeroF(&mut (*this).actor.speedXZ, 0.5f32, 1.0f32);
    if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194) != 0 {
        (*this).unk_311 =
            (1 as libc::c_int - (*this).unk_311 as libc::c_int) as u8_0;
        if (*this).unk_311 as libc::c_int == 1 as libc::c_int &&
               (*this).actor.xzDistToPlayer < 250.0f32 &&
               (*this).unk_313 as libc::c_int != 0 {
            func_80900580(this, globalCtx);
        } else { func_808FFDB0(this, globalCtx); }
    }
    func_808FFAC8(this, globalCtx, 0 as libc::c_int as u8_0);
    if (*this).unk_334 as libc::c_int == 0 as libc::c_int &&
           (*this).unk_311 as libc::c_int == 0 as libc::c_int {
        (*this).unk_320 = 0.0f32
    } else { func_808FFBBC(this, globalCtx, 0 as libc::c_int as u8_0); };
}
#[no_mangle]
pub unsafe extern "C" fn func_80900818(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                              &mut object_ganon2_Anim_02A848, -5.0f32);
    (*this).unk_194 =
        Animation_GetLastFrame(&mut object_ganon2_Anim_02A848 as
                                   *mut AnimationHeader as *mut libc::c_void)
            as f32_0;
    (*this).actionFunc =
        Some(func_80900890 as
                 unsafe extern "C" fn(_: *mut BossGanon2,
                                      _: *mut GlobalContext) -> ());
    (*this).unk_1AC = 0 as libc::c_int as s16;
    (*this).unk_39C = 0 as libc::c_int as s16;
    Audio_PlayActorSound2(&mut (*this).actor, 0x399e as libc::c_int as u16_0);
    (*this).unk_336 = 0 as libc::c_int as u8_0;
}
#[no_mangle]
pub unsafe extern "C" fn func_80900890(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut sp5C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp50: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp4C: *mut Camera = 0 as *mut Camera;
    let mut player: *mut Player = 0 as *mut Player;
    let mut temp_v0: *mut Camera = 0 as *mut Camera;
    let mut temp_v0_2: *mut Camera = 0 as *mut Camera;
    let mut pad: s32 = 0;
    let mut temp_f12: f32_0 = 0.;
    let mut temp_f2: f32_0 = 0.;
    sp4C = Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16);
    player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    SkelAnime_Update(&mut (*this).skelAnime);
    (*this).unk_398 = (*this).unk_398.wrapping_add(1);
    (*this).unk_339 = 20 as libc::c_int as s8;
    let mut current_block_84: u64;
    match (*this).unk_39C as libc::c_int {
        0 => {
            func_80064520(globalCtx, &mut (*globalCtx).csCtx);
            (*this).unk_39E = Gameplay_CreateSubCamera(globalCtx);
            Gameplay_ChangeCameraStatus(globalCtx, 0 as libc::c_int as s16,
                                        1 as libc::c_int as s16);
            Gameplay_ChangeCameraStatus(globalCtx, (*this).unk_39E,
                                        7 as libc::c_int as s16);
            func_8002DF54(globalCtx, &mut (*this).actor,
                          8 as libc::c_int as u8_0);
            (*this).unk_39C = 1 as libc::c_int as s16;
            (*this).unk_3A4 = (*sp4C).eye;
            (*this).unk_3B0 = (*sp4C).at;
            (*this).unk_1A2[0 as libc::c_int as usize] =
                300 as libc::c_int as s16;
            (*this).unk_1A2[1 as libc::c_int as usize] =
                100 as libc::c_int as s16;
            (*globalCtx).envCtx.unk_D8 = 0.0f32;
            current_block_84 = 4338653250393163748;
        }
        1 => { current_block_84 = 4338653250393163748; }
        2 => {
            (*this).unk_1A2[0 as libc::c_int as usize] =
                300 as libc::c_int as s16;
            (*this).unk_3A4.x = (*sZelda).actor.world.pos.x - 100.0f32;
            (*this).unk_3A4.y = (*sZelda).actor.world.pos.y + 30.0f32;
            (*this).unk_3A4.z =
                (*sZelda).actor.world.pos.z + 30.0f32 - 60.0f32;
            (*this).unk_3B0.x = (*sZelda).actor.world.pos.x;
            (*this).unk_3B0.y = (*sZelda).actor.world.pos.y + 30.0f32;
            (*this).unk_3B0.z = (*sZelda).actor.world.pos.z - 10.0f32;
            Math_ApproachZeroF(&mut (*this).unk_324, 1.0f32, 5.0f32);
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32, 1.0f32,
                           1.0f32 / 51 as libc::c_int as libc::c_float);
            if (*this).unk_1A2[1 as libc::c_int as usize] as libc::c_int ==
                   80 as libc::c_int {
                Message_StartTextbox(globalCtx,
                                     0x70d7 as libc::c_int as u16_0,
                                     0 as *mut Actor);
            }
            if ((*this).unk_1A2[1 as libc::c_int as usize] as libc::c_int) <
                   30 as libc::c_int &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                temp_v0 =
                    Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16);
                (*temp_v0).eye = (*this).unk_3A4;
                (*temp_v0).eyeNext = (*this).unk_3A4;
                (*temp_v0).at = (*this).unk_3B0;
                func_800C08AC(globalCtx, (*this).unk_39E,
                              0 as libc::c_int as s16);
                (*this).unk_39E = 0 as libc::c_int as s16;
                func_80064534(globalCtx, &mut (*globalCtx).csCtx);
                func_8002DF54(globalCtx, &mut (*this).actor,
                              7 as libc::c_int as u8_0);
                (*this).unk_39C = 3 as libc::c_int as s16
            }
            current_block_84 = 16108440464692313034;
        }
        10 => {
            func_80064520(globalCtx, &mut (*globalCtx).csCtx);
            (*this).unk_39E = Gameplay_CreateSubCamera(globalCtx);
            Gameplay_ChangeCameraStatus(globalCtx, 0 as libc::c_int as s16,
                                        1 as libc::c_int as s16);
            Gameplay_ChangeCameraStatus(globalCtx, (*this).unk_39E,
                                        7 as libc::c_int as s16);
            (*this).unk_39C = 11 as libc::c_int as s16;
            (*this).unk_334 = 1 as libc::c_int as u8_0;
            func_8002DF54(globalCtx, &mut (*this).actor,
                          0x60 as libc::c_int as u8_0);
            (*this).unk_398 = 0 as libc::c_int as u32_0;
            current_block_84 = 15580656271300226112;
        }
        11 => { current_block_84 = 15580656271300226112; }
        _ => { current_block_84 = 16108440464692313034; }
    }
    match current_block_84 {
        15580656271300226112 => {
            (*player).actor.world.pos.x =
                (*sZelda).actor.world.pos.x + 50.0f32 + 10.0f32;
            (*player).actor.world.pos.z =
                (*sZelda).actor.world.pos.z - 25.0f32;
            (*player).actor.shape.rot.y = -(0x8000 as libc::c_int) as s16;
            (*this).unk_3A4.x =
                (*player).actor.world.pos.x + 100.0f32 - 80.0f32;
            (*this).unk_3A4.y =
                (*player).actor.world.pos.y + 60.0f32 - 40.0f32;
            (*this).unk_3A4.z = (*player).actor.world.pos.z - 110.0f32;
            (*this).unk_3B0.x = (*player).actor.world.pos.x;
            (*this).unk_3B0.y =
                (*player).actor.world.pos.y + 60.0f32 - 25.0f32;
            (*this).unk_3B0.z = (*player).actor.world.pos.z;
            if (*this).unk_398 == 80 as libc::c_int as libc::c_uint {
                temp_v0_2 =
                    Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16);
                (*temp_v0_2).eye = (*this).unk_3A4;
                (*temp_v0_2).eyeNext = (*this).unk_3A4;
                (*temp_v0_2).at = (*this).unk_3B0;
                (*this).unk_39C = 3 as libc::c_int as s16;
                func_800C08AC(globalCtx, (*this).unk_39E,
                              0 as libc::c_int as s16);
                (*this).unk_39E = 0 as libc::c_int as s16;
                func_80064534(globalCtx, &mut (*globalCtx).csCtx);
                func_8002DF54(globalCtx, &mut (*this).actor,
                              7 as libc::c_int as u8_0);
            }
        }
        4338653250393163748 => {
            if (*this).unk_1A2[1 as libc::c_int as usize] as libc::c_int ==
                   50 as libc::c_int {
                func_80078884(0x39d7 as libc::c_int as u16_0);
            }
            Matrix_RotateY((*this).actor.shape.rot.y as libc::c_int as
                               libc::c_float / 0x8000 as libc::c_int as f32_0
                               * 3.14159265358979323846f32 + 0.3f32,
                           MTXMODE_NEW as libc::c_int as u8_0);
            sp5C.x = 0.0f32;
            sp5C.y = 0.0f32;
            sp5C.z = 250.0f32;
            Matrix_MultVec3f(&mut sp5C, &mut sp50);
            Math_ApproachF(&mut (*this).unk_3A4.x,
                           (*this).actor.world.pos.x + sp50.x, 0.2f32,
                           100.0f32);
            Math_ApproachF(&mut (*this).unk_3A4.y, 1136.0f32, 0.2f32,
                           100.0f32);
            Math_ApproachF(&mut (*this).unk_3A4.z,
                           (*this).actor.world.pos.z + sp50.z, 0.2f32,
                           100.0f32);
            Math_ApproachF(&mut (*this).unk_3B0.x, (*this).unk_1B8.x, 0.2f32,
                           100.0f32);
            Math_ApproachF(&mut (*this).unk_3B0.y, (*this).unk_1B8.y, 0.2f32,
                           100.0f32);
            Math_ApproachF(&mut (*this).unk_3B0.z, (*this).unk_1B8.z, 0.2f32,
                           100.0f32);
            if (*this).unk_1A2[1 as libc::c_int as usize] as libc::c_int ==
                   0 as libc::c_int {
                (*this).unk_39C = 2 as libc::c_int as s16;
                (*this).unk_1A2[1 as libc::c_int as usize] =
                    90 as libc::c_int as s16
            }
        }
        _ => { }
    }
    if (*this).unk_39E as libc::c_int != 0 as libc::c_int {
        Gameplay_CameraSetAtEye(globalCtx, (*this).unk_39E,
                                &mut (*this).unk_3B0, &mut (*this).unk_3A4);
    }
    match (*this).unk_1AC as libc::c_int {
        0 => {
            if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194) != 0
               {
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon2_Anim_034278, 0.0f32);
                (*this).unk_1AC = 1 as libc::c_int as s16
            }
        }
        1 => {
            if (*globalCtx).gameplayFrames.wrapping_rem(32 as libc::c_int as
                                                            libc::c_uint) ==
                   0 as libc::c_int as libc::c_uint {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39af as libc::c_int as u16_0);
            }
            if (*this).unk_1A2[0 as libc::c_int as usize] as libc::c_int ==
                   0 as libc::c_int ||
                   (*this).unk_334 as libc::c_int != 0 as libc::c_int {
                temp_f2 = -200.0f32 - (*player).actor.world.pos.x;
                temp_f12 = -200.0f32 - (*player).actor.world.pos.z;
                if sqrtf(temp_f2 * temp_f2 + temp_f12 * temp_f12) <= 784.0f32
                   {
                    Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                              &mut object_ganon2_Anim_0334F8,
                                              0.0f32);
                    (*this).unk_194 =
                        Animation_GetLastFrame(&mut object_ganon2_Anim_0334F8
                                                   as *mut AnimationHeader as
                                                   *mut libc::c_void) as
                            f32_0;
                    (*this).unk_1AC = 2 as libc::c_int as s16;
                    (*this).unk_1A2[0 as libc::c_int as usize] =
                        40 as libc::c_int as s16;
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x398f as libc::c_int as u16_0);
                }
            }
        }
        2 => {
            Math_ApproachF(&mut (*this).unk_324, 255.0f32, 1.0f32, 10.0f32);
            Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               2.0f32 / 51.0f32);
            if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194) != 0
               {
                func_808FFDB0(this, globalCtx);
                if (*this).unk_334 as libc::c_int == 0 as libc::c_int {
                    (*this).actor.colChkInfo.health =
                        25 as libc::c_int as u8_0
                }
                (*this).unk_336 = 1 as libc::c_int as u8_0
            }
        }
        _ => { }
    }
    Math_ApproachZeroF(&mut (*this).actor.speedXZ, 0.5f32, 1.0f32);
}
#[no_mangle]
pub unsafe extern "C" fn func_80901020(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                              &mut object_ganon2_Anim_02A848, -5.0f32);
    (*this).unk_194 =
        Animation_GetLastFrame(&mut object_ganon2_Anim_02A848 as
                                   *mut AnimationHeader as *mut libc::c_void)
            as f32_0;
    (*this).actionFunc =
        Some(func_8090120C as
                 unsafe extern "C" fn(_: *mut BossGanon2,
                                      _: *mut GlobalContext) -> ());
    (*this).unk_1AC = 0 as libc::c_int as s16;
    (*this).unk_39C = 0 as libc::c_int as s16;
    Audio_PlayActorSound2(&mut (*this).actor, 0x399e as libc::c_int as u16_0);
    (*this).unk_314 = 4 as libc::c_int as u8_0;
}
#[no_mangle]
pub unsafe extern "C" fn func_8090109C(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut i: u8_0 = 0;
    i = 0 as libc::c_int as u8_0;
    while (i as libc::c_int) < 70 as libc::c_int {
        let mut velocity: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
        let mut accel: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
        let mut pos: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
        velocity.x = Rand_CenteredFloat(50.0f32);
        velocity.y = Rand_CenteredFloat(10.0f32) + 5.0f32;
        velocity.z = Rand_CenteredFloat(50.0f32);
        accel.x = 0.0f32;
        accel.y = -1.0f32;
        accel.z = 0.0f32;
        pos.x = (*this).unk_1B8.x;
        pos.y = (*this).unk_1B8.y;
        pos.z = (*this).unk_1B8.z;
        func_8002836C(globalCtx, &mut pos, &mut velocity, &mut accel,
                      &mut sPrimColor, &mut sEnvColor,
                      (Rand_ZeroFloat(50.0f32) as s16 as libc::c_int +
                           50 as libc::c_int) as s16, 0 as libc::c_int as s16,
                      17 as libc::c_int as s16);
        i = i.wrapping_add(1)
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_8090120C(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut player: *mut Player = 0 as *mut Player;
    let mut temp_f14: f32_0 = 0.;
    let mut temp_f12: f32_0 = 0.;
    let mut temp_v0_2: *mut Camera = 0 as *mut Camera;
    let mut temp_a0_2: s16 = 0;
    let mut phi_f0: f32_0 = 0.;
    let mut phi_a1: s32 = 0;
    player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    (*this).unk_398 = (*this).unk_398.wrapping_add(1);
    SkelAnime_Update(&mut (*this).skelAnime);
    (*this).unk_3BC.x = 0.0f32;
    (*this).unk_3BC.y = 1.0f32;
    (*this).unk_3BC.z = 0.0f32;
    let mut current_block_303: u64;
    match (*this).unk_39C as libc::c_int {
        0 => {
            func_80064520(globalCtx, &mut (*globalCtx).csCtx);
            (*this).unk_39E = Gameplay_CreateSubCamera(globalCtx);
            Gameplay_ChangeCameraStatus(globalCtx, 0 as libc::c_int as s16,
                                        1 as libc::c_int as s16);
            Gameplay_ChangeCameraStatus(globalCtx, (*this).unk_39E,
                                        7 as libc::c_int as s16);
            func_8002DF54(globalCtx, &mut (*this).actor,
                          8 as libc::c_int as u8_0);
            (*this).unk_39C = 1 as libc::c_int as s16;
            (*this).unk_398 = 0 as libc::c_int as u32_0;
            (*sZelda).unk_3C8 = 9 as libc::c_int as u8_0;
            (*this).unk_31C = 0 as libc::c_int as s16;
            (*this).unk_1A2[2 as libc::c_int as usize] =
                0 as libc::c_int as s16;
            (*this).unk_336 = 0 as libc::c_int as u8_0;
            (*this).unk_324 = 0.0f32;
            (*this).actor.speedXZ = 0.0f32;
            (*this).unk_31A = (*this).unk_31C;
            (*globalCtx).envCtx.unk_D8 = 0.0f32;
            current_block_303 = 4875050299768959570;
        }
        1 => { current_block_303 = 4875050299768959570; }
        2 => {
            (*this).unk_339 = 22 as libc::c_int as s8;
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32, 1.0f32,
                           0.1f32);
            func_80078884((0x289d as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            (*this).unk_3A4.x = 250 as libc::c_int as f32_0;
            (*this).unk_3A4.y = 1150.0f32;
            (*this).unk_3A4.z = 0.0f32;
            Math_ApproachF(&mut (*this).unk_3B0.x,
                           (*sZelda).actor.world.pos.x, 0.2f32, 20.0f32);
            Math_ApproachF(&mut (*this).unk_3B0.y,
                           (*sZelda).actor.world.pos.y + 50.0f32, 0.2f32,
                           10.0f32);
            Math_ApproachF(&mut (*this).unk_3B0.z,
                           (*sZelda).actor.world.pos.z, 0.2f32, 20.0f32);
            if (*this).unk_398 == 50 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 3 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0
            }
            current_block_303 = 3179191505073644361;
        }
        3 => {
            (*this).unk_339 = 22 as libc::c_int as s8;
            func_80078884((0x289d as libc::c_int - 0x800 as libc::c_int) as
                              u16_0);
            (*this).unk_3A4.x = 330.0f32;
            (*this).unk_3A4.y = 1120.0f32;
            (*this).unk_3A4.z = -150.0f32;
            (*this).unk_3B0.x = (*sZelda).actor.world.pos.x;
            (*this).unk_3B0.y = (*sZelda).actor.world.pos.y + 40.0f32;
            (*this).unk_3B0.z = (*sZelda).actor.world.pos.z;
            if (*this).unk_398 == 10 as libc::c_int as libc::c_uint {
                Message_StartTextbox(globalCtx,
                                     0x70d8 as libc::c_int as u16_0,
                                     0 as *mut Actor);
            }
            if (*this).unk_398 > 80 as libc::c_int as libc::c_uint &&
                   Message_GetState(&mut (*globalCtx).msgCtx) as libc::c_int
                       == TEXT_STATE_NONE as libc::c_int {
                (*this).unk_39C = 4 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0
            }
            current_block_303 = 3179191505073644361;
        }
        4 => {
            if (*this).unk_398 > 10 as libc::c_int as libc::c_uint {
                Math_ApproachZeroF(&mut (*this).unk_37C, 1.0f32, 10.0f32);
                if (*this).unk_398 == 30 as libc::c_int as libc::c_uint {
                    (*sZelda).unk_3C8 = 10 as libc::c_int as u8_0
                }
                (*this).unk_339 = 23 as libc::c_int as s8;
                Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                                   0.05f32);
            } else { (*this).unk_339 = 22 as libc::c_int as s8 }
            if (*this).unk_398 == 100 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 5 as libc::c_int as s16;
                (*this).unk_398 = 40 as libc::c_int as u32_0;
                (*this).skelAnime.playSpeed = 1.0f32;
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x64 as libc::c_int as u8_0);
            }
            current_block_303 = 3179191505073644361;
        }
        5 => {
            (*this).unk_339 = 23 as libc::c_int as s8;
            if (*this).unk_398 >= 60 as libc::c_int as libc::c_uint &&
                   (*this).unk_398 <= 90 as libc::c_int as libc::c_uint {
                if (*this).unk_398 == 62 as libc::c_int as libc::c_uint {
                    func_80078884(0x286f as libc::c_int as u16_0);
                }
                Math_ApproachF(&mut (*this).unk_38C, 200.0f32, 1.0f32,
                               8.0f32);
            } else {
                Math_ApproachZeroF(&mut (*this).unk_38C, 1.0f32, 8.0f32);
            }
            if (*this).unk_398 == 70 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x65 as libc::c_int as u8_0);
            }
            if (*this).unk_398 == 150 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x66 as libc::c_int as u8_0);
            }
            (*this).unk_30C = 10.0f32;
            (*player).actor.world.pos.x = 250.0f32;
            (*player).actor.world.pos.z = 30.0f32;
            (*this).unk_3A4.x = (*player).actor.world.pos.x - 50.0f32;
            (*this).unk_3A4.y = (*player).actor.world.pos.y + 50.0f32;
            (*this).unk_3A4.z = (*player).actor.world.pos.z + 40.0f32;
            (*this).unk_3B0.x = (*player).actor.world.pos.x;
            (*this).unk_3B0.y = (*player).actor.world.pos.y + 40.0f32;
            (*this).unk_3B0.z = (*player).actor.world.pos.z;
            if (*this).unk_398 == 166 as libc::c_int as libc::c_uint {
                temp_v0_2 =
                    Gameplay_GetCamera(globalCtx, 0 as libc::c_int as s16);
                (*temp_v0_2).eye = (*this).unk_3A4;
                (*temp_v0_2).eyeNext = (*this).unk_3A4;
                (*temp_v0_2).at = (*this).unk_3B0;
                func_800C08AC(globalCtx, (*this).unk_39E,
                              0 as libc::c_int as s16);
                (*this).unk_39E = 0 as libc::c_int as s16;
                func_80064534(globalCtx, &mut (*globalCtx).csCtx);
                func_8002DF54(globalCtx, &mut (*this).actor,
                              7 as libc::c_int as u8_0);
                (*this).unk_39C = 6 as libc::c_int as s16
            }
            current_block_303 = 3179191505073644361;
        }
        6 => {
            (*this).unk_339 = 23 as libc::c_int as s8;
            temp_f14 = (*this).unk_1B8.x - (*player).actor.world.pos.x;
            temp_f12 = (*this).unk_1B8.z - (*player).actor.world.pos.z;
            temp_a0_2 =
                (Math_Atan2S(temp_f12, temp_f14) as libc::c_int -
                     (*player).actor.shape.rot.y as libc::c_int) as s16;
            if (if temp_a0_2 as libc::c_int >= 0 as libc::c_int {
                    temp_a0_2 as libc::c_int
                } else { -(temp_a0_2 as libc::c_int) }) <
                   0x2000 as libc::c_int &&
                   sqrtf(temp_f14 * temp_f14 + temp_f12 * temp_f12) < 70.0f32
                   && (*player).swordState as libc::c_int != 0 as libc::c_int
                   &&
                   (*player).heldItemActionParam as libc::c_int ==
                       PLAYER_AP_SWORD_MASTER as libc::c_int {
                func_80064520(globalCtx, &mut (*globalCtx).csCtx);
                (*this).unk_39E = Gameplay_CreateSubCamera(globalCtx);
                Gameplay_ChangeCameraStatus(globalCtx,
                                            0 as libc::c_int as s16,
                                            1 as libc::c_int as s16);
                Gameplay_ChangeCameraStatus(globalCtx, (*this).unk_39E,
                                            7 as libc::c_int as s16);
                (*this).unk_39C = 7 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon2_Anim_003B1C,
                                          0.0f32);
                (*this).unk_194 =
                    Animation_GetLastFrame(&mut object_ganon2_Anim_003B1C as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                (*globalCtx).startPlayerCutscene.expect("non-null function pointer")(globalCtx,
                                                                                     &mut (*this).actor,
                                                                                     0x61
                                                                                         as
                                                                                         libc::c_int);
                current_block_303 = 3724971854206189195;
            } else { current_block_303 = 3179191505073644361; }
        }
        7 => { current_block_303 = 3724971854206189195; }
        75 => {
            (*this).unk_339 = 23 as libc::c_int as s8;
            if (*this).unk_398 == 55 as libc::c_int as libc::c_uint {
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon2_Anim_007288,
                                          0.0f32);
                (*this).unk_194 =
                    Animation_GetLastFrame(&mut object_ganon2_Anim_007288 as
                                               *mut AnimationHeader as
                                               *mut libc::c_void) as f32_0;
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x62 as libc::c_int as u8_0);
                (*this).unk_39C = 8 as libc::c_int as s16;
                (*this).unk_398 = 1000 as libc::c_int as u32_0
            }
            current_block_303 = 3179191505073644361;
        }
        8 => {
            if (*this).unk_398 == 1025 as libc::c_int as libc::c_uint {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39d8 as libc::c_int as u16_0);
            }
            if (*this).unk_398 >= 1000 as libc::c_int as libc::c_uint {
                if (*this).unk_398 < 1040 as libc::c_int as libc::c_uint {
                    (*this).unk_339 = 23 as libc::c_int as s8;
                    Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8,
                                       1.0f32, 0.2f32);
                }
            }
            if (*this).unk_398 == 1040 as libc::c_int as libc::c_uint {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39a1 as libc::c_int as u16_0);
                (*this).unk_336 = 2 as libc::c_int as u8_0;
                (*this).unk_339 = 0 as libc::c_int as s8;
                (*globalCtx).envCtx.unk_BE = 0 as libc::c_int as u8_0;
                (*globalCtx).envCtx.unk_D8 = 0.0f32
            }
            if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194) != 0
               {
                Animation_MorphToPlayOnce(&mut (*this).skelAnime,
                                          &mut object_ganon2_Anim_008EB8,
                                          0.0f32);
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_194 = 1000.0f32
            }
            (*this).unk_3A4.x = 250 as libc::c_int as f32_0;
            (*this).unk_3A4.y = 1150.0f32;
            (*this).unk_3A4.z = 0.0f32;
            (*this).unk_3B0.x = (*this).unk_1B8.x;
            (*this).unk_3B0.y = (*this).unk_1B8.y;
            (*this).unk_3B0.z = (*this).unk_1B8.z;
            if (*this).unk_398 < 1000 as libc::c_int as libc::c_uint &&
                   (*this).unk_398.wrapping_rem(16 as libc::c_int as
                                                    libc::c_uint) ==
                       0 as libc::c_int as libc::c_uint {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x3997 as libc::c_int as u16_0);
            }
            if (*this).unk_398 == 40 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 9 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*sZelda).unk_3C8 = 11 as libc::c_int as u8_0;
                Message_StartTextbox(globalCtx,
                                     0x70d9 as libc::c_int as u16_0,
                                     0 as *mut Actor);
                (*this).unk_336 = 0 as libc::c_int as u8_0;
                (*globalCtx).envCtx.unk_D8 = 0.0f32
            }
            current_block_303 = 3179191505073644361;
        }
        9 => {
            (*this).unk_339 = 24 as libc::c_int as s8;
            (*this).unk_3A4.x = 330.0f32;
            (*this).unk_3A4.y = 1120.0f32;
            (*this).unk_3A4.z = -150.0f32;
            (*this).unk_3B0.x = (*sZelda).actor.world.pos.x;
            (*this).unk_3B0.y = (*sZelda).actor.world.pos.y + 40.0f32;
            (*this).unk_3B0.z = (*sZelda).actor.world.pos.z;
            if (*this).unk_398 > 60 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 10 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_410.x = 0.0f32
            }
            current_block_303 = 3179191505073644361;
        }
        10 => {
            (*this).unk_339 = 24 as libc::c_int as s8;
            Math_ApproachF(&mut (*this).unk_3A4.x, 290.0f32, 0.05f32,
                           (*this).unk_410.x);
            Math_ApproachF(&mut (*this).unk_3A4.y, 1130.0f32, 0.05f32,
                           (*this).unk_410.x * 0.25f32);
            Math_ApproachF(&mut (*this).unk_3A4.z, -260.0f32, 0.05f32,
                           (*this).unk_410.x * 1.25f32);
            if (*this).unk_398 >= 40 as libc::c_int as libc::c_uint &&
                   (*this).unk_398 <= 110 as libc::c_int as libc::c_uint {
                Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               1.0f32, 0.02f32);
                Math_ApproachF(&mut (*this).unk_384, 10.0f32, 0.1f32, 0.2f32);
                Audio_PlayActorSound2(&mut (*sZelda).actor,
                                      (0x289a as libc::c_int -
                                           0x800 as libc::c_int) as u16_0);
            } else {
                Math_ApproachZeroF(&mut (*this).unk_384, 1.0f32, 0.2f32);
            }
            if (*this).unk_398 > 130 as libc::c_int as libc::c_uint {
                Math_ApproachF(&mut (*this).unk_3B0.y,
                               (*sZelda).actor.world.pos.y + 40.0f32 + 10.0f32
                                   - 20.0f32, 0.1f32, (*this).unk_410.x);
            } else {
                Math_ApproachF(&mut (*this).unk_3B0.y,
                               (*sZelda).actor.world.pos.y + 40.0f32 +
                                   10.0f32, 0.05f32,
                               (*this).unk_410.x * 0.25f32);
            }
            Math_ApproachF(&mut (*this).unk_410.x, 1.0f32, 1.0f32, 0.01f32);
            if (*this).unk_398 == 10 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 12 as libc::c_int as u8_0
            }
            if (*this).unk_398 == 110 as libc::c_int as libc::c_uint {
                (*sZelda).unk_3C8 = 13 as libc::c_int as u8_0
            }
            if (*this).unk_398 == 140 as libc::c_int as libc::c_uint {
                Audio_PlayActorSound2(&mut (*sZelda).actor,
                                      0x2896 as libc::c_int as u16_0);
            }
            if (*this).unk_398 < 160 as libc::c_int as libc::c_uint {
                current_block_303 = 3179191505073644361;
            } else { current_block_303 = 8853290751650472221; }
        }
        20 => { current_block_303 = 8853290751650472221; }
        _ => { current_block_303 = 3179191505073644361; }
    }
    match current_block_303 {
        8853290751650472221 => {
            (*globalCtx).nextEntranceIndex = 0x6b as libc::c_int as s16;
            gSaveContext.nextCutsceneIndex = 0xfff2 as libc::c_int as u16_0;
            (*globalCtx).sceneLoadFlag = 0x14 as libc::c_int as s8;
            (*globalCtx).fadeTransition = 3 as libc::c_int as u8_0;
            (*globalCtx).linkAgeOnLoad = 1 as libc::c_int as u8_0
        }
        3724971854206189195 => {
            (*this).unk_339 = 23 as libc::c_int as s8;
            Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               0.2f32);
            (*player).actor.world.pos.x = 250.0f32;
            (*player).actor.shape.rot.y = -(0x4000 as libc::c_int) as s16;
            (*player).actor.world.pos.z = 30.0f32;
            if (*this).unk_398 == 20 as libc::c_int as libc::c_uint ||
                   (*this).unk_398 == 30 as libc::c_int as libc::c_uint ||
                   (*this).unk_398 == 65 as libc::c_int as libc::c_uint ||
                   (*this).unk_398 == 40 as libc::c_int as libc::c_uint {
                func_80078884(0x6800 as libc::c_int as u16_0);
                func_80078884(0x1818 as libc::c_int as u16_0);
            }
            if (*this).unk_398 == 22 as libc::c_int as libc::c_uint ||
                   (*this).unk_398 == 35 as libc::c_int as libc::c_uint ||
                   (*this).unk_398 == 72 as libc::c_int as libc::c_uint ||
                   (*this).unk_398 == 45 as libc::c_int as libc::c_uint {
                func_80078884(0x399b as libc::c_int as u16_0);
                func_80078884(0x1806 as libc::c_int as u16_0);
                (*globalCtx).envCtx.unk_D8 = 1.0f32
            }
            if (*this).unk_398 == 22 as libc::c_int as libc::c_uint ||
                   (*this).unk_398 == 35 as libc::c_int as libc::c_uint ||
                   (*this).unk_398 == 72 as libc::c_int as libc::c_uint ||
                   (*this).unk_398 == 45 as libc::c_int as libc::c_uint {
                func_8090109C(this, globalCtx);
            }
            if (*this).unk_398 >= 34 as libc::c_int as libc::c_uint &&
                   (*this).unk_398 < 40 as libc::c_int as libc::c_uint {
                (*this).unk_3A4.x = 269.0f32;
                (*this).unk_3A4.y = 1112.0f32;
                (*this).unk_3A4.z = -28.0f32;
                (*this).unk_3B0.x = 234.0f32;
                (*this).unk_3B0.y = 1117.0f32;
                (*this).unk_3B0.z = -11.0f32
            } else {
                if (*this).unk_398 < 30 as libc::c_int as libc::c_uint {
                    phi_a1 = 0 as libc::c_int
                } else if (*this).unk_398 < 43 as libc::c_int as libc::c_uint
                 {
                    phi_a1 = 1 as libc::c_int
                } else {
                    (*this).unk_3BC.z = -0.8f32;
                    (*player).actor.world.pos.x = 200.0f32;
                    (*player).actor.world.pos.z = 10.0f32;
                    phi_a1 = 2 as libc::c_int
                }
                (*this).unk_3A4.x =
                    D_8090702C[phi_a1 as usize].x +
                        ((*player).actor.world.pos.x - 50.0f32);
                (*this).unk_3A4.y =
                    D_8090702C[phi_a1 as usize].y +
                        ((*player).actor.world.pos.y + 50.0f32);
                (*this).unk_3A4.z =
                    D_8090702C[phi_a1 as usize].z +
                        ((*player).actor.world.pos.z + 40.0f32);
                (*this).unk_3B0.x =
                    D_80907050[phi_a1 as usize].x +
                        (*player).actor.world.pos.x;
                (*this).unk_3B0.y =
                    D_80907050[phi_a1 as usize].y +
                        ((*player).actor.world.pos.y + 40.0f32);
                (*this).unk_3B0.z =
                    D_80907050[phi_a1 as usize].z +
                        (*player).actor.world.pos.z
            }
            if (*this).unk_398 > 80 as libc::c_int as libc::c_uint {
                Audio_QueueSeqCmd(((0x1 as libc::c_int) << 28 as libc::c_int |
                                       (SEQ_PLAYER_BGM_MAIN as libc::c_int) <<
                                           24 as libc::c_int |
                                       0x100ff as libc::c_int) as u32_0);
                (*this).unk_39C = 75 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0;
                (*this).unk_3A4.x = 112.0f32;
                (*this).unk_3A4.y = 1146.0f32;
                (*this).unk_3A4.z = 202.0f32;
                (*this).unk_3B0.x = 110.0f32;
                (*this).unk_3B0.y = 1144.0f32;
                (*this).unk_3B0.z = 177.0f32;
                (*player).actor.world.pos.x = 200.0f32;
                (*this).unk_3BC.z = 0.0f32
            }
        }
        4875050299768959570 => {
            if (*this).unk_398 < 90 as libc::c_int as libc::c_uint {
                (*this).unk_339 = 20 as libc::c_int as s8;
                Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               1.0f32, 0.1f32);
            } else if (*this).unk_398 >= 90 as libc::c_int as libc::c_uint {
                (*this).unk_339 = 21 as libc::c_int as s8;
                Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                                   0.08f32);
            }
            if (*this).unk_398 == 50 as libc::c_int as libc::c_uint {
                func_80078884(0x39d7 as libc::c_int as u16_0);
            }
            if (*this).unk_398 > 90 as libc::c_int as libc::c_uint {
                Math_ApproachF(&mut (*this).unk_380, 0.25f32, 1.0f32,
                               0.0125f32);
                (*this).unk_37C = 200.0f32;
                func_80078884((0x289d as libc::c_int - 0x800 as libc::c_int)
                                  as u16_0);
            }
            if (*this).unk_398 >= 110 as libc::c_int as libc::c_uint {
                if (*this).unk_398 == 110 as libc::c_int as libc::c_uint {
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x390b as libc::c_int as u16_0);
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x399b as libc::c_int as u16_0);
                }
                Math_ApproachF(&mut (*this).unk_30C, 10.0f32, 0.2f32, 5.0f32);
                (*this).skelAnime.playSpeed = 3.0f32
            }
            if (*this).unk_398 == 120 as libc::c_int as libc::c_uint {
                func_8002DF54(globalCtx, &mut (*this).actor,
                              0x63 as libc::c_int as u8_0);
            }
            (*this).actor.world.rot.y = 0x4000 as libc::c_int as s16;
            (*this).actor.world.pos.z = 0.0f32;
            (*this).actor.world.pos.x = (*this).actor.world.pos.z;
            (*player).actor.shape.rot.y = -(0x4000 as libc::c_int) as s16;
            (*player).actor.world.pos.x = 200.0f32;
            (*player).actor.world.pos.z = 30.0f32;
            (*sZelda).actor.world.pos.x = 340.0f32;
            (*sZelda).actor.world.pos.z = -250.0f32;
            (*sZelda).actor.shape.rot.y = -(0x2000 as libc::c_int) as s16;
            (*sZelda).actor.world.rot.y = (*sZelda).actor.shape.rot.y;
            (*this).unk_3A4.x = 250 as libc::c_int as f32_0;
            (*this).unk_3A4.y = 1150.0f32;
            (*this).unk_3A4.z = 0.0f32;
            (*this).unk_3B0.x = (*this).unk_1B8.x;
            (*this).unk_3B0.y = (*this).unk_1B8.y;
            (*this).unk_3B0.z = (*this).unk_1B8.z;
            if (*this).unk_398 > 135 as libc::c_int as libc::c_uint {
                (*this).unk_39C = 2 as libc::c_int as s16;
                (*this).unk_398 = 0 as libc::c_int as u32_0
            }
        }
        _ => { }
    }
    if (*this).unk_39E as libc::c_int != 0 as libc::c_int {
        Gameplay_CameraSetAtEyeUp(globalCtx, (*this).unk_39E,
                                  &mut (*this).unk_3B0, &mut (*this).unk_3A4,
                                  &mut (*this).unk_3BC);
    }
    match (*this).unk_1AC as libc::c_int {
        0 => {
            if Animation_OnFrame(&mut (*this).skelAnime, (*this).unk_194) != 0
               {
                Animation_MorphToLoop(&mut (*this).skelAnime,
                                      &mut object_ganon2_Anim_034278, 0.0f32);
                (*this).unk_1AC = 1 as libc::c_int as s16
            }
        }
        1 => {
            if ((*this).unk_39C as libc::c_int) < 7 as libc::c_int &&
                   (*globalCtx).gameplayFrames.wrapping_rem(32 as libc::c_int
                                                                as
                                                                libc::c_uint)
                       == 0 as libc::c_int as libc::c_uint {
                Audio_PlayActorSound2(&mut (*this).actor,
                                      0x39af as libc::c_int as u16_0);
            }
        }
        _ => { }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80902348(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut player: *mut Player = 0 as *mut Player;
    let mut temp_f2: f32_0 = 0.;
    let mut temp_f12: f32_0 = 0.;
    let mut i: s16 = 0;
    let mut j: s16 = 0;
    let mut phi_v0_2: s16 = 0;
    if (*this).unk_316 as libc::c_int == 0 as libc::c_int {
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) <
                  (::std::mem::size_of::<[ColliderJntSphElement; 2]>() as
                       libc::c_ulong).wrapping_div(::std::mem::size_of::<ColliderJntSphElement>()
                                                       as libc::c_ulong) as
                      s32 {
            if (*(*this).unk_444.elements.offset(i as isize)).info.bumperFlags
                   as libc::c_int & 2 as libc::c_int != 0 {
                let ref mut fresh2 =
                    (*(*this).unk_444.elements.offset(i as
                                                          isize)).info.bumperFlags;
                *fresh2 =
                    (*fresh2 as libc::c_int & !(2 as libc::c_int)) as u8_0
            } else if (*(*this).unk_444.elements.offset(i as
                                                            isize)).info.toucherFlags
                          as libc::c_int & 2 as libc::c_int != 0 {
                let ref mut fresh3 =
                    (*(*this).unk_444.elements.offset(i as
                                                          isize)).info.toucherFlags;
                *fresh3 =
                    (*fresh3 as libc::c_int & !(2 as libc::c_int)) as u8_0;
                if (*this).unk_312 as libc::c_int == 1 as libc::c_int {
                    phi_v0_2 = 0x1800 as libc::c_int as s16
                } else { phi_v0_2 = 0 as libc::c_int as s16 }
                func_8002F6D4(globalCtx, &mut (*this).actor, 15.0f32,
                              ((*this).actor.yawTowardsPlayer as libc::c_int +
                                   phi_v0_2 as libc::c_int) as s16, 2.0f32,
                              0 as libc::c_int as u32_0);
                (*sZelda).unk_3C8 = 8 as libc::c_int as u8_0;
                (*this).unk_316 = 10 as libc::c_int as s16;
                break ;
            }
            i += 1
        }
    }
    if (*this).unk_324 > 0.0f32 {
        player =
            (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                                 usize].head as *mut Player;
        temp_f2 = -200.0f32 - (*player).actor.world.pos.x;
        temp_f12 = -200.0f32 - (*player).actor.world.pos.z;
        if sqrtf(temp_f2 * temp_f2 + temp_f12 * temp_f12) > 784.0f32 {
            j = 0 as libc::c_int as s16;
            while (j as libc::c_int) <
                      (::std::mem::size_of::<[u8_0; 18]>() as
                           libc::c_ulong).wrapping_div(::std::mem::size_of::<u8_0>()
                                                           as libc::c_ulong)
                          as s32 {
                (*player).flameTimers[j as usize] =
                    Rand_S16Offset(0 as libc::c_int as s16,
                                   200 as libc::c_int as s16) as u8_0;
                j += 1
            }
            (*player).isBurning = 1 as libc::c_int as u8_0;
            func_8002F6D4(globalCtx, &mut (*this).actor, 10.0f32,
                          Math_Atan2S(temp_f12, temp_f2), 0.0f32,
                          0x10 as libc::c_int as u32_0);
            (*sZelda).unk_3C8 = 8 as libc::c_int as u8_0
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80902524(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut temp_v0_4: s8 = 0;
    let mut acHitInfo: *mut ColliderInfo = 0 as *mut ColliderInfo;
    let mut i: s16 = 0;
    let mut phi_v1_2: u8_0 = 0;
    osSyncPrintf(b"this->no_hit_time %d\n\x00" as *const u8 as
                     *const libc::c_char, (*this).unk_316 as libc::c_int);
    if (*this).unk_316 as libc::c_int != 0 as libc::c_int ||
           (*this).unk_334 as libc::c_int == 0 as libc::c_int &&
               (*this).actionFunc ==
                   Some(func_80900890 as
                            unsafe extern "C" fn(_: *mut BossGanon2,
                                                 _: *mut GlobalContext) -> ())
       {
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) <
                  (::std::mem::size_of::<[ColliderJntSphElement; 16]>() as
                       libc::c_ulong).wrapping_div(::std::mem::size_of::<ColliderJntSphElement>()
                                                       as libc::c_ulong) as
                      s32 {
            let ref mut fresh4 =
                (*(*this).unk_424.elements.offset(i as
                                                      isize)).info.bumperFlags;
            *fresh4 = (*fresh4 as libc::c_int & !(2 as libc::c_int)) as u8_0;
            i += 1
        }
    }
    osSyncPrintf(b"this->look_on %d\n\x00" as *const u8 as
                     *const libc::c_char, (*this).unk_313 as libc::c_int);
    if (*this).unk_313 != 0 {
        if (*this).actionFunc !=
               Some(func_808FFFE0 as
                        unsafe extern "C" fn(_: *mut BossGanon2,
                                             _: *mut GlobalContext) -> ()) {
            if (*(*this).unk_424.elements.offset(0 as libc::c_int as
                                                     isize)).info.bumperFlags
                   as libc::c_int & 2 as libc::c_int != 0 {
                let ref mut fresh5 =
                    (*(*this).unk_424.elements.offset(0 as libc::c_int as
                                                          isize)).info.bumperFlags;
                *fresh5 =
                    (*fresh5 as libc::c_int & !(2 as libc::c_int)) as u8_0;
                acHitInfo =
                    (*(*this).unk_424.elements.offset(0 as libc::c_int as
                                                          isize)).info.acHitInfo;
                if (*acHitInfo).toucher.dmgFlags &
                       0x2000 as libc::c_int as libc::c_uint != 0 &&
                       (*this).actionFunc !=
                           Some(func_80900890 as
                                    unsafe extern "C" fn(_: *mut BossGanon2,
                                                         _:
                                                             *mut GlobalContext)
                                        -> ()) {
                    func_809000A0(this, globalCtx);
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x38a8 as libc::c_int as u16_0);
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x399b as libc::c_int as u16_0);
                    Audio_StopSfxById(0x39d9 as libc::c_int as u32_0);
                } else if (*this).actionFunc ==
                              Some(func_80900890 as
                                       unsafe extern "C" fn(_:
                                                                *mut BossGanon2,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()) &&
                              (*acHitInfo).toucher.dmgFlags &
                                  0x9000200 as libc::c_int as libc::c_uint !=
                                  0 {
                    (*this).unk_316 = 60 as libc::c_int as s16;
                    (*this).unk_342 = 5 as libc::c_int as s16;
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x399b as libc::c_int as u16_0);
                    Audio_StopSfxById(0x39d9 as libc::c_int as u32_0);
                    (*this).actor.colChkInfo.health =
                        ((*this).actor.colChkInfo.health as libc::c_int -
                             2 as libc::c_int) as u8_0;
                    temp_v0_4 = (*this).actor.colChkInfo.health as s8;
                    if (temp_v0_4 as libc::c_int) < 0x15 as libc::c_int &&
                           (*this).unk_334 as libc::c_int == 0 as libc::c_int
                       {
                        func_80900818(this, globalCtx);
                    } else if temp_v0_4 as libc::c_int <= 0 as libc::c_int {
                        func_80901020(this, globalCtx);
                    } else { func_80900210(this, globalCtx); }
                } else if (*this).actionFunc !=
                              Some(func_80900890 as
                                       unsafe extern "C" fn(_:
                                                                *mut BossGanon2,
                                                            _:
                                                                *mut GlobalContext)
                                           -> ()) {
                    func_808FFF90(this, globalCtx);
                    Audio_PlayActorSound2(&mut (*this).actor,
                                          0x1813 as libc::c_int as u16_0);
                }
            }
        }
    } else if (*(*this).unk_424.elements.offset(15 as libc::c_int as
                                                    isize)).info.bumperFlags
                  as libc::c_int & 2 as libc::c_int != 0 {
        let ref mut fresh6 =
            (*(*this).unk_424.elements.offset(15 as libc::c_int as
                                                  isize)).info.bumperFlags;
        *fresh6 = (*fresh6 as libc::c_int & !(2 as libc::c_int)) as u8_0;
        acHitInfo =
            (*(*this).unk_424.elements.offset(15 as libc::c_int as
                                                  isize)).info.acHitInfo;
        (*this).unk_316 = 60 as libc::c_int as s16;
        (*this).unk_344 = 0x32 as libc::c_int as s16;
        (*this).unk_342 = 5 as libc::c_int as s16;
        Audio_PlayActorSound2(&mut (*this).actor,
                              0x399b as libc::c_int as u16_0);
        Audio_StopSfxById(0x39d9 as libc::c_int as u32_0);
        phi_v1_2 = 1 as libc::c_int as u8_0;
        if (*acHitInfo).toucher.dmgFlags &
               0x9000200 as libc::c_int as libc::c_uint != 0 {
            if (*acHitInfo).toucher.dmgFlags &
                   0x8000000 as libc::c_int as libc::c_uint != 0 {
                phi_v1_2 = 4 as libc::c_int as u8_0
            } else { phi_v1_2 = 2 as libc::c_int as u8_0 }
        }
        (*this).actor.colChkInfo.health =
            ((*this).actor.colChkInfo.health as libc::c_int -
                 phi_v1_2 as libc::c_int) as u8_0;
        temp_v0_4 = (*this).actor.colChkInfo.health as s8;
        if (temp_v0_4 as libc::c_int) < 0x15 as libc::c_int &&
               (*this).unk_334 as libc::c_int == 0 as libc::c_int {
            func_80900818(this, globalCtx);
        } else if temp_v0_4 as libc::c_int <= 0 as libc::c_int &&
                      phi_v1_2 as libc::c_int >= 2 as libc::c_int {
            func_80901020(this, globalCtx);
        } else {
            if temp_v0_4 as libc::c_int <= 0 as libc::c_int {
                (*this).actor.colChkInfo.health = 1 as libc::c_int as u8_0
            }
            func_80900210(this, globalCtx);
        }
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_Update(mut thisx: *mut Actor,
                                           mut globalCtx:
                                               *mut GlobalContext) {
    let mut this: *mut BossGanon2 = thisx as *mut BossGanon2;
    let mut pad: s32 = 0;
    let mut i: s16 = 0;
    let mut phi_f2: f32_0 = 0.;
    let mut i2: u16_0 = 0;
    let mut sp58: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp4C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut angle: f32_0 = 0.;
    let mut sp44: f32_0 = 0.;
    if (*this).unk_337 as libc::c_int == 0 as libc::c_int ||
           (*this).unk_337 as libc::c_int == 2 as libc::c_int {
        BossGanon2_SetObjectSegment(this, globalCtx,
                                    OBJECT_GANON_ANIME3 as libc::c_int,
                                    0 as libc::c_int as u8_0);
    } else {
        BossGanon2_SetObjectSegment(this, globalCtx,
                                    OBJECT_GANON2 as libc::c_int,
                                    0 as libc::c_int as u8_0);
        Math_ApproachZeroF(&mut (*this).unk_30C, 1.0f32, 0.5f32);
    }
    func_808FFC84(this);
    (*this).unk_312 = 0 as libc::c_int as u8_0;
    (*this).unk_19C += 1;
    Actor_SetScale(&mut (*this).actor, 0.01f32);
    (*this).actionFunc.expect("non-null function pointer")(this, globalCtx);
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              (::std::mem::size_of::<[s16; 5]>() as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<s16>() as
                                                   libc::c_ulong) as s32 {
        if (*this).unk_1A2[i as usize] as libc::c_int != 0 as libc::c_int {
            (*this).unk_1A2[i as usize] -= 1
        }
        i += 1
    }
    if (*this).unk_316 as libc::c_int != 0 as libc::c_int {
        (*this).unk_316 -= 1
    }
    if (*this).unk_342 as libc::c_int != 0 as libc::c_int {
        (*this).unk_342 -= 1
    }
    if (*this).unk_390 as libc::c_int != 0 as libc::c_int {
        (*this).unk_390 -= 1
    }
    if (*this).unk_392 as libc::c_int != 0 as libc::c_int {
        (*this).unk_392 -= 1
    }
    Actor_MoveForward(&mut (*this).actor);
    (*this).actor.shape.rot = (*this).actor.world.rot;
    if (*this).unk_335 as libc::c_int != 0 as libc::c_int {
        Actor_UpdateBgCheckInfo(globalCtx, &mut (*this).actor, 60.0f32,
                                60.0f32, 100.0f32, 5 as libc::c_int);
        if (*this).actor.bgCheckFlags as libc::c_int & 1 as libc::c_int != 0 {
            if (*this).actor.velocity.y < -5.0f32 {
                func_80033E88(&mut (*this).actor, globalCtx,
                              5 as libc::c_int as s16,
                              20 as libc::c_int as s16);
                func_80078884(0x180e as libc::c_int as u16_0);
            }
            (*this).actor.velocity.y = 0.0f32
        }
    }
    if (*this).unk_19C as libc::c_int & 0x1f as libc::c_int ==
           0 as libc::c_int && Rand_ZeroOne() < 0.3f32 {
        (*this).unk_318 = 4 as libc::c_int as s16
    }
    (*this).unk_310 = D_80907074[(*this).unk_318 as usize] as u8_0;
    if (*this).unk_318 as libc::c_int != 0 as libc::c_int {
        (*this).unk_318 -= 1
    }
    (*this).unk_1B0 =
        Math_SinS(((*this).unk_19C as libc::c_int * 0x2aaa as libc::c_int) as
                      s16) * 64.0f32 + 191.0f32;
    if (*this).unk_344 as libc::c_int != 0 as libc::c_int {
        (*this).unk_344 -= 1;
        Math_ApproachF(&mut (*this).unk_360.x, 5000.0f32, 0.5f32, 3000.0f32);
        Math_ApproachF(&mut (*this).unk_370.x, 5500.0f32, 0.5f32, 3000.0f32);
        Math_ApproachF(&mut (*this).unk_360.z, 8000.0f32, 0.1f32, 4000.0f32);
        Math_ApproachF(&mut (*this).unk_370.z, 8000.0f32, 0.1f32, 4000.0f32);
        Math_ApproachS(&mut (*this).unk_346, 0xfa0 as libc::c_int as s16,
                       0xa as libc::c_int as s16,
                       0x7d0 as libc::c_int as s16);
    } else {
        (*this).unk_360.y = 14000.0f32;
        Math_ApproachF(&mut (*this).unk_360.x, 2000.0f32, 0.1f32, 100.0f32);
        (*this).unk_370.y = 12000.0f32;
        Math_ApproachF(&mut (*this).unk_370.x, 1500.0f32, 0.1f32, 100.0f32);
        if (*this).actionFunc ==
               Some(func_808FFEBC as
                        unsafe extern "C" fn(_: *mut BossGanon2,
                                             _: *mut GlobalContext) -> ()) ||
               (*this).actionFunc ==
                   Some(func_808FFFE0 as
                            unsafe extern "C" fn(_: *mut BossGanon2,
                                                 _: *mut GlobalContext) -> ())
               ||
               (*this).actionFunc ==
                   Some(func_80900104 as
                            unsafe extern "C" fn(_: *mut BossGanon2,
                                                 _: *mut GlobalContext) -> ())
           {
            Math_ApproachF(&mut (*this).unk_360.z, 1000.0f32, 0.1f32,
                           100.0f32);
            Math_ApproachF(&mut (*this).unk_370.z, 1000.0f32, 0.1f32,
                           100.0f32);
            Math_ApproachS(&mut (*this).unk_346,
                           -(0xfa0 as libc::c_int) as s16,
                           0xa as libc::c_int as s16,
                           0x64 as libc::c_int as s16);
        } else {
            Math_ApproachF(&mut (*this).unk_360.z, 5000.0f32, 0.1f32,
                           200.0f32);
            Math_ApproachF(&mut (*this).unk_370.z, 5000.0f32, 0.1f32,
                           200.0f32);
            Math_ApproachS(&mut (*this).unk_346, 0 as libc::c_int as s16,
                           0xa as libc::c_int as s16,
                           0x64 as libc::c_int as s16);
        }
    }
    if (*this).unk_39C as libc::c_int != 75 as libc::c_int {
        (*this).unk_35C += (*this).unk_360.x;
        (*this).unk_36C += (*this).unk_370.x
    }
    if (*this).unk_337 as libc::c_int == 2 as libc::c_int {
        (*this).unk_370.z = 0.0f32;
        (*this).unk_360.z = 0.0f32
    }
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              (::std::mem::size_of::<[s16; 5]>() as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<s16>() as
                                                   libc::c_ulong) as s32 {
        if i as libc::c_int == 0 as libc::c_int {
            phi_f2 = 0.2f32
        } else if i as libc::c_int == 1 as libc::c_int {
            phi_f2 = 0.5f32
        } else { phi_f2 = 1.0f32 }
        (*this).unk_348[i as usize] =
            (Math_SinS(((*this).unk_35C as s16 as libc::c_int +
                            i as libc::c_int *
                                (*this).unk_360.y as s16 as libc::c_int) as
                           s16) * phi_f2 * (*this).unk_360.z) as s16;
        (*this).unk_352[i as usize] =
            (Math_SinS(((*this).unk_36C as s16 as libc::c_int +
                            i as libc::c_int *
                                (*this).unk_370.y as s16 as libc::c_int) as
                           s16) * phi_f2 * (*this).unk_370.z) as s16;
        i += 1
    }
    func_808FF898(this, globalCtx);
    func_80902348(this, globalCtx);
    CollisionCheck_SetOC(globalCtx, &mut (*globalCtx).colChkCtx,
                         &mut (*this).unk_424.base);
    if (*this).actionFunc !=
           Some(func_8090120C as
                    unsafe extern "C" fn(_: *mut BossGanon2,
                                         _: *mut GlobalContext) -> ()) {
        func_80902524(this, globalCtx);
        CollisionCheck_SetAC(globalCtx, &mut (*globalCtx).colChkCtx,
                             &mut (*this).unk_424.base);
        CollisionCheck_SetOC(globalCtx, &mut (*globalCtx).colChkCtx,
                             &mut (*this).unk_444.base);
        CollisionCheck_SetAC(globalCtx, &mut (*globalCtx).colChkCtx,
                             &mut (*this).unk_444.base);
        if (*this).unk_39E as libc::c_int == 0 as libc::c_int {
            CollisionCheck_SetAT(globalCtx, &mut (*globalCtx).colChkCtx,
                                 &mut (*this).unk_444.base);
        }
    }
    if (*this).unk_332 as libc::c_int == 0 as libc::c_int &&
           (*this).unk_336 as libc::c_int != 0 as libc::c_int {
        if (*this).unk_336 as libc::c_int == 2 as libc::c_int {
            (*this).unk_332 =
                (Rand_ZeroFloat(30.0f32) as s16 as libc::c_int +
                     8 as libc::c_int) as s16
        } else {
            (*this).unk_332 =
                (Rand_ZeroFloat(60.0f32) as s16 as libc::c_int +
                     0xa as libc::c_int) as s16
        }
        (*this).unk_339 = 0 as libc::c_int as s8;
        (*globalCtx).envCtx.unk_BE = 0 as libc::c_int as u8_0;
        (*globalCtx).envCtx.unk_BD =
            (Rand_ZeroFloat(1.9f32) as s8 as libc::c_int + 1 as libc::c_int)
                as u8_0;
        (*globalCtx).envCtx.unk_D8 = 1.0f32;
        D_8090EB20.y = 0.0f32;
        D_8090EB20.x = D_8090EB20.y;
        D_8090EB20.z = D_8090EB20.x;
        if Rand_ZeroOne() < 0.5f32 {
            D_8090EB20.z = Rand_ZeroFloat(1000.0f32)
        }
        func_80078914(&mut D_8090EB20, 0x282e as libc::c_int as u16_0);
        (*this).unk_328 = 0xff as libc::c_int as s16;
        (*this).unk_330 = 5 as libc::c_int as s16;
        (*this).unk_32C = 0.0f32;
        (*this).unk_340 = Rand_ZeroFloat(10000.0f32) as s16
    } else if (*this).unk_332 as libc::c_int != 0 as libc::c_int {
        (*this).unk_332 -= 1
    }
    if (*globalCtx).envCtx.unk_D8 > 0.0f32 &&
           (*this).unk_336 as libc::c_int != 0 as libc::c_int {
        (*globalCtx).envCtx.customSkyboxFilter = 1 as libc::c_int as u8_0;
        (*globalCtx).envCtx.skyboxFilterColor[0 as libc::c_int as usize] =
            255 as libc::c_int as u8_0;
        (*globalCtx).envCtx.skyboxFilterColor[1 as libc::c_int as usize] =
            255 as libc::c_int as u8_0;
        (*globalCtx).envCtx.skyboxFilterColor[2 as libc::c_int as usize] =
            255 as libc::c_int as u8_0;
        (*globalCtx).envCtx.skyboxFilterColor[3 as libc::c_int as usize] =
            ((*globalCtx).envCtx.unk_D8 * 200.0f32) as s16 as u8_0
    } else {
        (*globalCtx).envCtx.customSkyboxFilter = 0 as libc::c_int as u8_0
    }
    (*globalCtx).envCtx.unk_BF = 0 as libc::c_int as u8_0;
    (*globalCtx).envCtx.unk_DC = 2 as libc::c_int as u8_0;
    match (*this).unk_339 as libc::c_int {
        0 => {
            Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               0.1f32);
        }
        3 => {
            (*globalCtx).envCtx.unk_BE = 3 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 4 as libc::c_int as u8_0;
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32, 1.0f32,
                           0.0125f32);
        }
        4 => {
            (*globalCtx).envCtx.unk_BE = 5 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 6 as libc::c_int as u8_0;
            Math_ApproachF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32, 1.0f32,
                           0.0125f32);
        }
        5 => {
            (*globalCtx).envCtx.unk_BE = 6 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 7 as libc::c_int as u8_0;
            Math_ApproachF(&mut (*this).unk_33C, 0.69f32, 1.0f32, 0.05f32);
            (*globalCtx).envCtx.unk_D8 =
                Math_SinS((*globalCtx).gameplayFrames.wrapping_mul(0x5000 as
                                                                       libc::c_int
                                                                       as
                                                                       libc::c_uint)
                              as s16) * 0.15f32 + (0.15f32 + (*this).unk_33C)
        }
        55 => {
            (*globalCtx).envCtx.unk_BE = 2 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 0 as libc::c_int as u8_0;
            Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               0.05f32);
        }
        6 => {
            (*globalCtx).envCtx.unk_BE = 2 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 8 as libc::c_int as u8_0;
            Math_ApproachF(&mut (*this).unk_33C, 0.69f32, 1.0f32, 0.05f32);
            (*globalCtx).envCtx.unk_D8 =
                Math_SinS((*globalCtx).gameplayFrames.wrapping_mul(0x7000 as
                                                                       libc::c_int
                                                                       as
                                                                       libc::c_uint)
                              as s16) * 0.15f32 + (0.15f32 + (*this).unk_33C)
        }
        7 => {
            (*globalCtx).envCtx.unk_BE = 0 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 8 as libc::c_int as u8_0;
            Math_ApproachZeroF(&mut (*globalCtx).envCtx.unk_D8, 1.0f32,
                               0.02f32);
        }
        20 => {
            (*globalCtx).envCtx.unk_BE = 0 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 9 as libc::c_int as u8_0
        }
        21 => {
            (*globalCtx).envCtx.unk_BE = 0xa as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 9 as libc::c_int as u8_0
        }
        22 => {
            (*globalCtx).envCtx.unk_BE = 0xa as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 0xb as libc::c_int as u8_0
        }
        23 => {
            (*globalCtx).envCtx.unk_BE = 9 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 0xb as libc::c_int as u8_0
        }
        24 => {
            (*globalCtx).envCtx.unk_BE = 0 as libc::c_int as u8_0;
            (*globalCtx).envCtx.unk_BD = 0xc as libc::c_int as u8_0
        }
        -1 | _ => { }
    }
    if (*this).unk_339 as libc::c_int >= 0 as libc::c_int {
        (*this).unk_339 = 0 as libc::c_int as s8
    }
    if D_80906D78 as libc::c_int != 0 as libc::c_int {
        D_80906D78 = 0 as libc::c_int as u8_0;
        i2 = 0 as libc::c_int as u16_0;
        while (i2 as libc::c_int) <
                  (::std::mem::size_of::<[BossGanon2Effect; 100]>() as
                       libc::c_ulong).wrapping_div(::std::mem::size_of::<BossGanon2Effect>()
                                                       as libc::c_ulong) as
                      s32 {
            angle =
                Rand_ZeroFloat(2 as libc::c_int as libc::c_float *
                                   3.14159265358979323846f32);
            sp44 = Rand_ZeroFloat(40.0f32) + 10.0f32;
            sp58 = (*this).actor.world.pos;
            sp58.y = 1200.0f32;
            sp4C.x = cosf(angle) * sp44;
            sp4C.z = sinf(angle) * sp44;
            sp4C.y = Rand_ZeroFloat(15.0f32) + 15.0f32;
            sp58.x += sp4C.x * 10.0f32 * 0.1f32;
            sp58.z += sp4C.z * 10.0f32 * 0.1f32;
            func_808FD27C(globalCtx, &mut sp58, &mut sp4C,
                          Rand_ZeroFloat(0.3f32) + 0.2f32);
            i2 = i2.wrapping_add(1)
        }
    }
    (*this).unk_388 += 0.15f32;
    func_80905DA8(this, globalCtx);
}
#[no_mangle]
pub unsafe extern "C" fn func_809034E4(mut arg0: *mut Vec3f,
                                       mut arg1: *mut Vec3f) {
    let mut vtx: *mut Vtx = 0 as *mut Vtx;
    let mut sp2D0: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut temp_s1: s16 = 0;
    let mut temp_a1: s16 = 0;
    let mut sp2CA: s16 = 0;
    let mut sp2C8: s16 = 0;
    let mut i: s16 = 0;
    let mut phi_s2: u8_0 = 0;
    let mut temp_s4: u8_0 = 0;
    let mut temp_s4_2: u8_0 = 0;
    let mut temp_f12: f32_0 = 0.;
    let mut temp_f20: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut temp_f2: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut temp_f22: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp294: f32_0 = 0.;
    let mut phi_f30: f32_0 = 0.;
    let mut temp_f28: f32_0 = 0.;
    let mut temp_f26: f32_0 = 0.;
    let mut pad: [s32; 3] = [0; 3];
    let mut sp18C: [Vec3f; 20] = [Vec3f{x: 0., y: 0., z: 0.,}; 20];
    let mut sp9C: [Vec3f; 20] = [Vec3f{x: 0., y: 0., z: 0.,}; 20];
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 20 as libc::c_int {
        sp18C[i as usize] = *arg0;
        sp9C[i as usize] = *arg1;
        i += 1
    }
    temp_s4 = 0 as libc::c_int as u8_0;
    D_809105D8[3 as libc::c_int as usize] =
        D_809105D8[2 as libc::c_int as usize];
    D_809105D8[2 as libc::c_int as usize] =
        D_809105D8[1 as libc::c_int as usize];
    D_809105D8[1 as libc::c_int as usize] =
        D_809105D8[0 as libc::c_int as usize];
    D_809105D8[0 as libc::c_int as usize] = *arg0;
    sp2D0 = D_809105D8[0 as libc::c_int as usize];
    temp_f20.x = D_809105D8[1 as libc::c_int as usize].x - sp2D0.x;
    temp_f20.y = D_809105D8[1 as libc::c_int as usize].y - sp2D0.y;
    temp_f20.z = D_809105D8[1 as libc::c_int as usize].z - sp2D0.z;
    sp2CA = Math_Atan2S(temp_f20.z, temp_f20.x);
    sp2C8 =
        Math_Atan2S(sqrtf(temp_f20.x * temp_f20.x + temp_f20.z * temp_f20.z),
                    temp_f20.y);
    temp_f2.x =
        D_809105D8[2 as libc::c_int as usize].x -
            D_809105D8[1 as libc::c_int as usize].x;
    temp_f2.y =
        D_809105D8[2 as libc::c_int as usize].y -
            D_809105D8[1 as libc::c_int as usize].y;
    temp_f2.z =
        D_809105D8[2 as libc::c_int as usize].z -
            D_809105D8[1 as libc::c_int as usize].z;
    temp_f22.x =
        D_809105D8[3 as libc::c_int as usize].x -
            D_809105D8[2 as libc::c_int as usize].x;
    temp_f22.y =
        D_809105D8[3 as libc::c_int as usize].y -
            D_809105D8[2 as libc::c_int as usize].y;
    temp_f22.z =
        D_809105D8[3 as libc::c_int as usize].z -
            D_809105D8[2 as libc::c_int as usize].z;
    temp_f12 =
        sqrtf(temp_f20.x * temp_f20.x + temp_f20.y * temp_f20.y +
                  temp_f20.z * temp_f20.z) +
            sqrtf(temp_f2.x * temp_f2.x + temp_f2.y * temp_f2.y +
                      temp_f2.z * temp_f2.z) +
            sqrtf(temp_f22.x * temp_f22.x + temp_f22.y * temp_f22.y +
                      temp_f22.z * temp_f22.z);
    if temp_f12 <= 1.0f32 { temp_f12 = 1.0f32 }
    temp_f28 = temp_f12 * 0.083f32;
    phi_f30 =
        sqrtf(temp_f20.x * temp_f20.x + temp_f20.y * temp_f20.y +
                  temp_f20.z * temp_f20.z) / 2.0f32;
    sp294 =
        sqrtf(temp_f2.x * temp_f2.x + temp_f2.y * temp_f2.y +
                  temp_f2.z * temp_f2.z) / 2.0f32;
    phi_s2 = 1 as libc::c_int as u8_0;
    loop  {
        temp_f20.x = D_809105D8[phi_s2 as usize].x - sp2D0.x;
        temp_f20.y = D_809105D8[phi_s2 as usize].y - sp2D0.y;
        temp_f20.z = D_809105D8[phi_s2 as usize].z - sp2D0.z;
        temp_s1 = Math_Atan2S(temp_f20.z, temp_f20.x);
        temp_a1 =
            Math_Atan2S(sqrtf(temp_f20.x * temp_f20.x +
                                  temp_f20.z * temp_f20.z), temp_f20.y);
        Math_ApproachS(&mut sp2C8, temp_a1, 1 as libc::c_int as s16,
                       0x1000 as libc::c_int as s16);
        Math_ApproachS(&mut sp2CA, temp_s1, 1 as libc::c_int as s16,
                       0x1000 as libc::c_int as s16);
        temp_f26 = temp_f28 * Math_CosS(sp2C8);
        sp18C[temp_s4 as usize] = sp2D0;
        sp2D0.x += temp_f26 * Math_SinS(sp2CA);
        sp2D0.y += temp_f28 * Math_SinS(sp2C8);
        sp2D0.z += temp_f26 * Math_CosS(sp2CA);
        temp_f20.x = D_809105D8[phi_s2 as usize].x - sp2D0.x;
        temp_f20.y = D_809105D8[phi_s2 as usize].y - sp2D0.y;
        temp_f20.z = D_809105D8[phi_s2 as usize].z - sp2D0.z;
        if (phi_s2 as libc::c_int) < 3 as libc::c_int {
            if sqrtf(temp_f20.x * temp_f20.x + temp_f20.y * temp_f20.y +
                         temp_f20.z * temp_f20.z) <= phi_f30 {
                phi_f30 = sp294;
                phi_s2 = phi_s2.wrapping_add(1)
            }
        } else if sqrtf(temp_f20.x * temp_f20.x + temp_f20.y * temp_f20.y +
                            temp_f20.z * temp_f20.z) <= temp_f28 + 1.0f32 {
            phi_s2 = phi_s2.wrapping_add(1)
        }
        temp_s4 = temp_s4.wrapping_add(1);
        if temp_s4 as libc::c_int >= 20 as libc::c_int ||
               phi_s2 as libc::c_int >= 4 as libc::c_int {
            break ;
        }
    }
    temp_s4_2 = 0 as libc::c_int as u8_0;
    D_80910608[3 as libc::c_int as usize] =
        D_80910608[2 as libc::c_int as usize];
    D_80910608[2 as libc::c_int as usize] =
        D_80910608[1 as libc::c_int as usize];
    D_80910608[1 as libc::c_int as usize] =
        D_80910608[0 as libc::c_int as usize];
    D_80910608[0 as libc::c_int as usize] = *arg1;
    sp2D0 = D_80910608[0 as libc::c_int as usize];
    temp_f20.x = D_80910608[1 as libc::c_int as usize].x - sp2D0.x;
    temp_f20.y = D_80910608[1 as libc::c_int as usize].y - sp2D0.y;
    temp_f20.z = D_80910608[1 as libc::c_int as usize].z - sp2D0.z;
    sp2CA = Math_Atan2S(temp_f20.z, temp_f20.x);
    sp2C8 =
        Math_Atan2S(sqrtf(temp_f20.x * temp_f20.x + temp_f20.z * temp_f20.z),
                    temp_f20.y);
    temp_f2.x =
        D_80910608[2 as libc::c_int as usize].x -
            D_80910608[1 as libc::c_int as usize].x;
    temp_f2.y =
        D_80910608[2 as libc::c_int as usize].y -
            D_80910608[1 as libc::c_int as usize].y;
    temp_f2.z =
        D_80910608[2 as libc::c_int as usize].z -
            D_80910608[1 as libc::c_int as usize].z;
    temp_f22.x =
        D_80910608[3 as libc::c_int as usize].x -
            D_80910608[2 as libc::c_int as usize].x;
    temp_f22.y =
        D_80910608[3 as libc::c_int as usize].y -
            D_80910608[2 as libc::c_int as usize].y;
    temp_f22.z =
        D_80910608[3 as libc::c_int as usize].z -
            D_80910608[2 as libc::c_int as usize].z;
    temp_f12 =
        sqrtf(temp_f20.x * temp_f20.x + temp_f20.y * temp_f20.y +
                  temp_f20.z * temp_f20.z) +
            sqrtf(temp_f2.x * temp_f2.x + temp_f2.y * temp_f2.y +
                      temp_f2.z * temp_f2.z) +
            sqrtf(temp_f22.x * temp_f22.x + temp_f22.y * temp_f22.y +
                      temp_f22.z * temp_f22.z);
    if temp_f12 <= 1.0f32 { temp_f12 = 1.0f32 }
    temp_f28 = temp_f12 * 0.083f32;
    phi_f30 =
        sqrtf(temp_f20.x * temp_f20.x + temp_f20.y * temp_f20.y +
                  temp_f20.z * temp_f20.z) / 2.0f32;
    sp294 =
        sqrtf(temp_f2.x * temp_f2.x + temp_f2.y * temp_f2.y +
                  temp_f2.z * temp_f2.z) / 2.0f32;
    phi_s2 = 1 as libc::c_int as u8_0;
    loop  {
        temp_f20.x = D_80910608[phi_s2 as usize].x - sp2D0.x;
        temp_f20.y = D_80910608[phi_s2 as usize].y - sp2D0.y;
        temp_f20.z = D_80910608[phi_s2 as usize].z - sp2D0.z;
        temp_s1 = Math_Atan2S(temp_f20.z, temp_f20.x);
        temp_a1 =
            Math_Atan2S(sqrtf(temp_f20.x * temp_f20.x +
                                  temp_f20.z * temp_f20.z), temp_f20.y);
        Math_ApproachS(&mut sp2C8, temp_a1, 1 as libc::c_int as s16,
                       0x1000 as libc::c_int as s16);
        Math_ApproachS(&mut sp2CA, temp_s1, 1 as libc::c_int as s16,
                       0x1000 as libc::c_int as s16);
        temp_f26 = temp_f28 * Math_CosS(sp2C8);
        sp9C[temp_s4_2 as usize] = sp2D0;
        sp2D0.x += temp_f26 * Math_SinS(sp2CA);
        sp2D0.y += temp_f28 * Math_SinS(sp2C8);
        sp2D0.z += temp_f26 * Math_CosS(sp2CA);
        temp_f20.x = D_80910608[phi_s2 as usize].x - sp2D0.x;
        temp_f20.y = D_80910608[phi_s2 as usize].y - sp2D0.y;
        temp_f20.z = D_80910608[phi_s2 as usize].z - sp2D0.z;
        if (phi_s2 as libc::c_int) < 3 as libc::c_int {
            if sqrtf(temp_f20.x * temp_f20.x + temp_f20.y * temp_f20.y +
                         temp_f20.z * temp_f20.z) <= phi_f30 {
                phi_f30 = sp294;
                phi_s2 = phi_s2.wrapping_add(1)
            }
        } else if sqrtf(temp_f20.x * temp_f20.x + temp_f20.y * temp_f20.y +
                            temp_f20.z * temp_f20.z) <= temp_f28 + 1.0f32 {
            phi_s2 = phi_s2.wrapping_add(1)
        }
        temp_s4_2 = temp_s4_2.wrapping_add(1);
        if temp_s4_2 as libc::c_int >= 20 as libc::c_int ||
               phi_s2 as libc::c_int >= 4 as libc::c_int {
            break ;
        }
    }
    vtx =
        gSegments[((ovl_Boss_Ganon2_Vtx_00BA20.as_mut_ptr() as u32_0) <<
                       4 as libc::c_int >> 28 as libc::c_int) as
                      usize].wrapping_add(ovl_Boss_Ganon2_Vtx_00BA20.as_mut_ptr()
                                              as u32_0 &
                                              0xffffff as libc::c_int as
                                                  libc::c_uint).wrapping_add(0x80000000
                                                                                 as
                                                                                 libc::c_uint)
            as *mut libc::c_void as *mut Vtx;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 11 as libc::c_int {
        if temp_s4 as libc::c_int - i as libc::c_int > 0 as libc::c_int {
            (*vtx.offset(D_80907084[i as usize] as
                             isize)).n.ob[0 as libc::c_int as usize] =
                sp18C[(temp_s4 as libc::c_int - i as libc::c_int -
                           1 as libc::c_int) as usize].x as libc::c_short;
            (*vtx.offset(D_80907084[i as usize] as
                             isize)).n.ob[1 as libc::c_int as usize] =
                sp18C[(temp_s4 as libc::c_int - i as libc::c_int -
                           1 as libc::c_int) as usize].y as libc::c_short;
            (*vtx.offset(D_80907084[i as usize] as
                             isize)).n.ob[2 as libc::c_int as usize] =
                sp18C[(temp_s4 as libc::c_int - i as libc::c_int -
                           1 as libc::c_int) as usize].z as libc::c_short
        }
        if temp_s4_2 as libc::c_int - i as libc::c_int > 0 as libc::c_int {
            (*vtx.offset(D_80907090[i as usize] as
                             isize)).n.ob[0 as libc::c_int as usize] =
                sp9C[(temp_s4_2 as libc::c_int - i as libc::c_int -
                          1 as libc::c_int) as usize].x as libc::c_short;
            (*vtx.offset(D_80907090[i as usize] as
                             isize)).n.ob[1 as libc::c_int as usize] =
                sp9C[(temp_s4_2 as libc::c_int - i as libc::c_int -
                          1 as libc::c_int) as usize].y as libc::c_short;
            (*vtx.offset(D_80907090[i as usize] as
                             isize)).n.ob[2 as libc::c_int as usize] =
                sp9C[(temp_s4_2 as libc::c_int - i as libc::c_int -
                          1 as libc::c_int) as usize].z as libc::c_short
        }
        i += 1
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80903F38(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon2.c\x00" as *const u8 as
                        *const libc::c_char, 5083 as libc::c_int);
    if (*this).unk_312 as libc::c_int != 0 as libc::c_int {
        func_809034E4(&mut (*this).unk_200, &mut (*this).unk_20C);
        D_80907080 = 0xff as libc::c_int as s16
    }
    if D_80910638 as libc::c_int >= 4 as libc::c_int {
        let fresh7 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh7;
        (*_g).words.w0 =
            (0xdb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0x6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 =
            Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                             0 as libc::c_int as u32_0,
                             0 as libc::c_int as u32_0, 32 as libc::c_int,
                             32 as libc::c_int, 1 as libc::c_int,
                             (*globalCtx).gameplayFrames.wrapping_mul(18 as
                                                                          libc::c_int
                                                                          as
                                                                          libc::c_uint),
                             0 as libc::c_int as u32_0, 32 as libc::c_int,
                             32 as libc::c_int) as libc::c_uint;
        let fresh8 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh8;
        (*_g_0).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_0).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh9 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_1: *mut Gfx = fresh9;
        (*_g_1).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_1).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (D_80907080 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        Matrix_Translate(0.0f32, 0.0f32, 0.0f32,
                         MTXMODE_NEW as libc::c_int as u8_0);
        let fresh10 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_2: *mut Gfx = fresh10;
        (*_g_2).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon2.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          5117 as libc::c_int) as libc::c_uint;
        let fresh11 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh11;
        (*_g_3).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            ovl_Boss_Ganon2_DL_00BB80.as_mut_ptr() as libc::c_uint
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon2.c\x00" as *const u8 as
                         *const libc::c_char, 5122 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80904108(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut pad: s32 = 0;
    if (*this).unk_324 > 0.0f32 {
        let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
        let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
        __gfxCtx = (*globalCtx).state.gfxCtx;
        Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                        b"../z_boss_ganon2.c\x00" as *const u8 as
                            *const libc::c_char, 5131 as libc::c_int);
        Matrix_Push();
        let fresh12 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh12;
        (*_g).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh13 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh13;
        (*_g_0).words.w0 =
            (0xdb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0x6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_0).words.w1 =
            Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                             (*globalCtx).gameplayFrames as s32 as u32_0,
                             0 as libc::c_int as u32_0, 32 as libc::c_int,
                             64 as libc::c_int, 1 as libc::c_int,
                             (*globalCtx).gameplayFrames.wrapping_neg().wrapping_mul(2
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint),
                             (*globalCtx).gameplayFrames.wrapping_neg().wrapping_mul(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint),
                             32 as libc::c_int, 32 as libc::c_int) as
                libc::c_uint;
        let fresh14 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_1: *mut Gfx = fresh14;
        (*_g_1).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_1).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (200 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).unk_324 as s8 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh15 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_2: *mut Gfx = fresh15;
        (*_g_2).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_2).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (128 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        Matrix_Translate(-200.0f32, 1086.0f32, -200.0f32,
                         MTXMODE_NEW as libc::c_int as u8_0);
        Matrix_Scale(0.098000005f32, 0.1f32, 0.098000005f32,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh16 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh16;
        (*_g_3).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon2.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          5183 as libc::c_int) as libc::c_uint;
        let fresh17 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_4: *mut Gfx = fresh17;
        (*_g_4).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_4).words.w1 =
            gSegments[((ovl_Boss_Ganon2_DL_00E1C0.as_mut_ptr() as u32_0) <<
                           4 as libc::c_int >> 28 as libc::c_int) as
                          usize].wrapping_add(ovl_Boss_Ganon2_DL_00E1C0.as_mut_ptr()
                                                  as u32_0 &
                                                  0xffffff as libc::c_int as
                                                      libc::c_uint).wrapping_add(0x80000000
                                                                                     as
                                                                                     libc::c_uint)
                as *mut libc::c_void as libc::c_uint;
        Matrix_Pop();
        Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                         b"../z_boss_ganon2.c\x00" as *const u8 as
                             *const libc::c_char, 5186 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80904340(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut i: s16 = 0;
    let mut rand: f32_0 = 0.;
    let mut angle: f32_0 = 0.;
    let mut sin: f32_0 = 0.;
    let mut cos: f32_0 = 0.;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon2.c\x00" as *const u8 as
                        *const libc::c_char, 5196 as libc::c_int);
    Matrix_Push();
    if (*this).unk_330 as libc::c_int != 0 as libc::c_int ||
           (*this).unk_328 as libc::c_int != 0 as libc::c_int {
        if (*this).unk_330 as libc::c_int != 0 as libc::c_int {
            (*this).unk_330 -= 1
        } else {
            (*this).unk_328 =
                ((*this).unk_328 as libc::c_int - 70 as libc::c_int) as s16;
            if ((*this).unk_328 as libc::c_int) < 0 as libc::c_int {
                (*this).unk_328 = 0 as libc::c_int as s16
            }
        }
        Math_ApproachF(&mut (*this).unk_32C, 0.13f32, 1.0f32, 0.065f32);
        let fresh18 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh18;
        (*_g).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh19 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh19;
        (*_g_0).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_0).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).unk_328 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        BossGanon2_InitRand((*this).unk_340 as libc::c_int + 1 as libc::c_int,
                            0x71ac as libc::c_int -
                                (*this).unk_340 as libc::c_int,
                            0x263a as libc::c_int);
        rand = BossGanon2_RandZeroOne();
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < 5 as libc::c_int {
            angle =
                i as libc::c_int as libc::c_float *
                    (2 as libc::c_int as libc::c_float *
                         3.14159265358979323846f32 /
                         5 as libc::c_int as libc::c_float) +
                    rand * 3.14159265358979323846f32;
            sin = 5000.0f32 * sinf(angle);
            cos = 5000.0f32 * cosf(angle);
            Matrix_Translate(-200.0f32 + sin, 4786.0f32, -200.0f32 + cos,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_Scale((*this).unk_32C, (*this).unk_32C, (*this).unk_32C,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateY(angle, MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateZ((BossGanon2_RandZeroOne() - 0.5f32) * 100.0f32 *
                               0.01f32, MTXMODE_APPLY as libc::c_int as u8_0);
            if BossGanon2_RandZeroOne() < 0.5f32 {
                Matrix_RotateY(3.14159265358979323846f32,
                               MTXMODE_APPLY as libc::c_int as u8_0);
            }
            let fresh20 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_1: *mut Gfx = fresh20;
            (*_g_1).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_1).words.w1 =
                Matrix_NewMtx((*globalCtx).state.gfxCtx,
                              b"../z_boss_ganon2.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              5250 as libc::c_int) as libc::c_uint;
            let fresh21 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_2: *mut Gfx = fresh21;
            (*_g_2).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_2).words.w1 =
                gSegments[((ovl_Boss_Ganon2_DL_00D798.as_mut_ptr() as u32_0)
                               << 4 as libc::c_int >> 28 as libc::c_int) as
                              usize].wrapping_add(ovl_Boss_Ganon2_DL_00D798.as_mut_ptr()
                                                      as u32_0 &
                                                      0xffffff as libc::c_int
                                                          as
                                                          libc::c_uint).wrapping_add(0x80000000
                                                                                         as
                                                                                         libc::c_uint)
                    as *mut libc::c_void as libc::c_uint;
            i += 1
        }
    }
    Matrix_Pop();
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon2.c\x00" as *const u8 as
                         *const libc::c_char, 5255 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_8090464C(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut pad: s32 = 0;
    if (*this).unk_1B4 > 0.0f32 {
        let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
        let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
        __gfxCtx = (*globalCtx).state.gfxCtx;
        Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                        b"../z_boss_ganon2.c\x00" as *const u8 as
                            *const libc::c_char, 5264 as libc::c_int);
        Matrix_Push();
        let fresh22 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh22;
        (*_g).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh23 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh23;
        (*_g_0).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_0).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (170 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).unk_1B4 as s16 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh24 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_1: *mut Gfx = fresh24;
        (*_g_1).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_1).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (200 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (128 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        Matrix_Translate((*this).unk_1B8.x, (*this).unk_1B8.y,
                         (*this).unk_1B8.z,
                         MTXMODE_NEW as libc::c_int as u8_0);
        func_800D1FD4(&mut (*globalCtx).billboardMtxF);
        Matrix_RotateZ(-0.2f32, MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_Scale(0.6f32, 0.6f32, 1.0f32,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh25 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_2: *mut Gfx = fresh25;
        (*_g_2).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon2.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          5290 as libc::c_int) as libc::c_uint;
        let fresh26 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh26;
        (*_g_3).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            gSegments[((ovl_Boss_Ganon2_DL_00CCD8.as_mut_ptr() as u32_0) <<
                           4 as libc::c_int >> 28 as libc::c_int) as
                          usize].wrapping_add(ovl_Boss_Ganon2_DL_00CCD8.as_mut_ptr()
                                                  as u32_0 &
                                                  0xffffff as libc::c_int as
                                                      libc::c_uint).wrapping_add(0x80000000
                                                                                     as
                                                                                     libc::c_uint)
                as *mut libc::c_void as libc::c_uint;
        Matrix_Pop();
        Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                         b"../z_boss_ganon2.c\x00" as *const u8 as
                             *const libc::c_char, 5293 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_OverrideLimbDraw(mut globalCtx:
                                                         *mut GlobalContext,
                                                     mut limbIndex: s32,
                                                     mut dList: *mut *mut Gfx,
                                                     mut pos: *mut Vec3f,
                                                     mut rot: *mut Vec3s,
                                                     mut thisx:
                                                         *mut libc::c_void)
 -> s32 {
    let mut pad: s32 = 0;
    let mut this: *mut BossGanon2 = thisx as *mut BossGanon2;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon2.c\x00" as *const u8 as
                        *const libc::c_char, 5355 as libc::c_int);
    if limbIndex == 15 as libc::c_int {
        (*rot).y =
            ((*rot).y as libc::c_int + (*this).unk_31A as libc::c_int) as s16;
        (*rot).z =
            ((*rot).z as libc::c_int + (*this).unk_31C as libc::c_int) as s16
    }
    if limbIndex >= 42 as libc::c_int {
        (*rot).x =
            ((*rot).x as libc::c_int +
                 ((*this).unk_2F4[limbIndex as usize] as libc::c_int +
                      (*this).unk_346 as libc::c_int)) as s16;
        (*rot).y =
            ((*rot).y as libc::c_int +
                 (*this).unk_2FE[limbIndex as usize] as libc::c_int) as s16;
        if (*this).unk_342 as libc::c_int & 1 as libc::c_int != 0 {
            let fresh27 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g: *mut Gfx = fresh27;
            (*_g).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        } else {
            let fresh28 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_0: *mut Gfx = fresh28;
            (*_g_0).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_0).words.w1 =
                ((*this).unk_1B0 as s16 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((*this).unk_1B0 as s16 as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((*this).unk_1B0 as s16 as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        }
    }
    if limbIndex == 7 as libc::c_int || limbIndex == 13 as libc::c_int ||
           limbIndex == 33 as libc::c_int || limbIndex == 34 as libc::c_int {
        *dList = 0 as *mut Gfx
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon2.c\x00" as *const u8 as
                         *const libc::c_char, 5431 as libc::c_int);
    return 0 as libc::c_int;
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_PostLimbDraw(mut globalCtx:
                                                     *mut GlobalContext,
                                                 mut limbIndex: s32,
                                                 mut dList: *mut *mut Gfx,
                                                 mut rot: *mut Vec3s,
                                                 mut thisx:
                                                     *mut libc::c_void) {
    let mut pad: s8 = 0;
    let mut temp_v0: s8 = 0;
    let mut this: *mut BossGanon2 = thisx as *mut BossGanon2;
    let mut sp4C: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon2.c\x00" as *const u8 as
                        *const libc::c_char, 5459 as libc::c_int);
    D_80907120.z = 17000.0f32;
    D_8090712C.z = 3000.0f32;
    if D_809070CC[limbIndex as usize] as libc::c_int >= 0 as libc::c_int {
        Matrix_MultVec3f(&mut D_80906D60,
                         &mut *(*this).unk_234.as_mut_ptr().offset(*D_809070CC.as_mut_ptr().offset(limbIndex
                                                                                                       as
                                                                                                       isize)
                                                                       as
                                                                       isize));
    }
    if limbIndex == 15 as libc::c_int {
        Matrix_MultVec3f(&mut D_80906D60, &mut (*this).unk_1B8);
    } else if limbIndex == 3 as libc::c_int {
        Matrix_MultVec3f(&mut D_80907108, &mut (*this).unk_1F4);
    } else if limbIndex == 9 as libc::c_int {
        Matrix_MultVec3f(&mut D_80907114, &mut (*this).unk_1E8);
    } else if limbIndex == 38 as libc::c_int {
        Matrix_MultVec3f(&mut D_80906D60, &mut (*this).unk_1DC);
    } else if limbIndex == 41 as libc::c_int {
        Matrix_MultVec3f(&mut D_80906D60, &mut (*this).unk_1D0);
    } else if limbIndex == 45 as libc::c_int {
        Matrix_MultVec3f(&mut D_80907138, &mut (*this).unk_1C4);
    }
    temp_v0 = D_8090709C[limbIndex as usize];
    if temp_v0 as libc::c_int >= 0 as libc::c_int {
        Matrix_MultVec3f(&mut D_80906D60, &mut sp4C);
        func_808FD080(temp_v0 as s32, &mut (*this).unk_424, &mut sp4C);
    }
    if limbIndex == 7 as libc::c_int || limbIndex == 13 as libc::c_int {
        Matrix_Push();
        Matrix_Scale((*this).unk_224, (*this).unk_224, (*this).unk_224,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh29 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g: *mut Gfx = fresh29;
        (*_g).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon2.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          5522 as libc::c_int) as libc::c_uint;
        let fresh30 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_0: *mut Gfx = fresh30;
        (*_g_0).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_0).words.w1 = *dList as libc::c_uint;
        Matrix_Pop();
    } else if limbIndex == 33 as libc::c_int || limbIndex == 34 as libc::c_int
     {
        Matrix_Push();
        Matrix_Scale((*this).unk_228, (*this).unk_228, (*this).unk_228,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh31 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_1: *mut Gfx = fresh31;
        (*_g_1).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_1).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon2.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          5533 as libc::c_int) as libc::c_uint;
        let fresh32 = (*__gfxCtx).polyOpa.p;
        (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
        let mut _g_2: *mut Gfx = fresh32;
        (*_g_2).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 = *dList as libc::c_uint;
        Matrix_Pop();
    }
    if !(*dList).is_null() {
        if limbIndex == 7 as libc::c_int &&
               (*this).unk_312 as libc::c_int == 1 as libc::c_int {
            Matrix_MultVec3f(&mut D_809070FC, &mut (*this).unk_218);
            func_808FD080(0 as libc::c_int, &mut (*this).unk_444,
                          &mut (*this).unk_218);
            Matrix_MultVec3f(&mut D_80907120, &mut (*this).unk_200);
            Matrix_MultVec3f(&mut D_8090712C, &mut (*this).unk_20C);
        } else if limbIndex == 13 as libc::c_int &&
                      (*this).unk_312 as libc::c_int == 2 as libc::c_int {
            Matrix_MultVec3f(&mut D_809070FC, &mut (*this).unk_218);
            func_808FD080(1 as libc::c_int, &mut (*this).unk_444,
                          &mut (*this).unk_218);
            Matrix_MultVec3f(&mut D_80907120, &mut (*this).unk_200);
            Matrix_MultVec3f(&mut D_8090712C, &mut (*this).unk_20C);
        }
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon2.c\x00" as *const u8 as
                         *const libc::c_char, 5566 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80904D88(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut pad: s32 = 0;
    let mut i: s16 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon2.c\x00" as *const u8 as
                        *const libc::c_char, 5575 as libc::c_int);
    if (*this).unk_30C > 0.0f32 {
        func_80093D84((*globalCtx).state.gfxCtx);
        if (*this).unk_380 > 0.0f32 {
            let fresh33 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g: *mut Gfx = fresh33;
            (*_g).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (170 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh34 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_0: *mut Gfx = fresh34;
            (*_g_0).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_0).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (200 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        } else {
            let fresh35 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_1: *mut Gfx = fresh35;
            (*_g_1).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_1).words.w1 =
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            let fresh36 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_2: *mut Gfx = fresh36;
            (*_g_2).words.w0 =
                (0xfb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int;
            (*_g_2).words.w1 =
                (100 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (255 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int
        }
        let fresh37 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh37;
        (*_g_3).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            ovl_Boss_Ganon2_DL_00B308.as_mut_ptr() as libc::c_uint;
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < 15 as libc::c_int {
            Matrix_Translate((*this).unk_234[i as usize].x,
                             (*this).unk_234[i as usize].y,
                             (*this).unk_234[i as usize].z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            func_800D1FD4(&mut (*globalCtx).billboardMtxF);
            Matrix_Scale((*this).unk_30C, (*this).unk_30C, (*this).unk_30C,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateZ(Rand_CenteredFloat(3.14159265358979323846f32),
                           MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh38 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_4: *mut Gfx = fresh38;
            (*_g_4).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_4).words.w1 =
                Matrix_NewMtx((*globalCtx).state.gfxCtx,
                              b"../z_boss_ganon2.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              5618 as libc::c_int) as libc::c_uint;
            let fresh39 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_5: *mut Gfx = fresh39;
            (*_g_5).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_5).words.w1 =
                ovl_Boss_Ganon2_DL_00B378.as_mut_ptr() as libc::c_uint;
            i += 1
        }
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon2.c\x00" as *const u8 as
                         *const libc::c_char, 5622 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80904FC8(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut pad: s32 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon2.c\x00" as *const u8 as
                        *const libc::c_char, 5632 as libc::c_int);
    if (*this).unk_384 > 0.0f32 {
        func_80093D84((*globalCtx).state.gfxCtx);
        let fresh40 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh40;
        (*_g).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (200 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh41 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh41;
        (*_g_0).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_0).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (200 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh42 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_1: *mut Gfx = fresh42;
        (*_g_1).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_1).words.w1 =
            ovl_Boss_Ganon2_DL_00B308.as_mut_ptr() as libc::c_uint;
        Matrix_Translate((*sZelda).actor.world.pos.x,
                         (*sZelda).actor.world.pos.y + 80.0f32,
                         (*sZelda).actor.world.pos.z,
                         MTXMODE_NEW as libc::c_int as u8_0);
        func_800D1FD4(&mut (*globalCtx).billboardMtxF);
        Matrix_Scale((*this).unk_384, (*this).unk_384, (*this).unk_384,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_RotateZ((*this).unk_388, MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh43 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_2: *mut Gfx = fresh43;
        (*_g_2).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_2).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon2.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          5661 as libc::c_int) as libc::c_uint;
        let fresh44 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh44;
        (*_g_3).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            gSegments[((ovl_Boss_Ganon2_DL_00B378.as_mut_ptr() as u32_0) <<
                           4 as libc::c_int >> 28 as libc::c_int) as
                          usize].wrapping_add(ovl_Boss_Ganon2_DL_00B378.as_mut_ptr()
                                                  as u32_0 &
                                                  0xffffff as libc::c_int as
                                                      libc::c_uint).wrapping_add(0x80000000
                                                                                     as
                                                                                     libc::c_uint)
                as *mut libc::c_void as libc::c_uint;
        Matrix_RotateZ((*this).unk_388 * -2.0f32,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh45 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_4: *mut Gfx = fresh45;
        (*_g_4).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_4).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon2.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          5664 as libc::c_int) as libc::c_uint;
        let fresh46 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_5: *mut Gfx = fresh46;
        (*_g_5).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_5).words.w1 =
            gSegments[((ovl_Boss_Ganon2_DL_00B378.as_mut_ptr() as u32_0) <<
                           4 as libc::c_int >> 28 as libc::c_int) as
                          usize].wrapping_add(ovl_Boss_Ganon2_DL_00B378.as_mut_ptr()
                                                  as u32_0 &
                                                  0xffffff as libc::c_int as
                                                      libc::c_uint).wrapping_add(0x80000000
                                                                                     as
                                                                                     libc::c_uint)
                as *mut libc::c_void as libc::c_uint
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon2.c\x00" as *const u8 as
                         *const libc::c_char, 5667 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_8090523C(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut player: *mut Player = 0 as *mut Player;
    let mut phi_f20: f32_0 = 0.;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon2.c\x00" as *const u8 as
                        *const libc::c_char, 5675 as libc::c_int);
    if (*this).unk_38C > 0.0f32 {
        let mut i: s8 = 0;
        player =
            (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                                 usize].head as *mut Player;
        func_80093D84((*globalCtx).state.gfxCtx);
        let fresh47 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh47;
        (*_g).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).unk_38C as s16 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh48 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh48;
        (*_g_0).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_0).words.w1 =
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh49 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_1: *mut Gfx = fresh49;
        (*_g_1).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_1).words.w1 =
            ovl_Boss_Ganon2_DL_00B308.as_mut_ptr() as libc::c_uint;
        i = 0 as libc::c_int as s8;
        while (i as libc::c_int) < 11 as libc::c_int {
            Matrix_Mult(&mut (*player).mf_9E0,
                        MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_Translate(i as libc::c_int as libc::c_float * 250.0f32 +
                                 900.0f32, 350.0f32, 0.0f32,
                             MTXMODE_APPLY as libc::c_int as u8_0);
            if (i as libc::c_int) < 7 as libc::c_int {
                phi_f20 = 1.0f32
            } else {
                phi_f20 =
                    1.0f32 -
                        (i as libc::c_int - 7 as libc::c_int) as libc::c_float
                            * 0.2333333f32
                // 7 / 30
            }
            func_800D1FD4(&mut (*globalCtx).billboardMtxF);
            Matrix_Scale(200.0f32 * phi_f20, 200.0f32 * phi_f20, 1.0f32,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateZ(Rand_ZeroFloat(2.0f32 * 3.14159265358979323846f32),
                           MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh50 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_2: *mut Gfx = fresh50;
            (*_g_2).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_2).words.w1 =
                Matrix_NewMtx((*globalCtx).state.gfxCtx,
                              b"../z_boss_ganon2.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              5721 as libc::c_int) as libc::c_uint;
            let fresh51 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_3: *mut Gfx = fresh51;
            (*_g_3).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_3).words.w1 =
                gSegments[((ovl_Boss_Ganon2_DL_00B378.as_mut_ptr() as u32_0)
                               << 4 as libc::c_int >> 28 as libc::c_int) as
                              usize].wrapping_add(ovl_Boss_Ganon2_DL_00B378.as_mut_ptr()
                                                      as u32_0 &
                                                      0xffffff as libc::c_int
                                                          as
                                                          libc::c_uint).wrapping_add(0x80000000
                                                                                         as
                                                                                         libc::c_uint)
                    as *mut libc::c_void as libc::c_uint;
            i += 1
        }
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon2.c\x00" as *const u8 as
                         *const libc::c_char, 5725 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_PostLimbDraw2(mut globalCtx:
                                                      *mut GlobalContext,
                                                  mut limbIndex: s32,
                                                  mut dList: *mut *mut Gfx,
                                                  mut rot: *mut Vec3s,
                                                  mut thisx:
                                                      *mut libc::c_void) {
    let mut temp_v1: s8 = D_80907144[limbIndex as usize];
    let mut this: *mut BossGanon2 = thisx as *mut BossGanon2;
    if temp_v1 as libc::c_int >= 0 as libc::c_int {
        Matrix_MultVec3f(&mut D_80906D60,
                         &mut *(*this).unk_234.as_mut_ptr().offset(temp_v1 as
                                                                       isize));
    }
    if limbIndex == 11 as libc::c_int {
        let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
        let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
        __gfxCtx = (*globalCtx).state.gfxCtx;
        Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                        b"../z_boss_ganon2.c\x00" as *const u8 as
                            *const libc::c_char, 5749 as libc::c_int);
        let fresh52 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh52;
        (*_g).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon2.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          5752 as libc::c_int) as libc::c_uint;
        let fresh53 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh53;
        (*_g_0).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_0).words.w1 =
            gSegments[((object_ganon_DL_00BE90.as_mut_ptr() as u32_0) <<
                           4 as libc::c_int >> 28 as libc::c_int) as
                          usize].wrapping_add(object_ganon_DL_00BE90.as_mut_ptr()
                                                  as u32_0 &
                                                  0xffffff as libc::c_int as
                                                      libc::c_uint).wrapping_add(0x80000000
                                                                                     as
                                                                                     libc::c_uint)
                as *mut libc::c_void as libc::c_uint;
        Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                         b"../z_boss_ganon2.c\x00" as *const u8 as
                             *const libc::c_char, 5754 as libc::c_int);
    } else if limbIndex == 10 as libc::c_int {
        Matrix_MultVec3f(&mut D_80907164, &mut (*this).unk_1B8);
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_80905674(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut pad: s32 = 0;
    if (*this).unk_380 > 0.0f32 {
        let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
        let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
        __gfxCtx = (*globalCtx).state.gfxCtx;
        Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                        b"../z_boss_ganon2.c\x00" as *const u8 as
                            *const libc::c_char, 5772 as libc::c_int);
        Matrix_Push();
        let fresh54 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g: *mut Gfx = fresh54;
        (*_g).words.w0 =
            (0xe7 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g).words.w1 = 0 as libc::c_int as libc::c_uint;
        let fresh55 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_0: *mut Gfx = fresh55;
        (*_g_0).words.w0 =
            (0xdb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0x6 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_0).words.w1 =
            Gfx_TwoTexScroll((*globalCtx).state.gfxCtx, 0 as libc::c_int,
                             ((*this).unk_19C as libc::c_int *
                                  -(8 as libc::c_int)) as u32_0,
                             0 as libc::c_int as u32_0, 32 as libc::c_int,
                             64 as libc::c_int, 1 as libc::c_int,
                             ((*this).unk_19C as libc::c_int *
                                  -(4 as libc::c_int)) as u32_0,
                             ((*this).unk_19C as libc::c_int *
                                  -(8 as libc::c_int)) as u32_0,
                             32 as libc::c_int, 32 as libc::c_int) as
                libc::c_uint;
        let fresh56 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_1: *mut Gfx = fresh56;
        (*_g_1).words.w0 =
            (0xfa as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_1).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (255 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (170 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                ((*this).unk_37C as s16 as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        let fresh57 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_2: *mut Gfx = fresh57;
        (*_g_2).words.w0 =
            (0xfb as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int;
        (*_g_2).words.w1 =
            (255 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (200 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (128 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        Matrix_Translate((*sZelda).actor.world.pos.x + 100.0f32,
                         (*sZelda).actor.world.pos.y + 35.0f32 + 7.0f32,
                         (*sZelda).actor.world.pos.z - 100.0f32,
                         MTXMODE_NEW as libc::c_int as u8_0);
        Matrix_RotateY(-3.14159265358979323846f32 / 4.0f32,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_Scale(0.040000003f32, 0.040000003f32, (*this).unk_380,
                     MTXMODE_APPLY as libc::c_int as u8_0);
        Matrix_RotateX(3.14159265358979323846f32 / 2.0f32,
                       MTXMODE_APPLY as libc::c_int as u8_0);
        let fresh58 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_3: *mut Gfx = fresh58;
        (*_g_3).words.w0 =
            (0xda as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                ((::std::mem::size_of::<Mtx>() as
                      libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                      libc::c_uint).wrapping_div(8
                                                                                     as
                                                                                     libc::c_int
                                                                                     as
                                                                                     libc::c_uint)
                     &
                     (((0x1 as libc::c_int) << 5 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    19 as libc::c_int |
                ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    8 as libc::c_int |
                (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                      0x1 as libc::c_int) as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_3).words.w1 =
            Matrix_NewMtx((*globalCtx).state.gfxCtx,
                          b"../z_boss_ganon2.c\x00" as *const u8 as
                              *const libc::c_char as *mut libc::c_char,
                          5814 as libc::c_int) as libc::c_uint;
        let fresh59 = (*__gfxCtx).polyXlu.p;
        (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
        let mut _g_4: *mut Gfx = fresh59;
        (*_g_4).words.w0 =
            (0xde as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 24 as libc::c_int
                |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    16 as libc::c_int |
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 16 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    0 as libc::c_int;
        (*_g_4).words.w1 =
            gSegments[((ovl_Boss_Ganon2_DL_00EC40.as_mut_ptr() as u32_0) <<
                           4 as libc::c_int >> 28 as libc::c_int) as
                          usize].wrapping_add(ovl_Boss_Ganon2_DL_00EC40.as_mut_ptr()
                                                  as u32_0 &
                                                  0xffffff as libc::c_int as
                                                      libc::c_uint).wrapping_add(0x80000000
                                                                                     as
                                                                                     libc::c_uint)
                as *mut libc::c_void as libc::c_uint;
        Matrix_Pop();
        Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                         b"../z_boss_ganon2.c\x00" as *const u8 as
                             *const libc::c_char, 5817 as libc::c_int);
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_Draw(mut thisx: *mut Actor,
                                         mut globalCtx: *mut GlobalContext) {
    let mut shadowTexture: *mut libc::c_void =
        Graph_Alloc((*globalCtx).state.gfxCtx, 4096 as libc::c_int as size_t);
    let mut this: *mut BossGanon2 = thisx as *mut BossGanon2;
    let mut i: s16 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon2.c\x00" as *const u8 as
                        *const libc::c_char, 5840 as libc::c_int);
    func_80093D18((*globalCtx).state.gfxCtx);
    func_80093D84((*globalCtx).state.gfxCtx);
    match (*this).unk_337 as libc::c_int {
        0 => {
            BossGanon2_SetObjectSegment(this, globalCtx,
                                        OBJECT_GANON as libc::c_int,
                                        1 as libc::c_int as u8_0);
            let fresh60 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g: *mut Gfx = fresh60;
            (*_g).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g).words.w1 =
                gSegments[((object_ganon_Tex_00A8E0.as_mut_ptr() as u32_0) <<
                               4 as libc::c_int >> 28 as libc::c_int) as
                              usize].wrapping_add(object_ganon_Tex_00A8E0.as_mut_ptr()
                                                      as u32_0 &
                                                      0xffffff as libc::c_int
                                                          as
                                                          libc::c_uint).wrapping_add(0x80000000
                                                                                         as
                                                                                         libc::c_uint)
                    as *mut libc::c_void as libc::c_uint;
            let fresh61 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_0: *mut Gfx = fresh61;
            (*_g_0).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0x9 as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_0).words.w1 =
                gSegments[((object_ganon_Tex_00A8E0.as_mut_ptr() as u32_0) <<
                               4 as libc::c_int >> 28 as libc::c_int) as
                              usize].wrapping_add(object_ganon_Tex_00A8E0.as_mut_ptr()
                                                      as u32_0 &
                                                      0xffffff as libc::c_int
                                                          as
                                                          libc::c_uint).wrapping_add(0x80000000
                                                                                         as
                                                                                         libc::c_uint)
                    as *mut libc::c_void as libc::c_uint;
            SkelAnime_DrawFlexOpa(globalCtx, (*this).skelAnime.skeleton,
                                  (*this).skelAnime.jointTable,
                                  (*this).skelAnime.dListCount as s32, None,
                                  Some(BossGanon2_PostLimbDraw2 as
                                           unsafe extern "C" fn(_:
                                                                    *mut GlobalContext,
                                                                _: s32,
                                                                _:
                                                                    *mut *mut Gfx,
                                                                _: *mut Vec3s,
                                                                _:
                                                                    *mut libc::c_void)
                                               -> ()),
                                  this as *mut libc::c_void);
        }
        1 | 2 => {
            BossGanon2_SetObjectSegment(this, globalCtx,
                                        OBJECT_GANON2 as libc::c_int,
                                        1 as libc::c_int as u8_0);
            let fresh62 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_1: *mut Gfx = fresh62;
            (*_g_1).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_1).words.w1 =
                gSegments[((sEyeTextures[(*this).unk_310 as usize] as u32_0)
                               << 4 as libc::c_int >> 28 as libc::c_int) as
                              usize].wrapping_add(sEyeTextures[(*this).unk_310
                                                                   as usize]
                                                      as u32_0 &
                                                      0xffffff as libc::c_int
                                                          as
                                                          libc::c_uint).wrapping_add(0x80000000
                                                                                         as
                                                                                         libc::c_uint)
                    as *mut libc::c_void as libc::c_uint;
            func_808FD080(0 as libc::c_int, &mut (*this).unk_444,
                          &mut D_8090717C);
            func_808FD080(1 as libc::c_int, &mut (*this).unk_444,
                          &mut D_8090717C);
            (*this).unk_218 = D_8090717C;
            if (*this).unk_342 as libc::c_int & 1 as libc::c_int != 0 {
                (*__gfxCtx).polyOpa.p =
                    Gfx_SetFog((*__gfxCtx).polyOpa.p, 0xff as libc::c_int,
                               0 as libc::c_int, 0 as libc::c_int,
                               0xff as libc::c_int, 0x384 as libc::c_int,
                               0x44b as libc::c_int)
            }
            Matrix_Translate(0.0f32, -4000.0f32, 4000.0f32,
                             MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateX((*this).unk_394,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_Translate(0.0f32, 4000.0f32, -4000.0f32,
                             MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh63 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_2: *mut Gfx = fresh63;
            (*_g_2).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_2).words.w1 =
                Matrix_NewMtx((*globalCtx).state.gfxCtx,
                              b"../z_boss_ganon2.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              5910 as libc::c_int) as libc::c_uint;
            SkelAnime_DrawFlexOpa(globalCtx, (*this).skelAnime.skeleton,
                                  (*this).skelAnime.jointTable,
                                  (*this).skelAnime.dListCount as s32,
                                  Some(BossGanon2_OverrideLimbDraw as
                                           unsafe extern "C" fn(_:
                                                                    *mut GlobalContext,
                                                                _: s32,
                                                                _:
                                                                    *mut *mut Gfx,
                                                                _: *mut Vec3f,
                                                                _: *mut Vec3s,
                                                                _:
                                                                    *mut libc::c_void)
                                               -> s32),
                                  Some(BossGanon2_PostLimbDraw as
                                           unsafe extern "C" fn(_:
                                                                    *mut GlobalContext,
                                                                _: s32,
                                                                _:
                                                                    *mut *mut Gfx,
                                                                _: *mut Vec3s,
                                                                _:
                                                                    *mut libc::c_void)
                                               -> ()),
                                  this as *mut libc::c_void);
            (*__gfxCtx).polyOpa.p =
                Gameplay_SetFog(globalCtx, (*__gfxCtx).polyOpa.p);
            BossGanon2_GenShadowTexture(shadowTexture, this, globalCtx);
            BossGanon2_DrawShadowTexture(shadowTexture, this, globalCtx);
        }
        _ => { }
    }
    BossGanon2_SetObjectSegment(this, globalCtx, OBJECT_GANON2 as libc::c_int,
                                1 as libc::c_int as u8_0);
    func_80904340(this, globalCtx);
    func_80904108(this, globalCtx);
    func_80904D88(this, globalCtx);
    func_8090464C(this, globalCtx);
    func_80905674(this, globalCtx);
    func_80904FC8(this, globalCtx);
    func_8090523C(this, globalCtx);
    if (*this).unk_312 as libc::c_int != 0 as libc::c_int ||
           D_80907080 as libc::c_int != 0 as libc::c_int {
        func_80903F38(this, globalCtx);
        if (*this).unk_312 as libc::c_int == 0 as libc::c_int {
            let mut pad: s32 = 0;
            D_80907080 =
                (D_80907080 as libc::c_int - 40 as libc::c_int) as s16;
            if D_80907080 as libc::c_int <= 0 as libc::c_int {
                D_80907080 = 0 as libc::c_int as s16
            }
        }
        D_80910638 += 1
    } else {
        i = 0 as libc::c_int as s16;
        while (i as libc::c_int) < 3 as libc::c_int {
            D_809105D8[i as usize] = (*this).unk_200;
            D_80910608[i as usize] = (*this).unk_20C;
            i += 1
        }
        D_80910638 = 0 as libc::c_int as s8
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon2.c\x00" as *const u8 as
                         *const libc::c_char, 5983 as libc::c_int);
    func_809060E8(globalCtx);
}
#[no_mangle]
pub unsafe extern "C" fn func_80905DA8(mut this: *mut BossGanon2,
                                       mut globalCtx: *mut GlobalContext) {
    let mut pad: [s32; 5] = [0; 5];
    let mut player: *mut Player =
        (*globalCtx).actorCtx.actorLists[ACTORCAT_PLAYER as libc::c_int as
                                             usize].head as *mut Player;
    let mut effect: *mut BossGanon2Effect =
        (*globalCtx).specialEffects as *mut BossGanon2Effect;
    let mut sp78: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut i: s16 = 0;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              (::std::mem::size_of::<[BossGanon2Effect; 100]>() as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<BossGanon2Effect>()
                                                   as libc::c_ulong) as s32 {
        if (*effect).type_0 as libc::c_int != 0 as libc::c_int {
            (*effect).position.x += (*effect).velocity.x;
            (*effect).position.y += (*effect).velocity.y;
            (*effect).position.z += (*effect).velocity.z;
            (*effect).unk_01 = (*effect).unk_01.wrapping_add(1);
            (*effect).velocity.x += (*effect).accel.x;
            (*effect).velocity.y += (*effect).accel.y;
            (*effect).velocity.z += (*effect).accel.z;
            if (*effect).type_0 as libc::c_int == 1 as libc::c_int {
                if (*effect).unk_2E as libc::c_int == 0 as libc::c_int {
                    (*effect).unk_38.z += 1.0f32;
                    (*effect).unk_38.y =
                        2.0f32 * 3.14159265358979323846f32 / 5.0f32
                } else {
                    (*effect).unk_38.z = 3.14159265358979323846f32 / 2.0f32;
                    (*effect).unk_38.y = 0.0f32;
                    if (*effect).position.y <= 1098.0f32 {
                        (*effect).position.y = 1098.0f32;
                        if (*effect).velocity.y < -10.0f32 {
                            sp78 = (*effect).position;
                            sp78.y = 1086.0f32;
                            func_80078884(0x1808 as libc::c_int as u16_0);
                            CollisionCheck_SpawnShieldParticlesMetal(globalCtx,
                                                                     &mut sp78);
                        }
                        (*effect).velocity.y = 0.0f32
                    }
                    if ((*player).actor.world.pos.x - (*effect).position.x) *
                           ((*player).actor.world.pos.x -
                                (*effect).position.x) +
                           ((*player).actor.world.pos.z -
                                (*effect).position.z) *
                               ((*player).actor.world.pos.z -
                                    (*effect).position.z) < 25.0f32 * 25.0f32
                       {
                        (*effect).type_0 = 0 as libc::c_int as u8_0;
                        (*this).unk_39C = 10 as libc::c_int as s16
                    }
                }
            } else if (*effect).type_0 as libc::c_int == 2 as libc::c_int {
                (*effect).unk_38.x += 0.1f32;
                (*effect).unk_38.y += 0.4f32;
                if sqrtf((-200.0f32 - (*effect).position.x) *
                             (-200.0f32 - (*effect).position.x) +
                             (-200.0f32 - (*effect).position.z) *
                                 (-200.0f32 - (*effect).position.z)) <
                       1000.0f32 {
                    if (*effect).position.y < 1186.0f32 {
                        if (*effect).unk_2E as libc::c_int == 0 as libc::c_int
                           {
                            (*effect).unk_2E += 1;
                            (*effect).position.y = 1186.0f32;
                            (*effect).velocity.x *= 0.75f32;
                            (*effect).velocity.z *= 0.75f32;
                            (*effect).velocity.y *= -0.2f32
                        } else { (*effect).type_0 = 0 as libc::c_int as u8_0 }
                    }
                } else if (*effect).position.y < 0.0f32 {
                    (*effect).type_0 = 0 as libc::c_int as u8_0
                }
            }
        }
        i += 1;
        effect = effect.offset(1)
    };
}
#[no_mangle]
pub unsafe extern "C" fn func_809060E8(mut globalCtx: *mut GlobalContext) {
    let mut alpha: s16 = 0;
    let mut usingObjectGEff: u8_0 = 0 as libc::c_int as u8_0;
    let mut effect: *mut BossGanon2Effect = 0 as *mut BossGanon2Effect;
    let mut i: s16 = 0;
    let mut effects: *mut BossGanon2Effect = 0 as *mut BossGanon2Effect;
    effect = (*globalCtx).specialEffects as *mut BossGanon2Effect;
    effects = effect;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = (*globalCtx).state.gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                    b"../z_boss_ganon2.c\x00" as *const u8 as
                        *const libc::c_char, 6086 as libc::c_int);
    func_80093D18((*globalCtx).state.gfxCtx);
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 1 as libc::c_int {
        if (*effect).type_0 as libc::c_int == 1 as libc::c_int {
            let mut spA0: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
            let mut temp_f0: f32_0 = 0.;
            let mut angle: f32_0 = 0.;
            func_80093D84((*globalCtx).state.gfxCtx);
            spA0.x = (*globalCtx).envCtx.dirLight1.params.dir.x as f32_0;
            spA0.y = (*globalCtx).envCtx.dirLight1.params.dir.y as f32_0;
            spA0.z = (*globalCtx).envCtx.dirLight1.params.dir.z as f32_0;
            func_8002EABC(&mut (*effect).position, &mut (*globalCtx).view.eye,
                          &mut spA0, (*globalCtx).state.gfxCtx);
            Matrix_Translate((*effect).position.x, (*effect).position.y,
                             (*effect).position.z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_Scale(0.03f32, 0.03f32, 0.03f32,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateY((*effect).unk_38.z,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateX((*effect).unk_38.y,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh64 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g: *mut Gfx = fresh64;
            (*_g).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g).words.w1 =
                Matrix_NewMtx((*globalCtx).state.gfxCtx,
                              b"../z_boss_ganon2.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              6116 as libc::c_int) as libc::c_uint;
            let fresh65 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_0: *mut Gfx = fresh65;
            (*_g_0).words.w0 =
                (0xdb as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0x6 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    ((0x8 as libc::c_int * 4 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_0).words.w1 =
                Gfx_TexScroll((*globalCtx).state.gfxCtx,
                              0 as libc::c_int as u32_0,
                              (0 as libc::c_int as
                                   libc::c_uint).wrapping_sub((*globalCtx).gameplayFrames
                                                                  &
                                                                  0x7f as
                                                                      libc::c_int
                                                                      as
                                                                      libc::c_uint),
                              32 as libc::c_int, 32 as libc::c_int) as
                    libc::c_uint;
            let fresh66 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_1: *mut Gfx = fresh66;
            (*_g_1).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_1).words.w1 =
                ovl_Boss_Ganon2_DL_0103A8.as_mut_ptr() as libc::c_uint;
            if (*globalCtx).envCtx.unk_BD as libc::c_int == 1 as libc::c_int
                   ||
                   (*globalCtx).envCtx.unk_BD as libc::c_int ==
                       2 as libc::c_int {
                alpha =
                    (((*globalCtx).envCtx.unk_D8 * 150.0f32) as s16 as
                         libc::c_int + 50 as libc::c_int) as s16;
                angle = 3.14159265358979323846f32 / 5.0f32
            } else {
                alpha = 100 as libc::c_int as s16;
                angle = 3.14159265358979323846f32 / 2.0f32
            }
            let fresh67 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_2: *mut Gfx = fresh67;
            (*_g_2).words.w0 =
                (0xfa as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_2).words.w1 =
                (0 as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (alpha as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            temp_f0 = (*effect).position.y - 1098.0f32;
            Matrix_Translate((*effect).position.x + temp_f0, 1086.0f32,
                             (*effect).position.z - 1.0f32 + temp_f0,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_RotateY(angle, MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_Scale(1.0f32, 0.0f32, 1.0f32,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh68 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_3: *mut Gfx = fresh68;
            (*_g_3).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_3).words.w1 =
                Matrix_NewMtx((*globalCtx).state.gfxCtx,
                              b"../z_boss_ganon2.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              6155 as libc::c_int) as libc::c_uint;
            let fresh69 = (*__gfxCtx).polyXlu.p;
            (*__gfxCtx).polyXlu.p = (*__gfxCtx).polyXlu.p.offset(1);
            let mut _g_4: *mut Gfx = fresh69;
            (*_g_4).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_4).words.w1 =
                ovl_Boss_Ganon2_DL_00F188.as_mut_ptr() as libc::c_uint
        }
        i += 1
    }
    effect = effects;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) <
              (::std::mem::size_of::<[BossGanon2Effect; 100]>() as
                   libc::c_ulong).wrapping_div(::std::mem::size_of::<BossGanon2Effect>()
                                                   as libc::c_ulong) as s32 {
        if (*effect).type_0 as libc::c_int == 2 as libc::c_int {
            if usingObjectGEff == 0 {
                BossGanon2_SetObjectSegment(0 as *mut BossGanon2, globalCtx,
                                            OBJECT_GEFF as libc::c_int,
                                            1 as libc::c_int as u8_0);
                usingObjectGEff = usingObjectGEff.wrapping_add(1)
            }
            Matrix_Translate((*effect).position.x, (*effect).position.y,
                             (*effect).position.z,
                             MTXMODE_NEW as libc::c_int as u8_0);
            Matrix_Scale((*effect).scale, (*effect).scale, (*effect).scale,
                         MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateY((*effect).unk_38.z,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateX((*effect).unk_38.y,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            Matrix_RotateZ((*effect).unk_38.x,
                           MTXMODE_APPLY as libc::c_int as u8_0);
            let fresh70 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_5: *mut Gfx = fresh70;
            (*_g_5).words.w0 =
                (0xda as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    ((::std::mem::size_of::<Mtx>() as
                          libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                          libc::c_uint).wrapping_div(8
                                                                                         as
                                                                                         libc::c_int
                                                                                         as
                                                                                         libc::c_uint)
                         &
                         (((0x1 as libc::c_int) << 5 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        19 as libc::c_int |
                    ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        8 as libc::c_int |
                    (((0 as libc::c_int | 0x2 as libc::c_int |
                           0 as libc::c_int) ^ 0x1 as libc::c_int) as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_5).words.w1 =
                Matrix_NewMtx((*globalCtx).state.gfxCtx,
                              b"../z_boss_ganon2.c\x00" as *const u8 as
                                  *const libc::c_char as *mut libc::c_char,
                              6179 as libc::c_int) as libc::c_uint;
            let fresh71 = (*__gfxCtx).polyOpa.p;
            (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
            let mut _g_6: *mut Gfx = fresh71;
            (*_g_6).words.w0 =
                (0xde as libc::c_int as u32_0 &
                     (((0x1 as libc::c_int) << 8 as libc::c_int) -
                          1 as libc::c_int) as libc::c_uint) <<
                    24 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 8 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        16 as libc::c_int |
                    (0 as libc::c_int as u32_0 &
                         (((0x1 as libc::c_int) << 16 as libc::c_int) -
                              1 as libc::c_int) as libc::c_uint) <<
                        0 as libc::c_int;
            (*_g_6).words.w1 = gGanonRubbleDL.as_mut_ptr() as libc::c_uint
        }
        i += 1;
        effect = effect.offset(1)
    }
    Graph_CloseDisps(dispRefs.as_mut_ptr(), (*globalCtx).state.gfxCtx,
                     b"../z_boss_ganon2.c\x00" as *const u8 as
                         *const libc::c_char, 6185 as libc::c_int);
}
#[no_mangle]
pub unsafe extern "C" fn func_80906538(mut this: *mut BossGanon2,
                                       mut shadowTexture: *mut u8_0,
                                       mut arg2: f32_0) {
    let mut temp_t0: s16 = 0;
    let mut temp_v0: s16 = 0;
    let mut temp_a3: s16 = 0;
    let mut phi_v1: s16 = 0;
    let mut phi_a1: s16 = 0;
    let mut i: s16 = 0;
    let mut lerpx: f32_0 = 0.;
    let mut j: s16 = 0;
    let mut lerpy: f32_0 = 0.;
    let mut lerpz: f32_0 = 0.;
    let mut sp70: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    let mut sp64: Vec3f = Vec3f{x: 0., y: 0., z: 0.,};
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 15 as libc::c_int {
        if arg2 == 0.0f32 ||
               {
                   j = D_809071CC[i as usize];
                   (j as libc::c_int) >= 0 as libc::c_int
               } {
            if arg2 > 0.0f32 {
                lerpx =
                    (*this).unk_234[i as usize].x +
                        ((*this).unk_234[j as usize].x -
                             (*this).unk_234[i as usize].x) * arg2;
                lerpy =
                    (*this).unk_234[i as usize].y +
                        ((*this).unk_234[j as usize].y -
                             (*this).unk_234[i as usize].y) * arg2;
                lerpz =
                    (*this).unk_234[i as usize].z +
                        ((*this).unk_234[j as usize].z -
                             (*this).unk_234[i as usize].z) * arg2;
                sp70.x = lerpx - (*this).actor.world.pos.x;
                sp70.y =
                    lerpy - (*this).actor.world.pos.y + 76.0f32 + 30.0f32 +
                        30.0f32 + 100.0f32;
                sp70.z = lerpz - (*this).actor.world.pos.z
            } else {
                sp70.x =
                    (*this).unk_234[i as usize].x - (*this).actor.world.pos.x;
                sp70.y =
                    (*this).unk_234[i as usize].y - (*this).actor.world.pos.y
                        + 76.0f32 + 30.0f32 + 30.0f32 + 100.0f32;
                sp70.z =
                    (*this).unk_234[i as usize].z - (*this).actor.world.pos.z
            }
            Matrix_MultVec3f(&mut sp70, &mut sp64);
            sp64.x *= 0.2f32;
            sp64.y *= 0.2f32;
            temp_a3 = (sp64.x + 32.0f32) as s16;
            temp_t0 =
                (sp64.y as s16 as libc::c_int * 64 as libc::c_int) as s16;
            if D_809071EC[i as usize] as libc::c_int == 2 as libc::c_int {
                j = 0 as libc::c_int as s16;
                phi_a1 = -(0x180 as libc::c_int) as s16;
                while (j as libc::c_int) < 12 as libc::c_int {
                    phi_v1 = -(D_809071B4[j as usize] as libc::c_int) as s16;
                    while (phi_v1 as libc::c_int) <
                              D_809071B4[j as usize] as libc::c_int {
                        temp_v0 =
                            (temp_a3 as libc::c_int + phi_v1 as libc::c_int +
                                 temp_t0 as libc::c_int +
                                 phi_a1 as libc::c_int) as s16;
                        if temp_v0 as libc::c_int >= 0 as libc::c_int &&
                               (temp_v0 as libc::c_int) <
                                   0x1000 as libc::c_int {
                            *shadowTexture.offset(temp_v0 as isize) =
                                0xff as libc::c_int as u8_0
                        }
                        phi_v1 += 1
                    }
                    j += 1;
                    phi_a1 =
                        (phi_a1 as libc::c_int + 0x40 as libc::c_int) as s16
                }
            } else if D_809071EC[i as usize] as libc::c_int ==
                          1 as libc::c_int {
                j = 0 as libc::c_int as s16;
                phi_a1 = -(0x100 as libc::c_int) as s16;
                while (j as libc::c_int) < 8 as libc::c_int {
                    phi_v1 = -(D_809071A4[j as usize] as libc::c_int) as s16;
                    while (phi_v1 as libc::c_int) <
                              D_809071A4[j as usize] as libc::c_int {
                        temp_v0 =
                            (temp_a3 as libc::c_int + phi_v1 as libc::c_int +
                                 temp_t0 as libc::c_int +
                                 phi_a1 as libc::c_int) as s16;
                        if temp_v0 as libc::c_int >= 0 as libc::c_int &&
                               (temp_v0 as libc::c_int) <
                                   0x1000 as libc::c_int {
                            *shadowTexture.offset(temp_v0 as isize) =
                                0xff as libc::c_int as u8_0
                        }
                        phi_v1 += 1
                    }
                    j += 1;
                    phi_a1 =
                        (phi_a1 as libc::c_int + 0x40 as libc::c_int) as s16
                }
            } else if D_809071EC[i as usize] as libc::c_int ==
                          0 as libc::c_int {
                j = 0 as libc::c_int as s16;
                phi_a1 = -(0xc0 as libc::c_int) as s16;
                while (j as libc::c_int) < 7 as libc::c_int {
                    phi_v1 = -(D_80907194[j as usize] as libc::c_int) as s16;
                    while (phi_v1 as libc::c_int) <
                              D_80907194[j as usize] as libc::c_int -
                                  1 as libc::c_int {
                        temp_v0 =
                            (temp_a3 as libc::c_int + phi_v1 as libc::c_int +
                                 temp_t0 as libc::c_int +
                                 phi_a1 as libc::c_int) as s16;
                        if temp_v0 as libc::c_int >= 0 as libc::c_int &&
                               (temp_v0 as libc::c_int) <
                                   0x1000 as libc::c_int {
                            *shadowTexture.offset(temp_v0 as isize) =
                                0xff as libc::c_int as u8_0
                        }
                        phi_v1 += 1
                    }
                    j += 1;
                    phi_a1 =
                        (phi_a1 as libc::c_int + 0x40 as libc::c_int) as s16
                }
            } else {
                j = 0 as libc::c_int as s16;
                phi_a1 = -(0x80 as libc::c_int) as s16;
                while (j as libc::c_int) < 6 as libc::c_int {
                    phi_v1 = -(D_80907188[j as usize] as libc::c_int) as s16;
                    while (phi_v1 as libc::c_int) <
                              D_80907188[j as usize] as libc::c_int -
                                  1 as libc::c_int {
                        temp_v0 =
                            (temp_a3 as libc::c_int + phi_v1 as libc::c_int +
                                 temp_t0 as libc::c_int +
                                 phi_a1 as libc::c_int) as s16;
                        if temp_v0 as libc::c_int >= 0 as libc::c_int &&
                               (temp_v0 as libc::c_int) <
                                   0x1000 as libc::c_int {
                            *shadowTexture.offset(temp_v0 as isize) =
                                0xff as libc::c_int as u8_0
                        }
                        phi_v1 += 1
                    }
                    j += 1;
                    phi_a1 =
                        (phi_a1 as libc::c_int + 0x40 as libc::c_int) as s16
                }
            }
        }
        i += 1
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_GenShadowTexture(mut shadowTexture:
                                                         *mut libc::c_void,
                                                     mut this:
                                                         *mut BossGanon2,
                                                     mut globalCtx:
                                                         *mut GlobalContext) {
    let mut i: s16 = 0;
    let mut p: *mut u32_0 = shadowTexture as *mut u32_0;
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 1024 as libc::c_int {
        *p = 0 as libc::c_int as u32_0;
        i += 1;
        p = p.offset(1)
    }
    Matrix_RotateX(1.0f32, MTXMODE_NEW as libc::c_int as u8_0);
    i = 0 as libc::c_int as s16;
    while (i as libc::c_int) < 6 as libc::c_int {
        func_80906538(this, shadowTexture as *mut u8_0,
                      i as libc::c_int as libc::c_float / 5.0f32);
        i += 1
    };
}
#[no_mangle]
pub unsafe extern "C" fn BossGanon2_DrawShadowTexture(mut shadowTexture:
                                                          *mut libc::c_void,
                                                      mut this:
                                                          *mut BossGanon2,
                                                      mut globalCtx:
                                                          *mut GlobalContext) {
    let mut pad: s32 = 0;
    let mut gfxCtx: *mut GraphicsContext = (*globalCtx).state.gfxCtx;
    let mut alpha: s16 = 0;
    let mut __gfxCtx: *mut GraphicsContext = 0 as *mut GraphicsContext;
    let mut dispRefs: [*mut Gfx; 4] = [0 as *mut Gfx; 4];
    __gfxCtx = gfxCtx;
    Graph_OpenDisps(dispRefs.as_mut_ptr(), gfxCtx,
                    b"../z_boss_ganon2.c\x00" as *const u8 as
                        *const libc::c_char, 6430 as libc::c_int);
    func_80093D18((*globalCtx).state.gfxCtx);
    if (*globalCtx).envCtx.unk_BD as libc::c_int == 1 as libc::c_int ||
           (*globalCtx).envCtx.unk_BD as libc::c_int == 2 as libc::c_int {
        alpha =
            (((*globalCtx).envCtx.unk_D8 * 180.0f32) as s16 as libc::c_int +
                 30 as libc::c_int) as s16
    } else { alpha = 120 as libc::c_int as s16 }
    let fresh72 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g: *mut Gfx = fresh72;
    (*_g).words.w0 =
        (0xfa as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (alpha as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh73 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_0: *mut Gfx = fresh73;
    (*_g_0).words.w0 =
        (0xfb as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_0).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    Matrix_Translate((*this).actor.world.pos.x, (*this).actor.floorHeight,
                     (*this).actor.world.pos.z - 20.0f32,
                     MTXMODE_NEW as libc::c_int as u8_0);
    Matrix_Scale(1.65f32, 1.0f32, 1.65f32,
                 MTXMODE_APPLY as libc::c_int as u8_0);
    let fresh74 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_1: *mut Gfx = fresh74;
    (*_g_1).words.w0 =
        (0xda as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((::std::mem::size_of::<Mtx>() as
                  libc::c_ulong).wrapping_sub(1 as libc::c_int as
                                                  libc::c_uint).wrapping_div(8
                                                                                 as
                                                                                 libc::c_int
                                                                                 as
                                                                                 libc::c_uint)
                 &
                 (((0x1 as libc::c_int) << 5 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((0 as libc::c_int / 8 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (((0 as libc::c_int | 0x2 as libc::c_int | 0 as libc::c_int) ^
                  0x1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_1).words.w1 =
        Matrix_NewMtx((*globalCtx).state.gfxCtx,
                      b"../z_boss_ganon2.c\x00" as *const u8 as
                          *const libc::c_char as *mut libc::c_char,
                      6457 as libc::c_int) as libc::c_uint;
    let fresh75 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_2: *mut Gfx = fresh75;
    (*_g_2).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_2).words.w1 = ovl_Boss_Ganon2_DL_00B3D0.as_mut_ptr() as libc::c_uint;
    let fresh76 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_3: *mut Gfx = fresh76;
    (*_g_3).words.w0 =
        (0xfd as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((1 as libc::c_int - 1 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_3).words.w1 = shadowTexture as libc::c_uint;
    let fresh77 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_4: *mut Gfx = fresh77;
    (*_g_4).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (2 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_4).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0x2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0x2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh78 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_5: *mut Gfx = fresh78;
    (*_g_5).words.w0 =
        (0xe6 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_5).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh79 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_6: *mut Gfx = fresh79;
    (*_g_6).words.w0 =
        (0xf3 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_6).words.w1 =
        (7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            ((if ((64 as libc::c_int * 64 as libc::c_int + 1 as libc::c_int >>
                       1 as libc::c_int) - 1 as libc::c_int) <
                     2047 as libc::c_int {
                  (64 as libc::c_int * 64 as libc::c_int + 1 as libc::c_int >>
                       1 as libc::c_int) - 1 as libc::c_int
              } else { 2047 as libc::c_int }) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((((1 as libc::c_int) << 11 as libc::c_int) +
                   (if 1 as libc::c_int >
                           64 as libc::c_int * 1 as libc::c_int /
                               8 as libc::c_int {
                        1 as libc::c_int
                    } else {
                        (64 as libc::c_int * 1 as libc::c_int) /
                            8 as libc::c_int
                    }) - 1 as libc::c_int) /
                  (if 1 as libc::c_int >
                          64 as libc::c_int * 1 as libc::c_int /
                              8 as libc::c_int {
                       1 as libc::c_int
                   } else {
                       (64 as libc::c_int * 1 as libc::c_int) /
                           8 as libc::c_int
                   })) as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh80 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_7: *mut Gfx = fresh80;
    (*_g_7).words.w0 =
        (0xe7 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int;
    (*_g_7).words.w1 = 0 as libc::c_int as libc::c_uint;
    let fresh81 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_8: *mut Gfx = fresh81;
    (*_g_8).words.w0 =
        (0xf5 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (4 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 3 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 21 as libc::c_int
            |
            (1 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 19 as libc::c_int
            |
            ((64 as libc::c_int * 1 as libc::c_int + 7 as libc::c_int >>
                  3 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 9 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 9 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_8).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 20 as libc::c_int
            |
            ((0 as libc::c_int | 0x2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 18 as libc::c_int
            |
            (6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 14 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 10 as libc::c_int
            |
            ((0 as libc::c_int | 0x2 as libc::c_int) as u32_0 &
                 (((0x1 as libc::c_int) << 2 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 8 as libc::c_int |
            (6 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 4 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 4 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh82 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_9: *mut Gfx = fresh82;
    (*_g_9).words.w0 =
        (0xf2 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_9).words.w1 =
        (0 as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 3 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (((64 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 12 as libc::c_int
            |
            (((64 as libc::c_int - 1 as libc::c_int) << 2 as libc::c_int) as
                 u32_0 &
                 (((0x1 as libc::c_int) << 12 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    let fresh83 = (*__gfxCtx).polyOpa.p;
    (*__gfxCtx).polyOpa.p = (*__gfxCtx).polyOpa.p.offset(1);
    let mut _g_10: *mut Gfx = fresh83;
    (*_g_10).words.w0 =
        (0xde as libc::c_int as u32_0 &
             (((0x1 as libc::c_int) << 8 as libc::c_int) - 1 as libc::c_int)
                 as libc::c_uint) << 24 as libc::c_int |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 8 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 16 as libc::c_int
            |
            (0 as libc::c_int as u32_0 &
                 (((0x1 as libc::c_int) << 16 as libc::c_int) -
                      1 as libc::c_int) as libc::c_uint) << 0 as libc::c_int;
    (*_g_10).words.w1 =
        ovl_Boss_Ganon2_DL_00B3F0.as_mut_ptr() as libc::c_uint;
    Graph_CloseDisps(dispRefs.as_mut_ptr(), gfxCtx,
                     b"../z_boss_ganon2.c\x00" as *const u8 as
                         *const libc::c_char, 6479 as libc::c_int);
}
unsafe extern "C" fn run_static_initializers() {
    ovl_Boss_Ganon2_DL_00B3F0 =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x300 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0xc00 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00B390.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    ovl_Boss_Ganon2_DL_00D798 =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00CD58.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (8 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   160 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   160 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int /
                                                           16 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int) /
                                                        16 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int /
                                                          16 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int) /
                                                       16 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (((32 as libc::c_int >>
                                               1 as libc::c_int) +
                                              7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (8 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((160 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfb as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (255 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (155 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (255 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00D758.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    ovl_Boss_Ganon2_DL_00E1C0 =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00D820.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0x1 as libc::c_int |
                                              0 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0x1 as libc::c_int |
                                              0 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    gEffUnknown12Tex.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((2 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (12 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (2 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (5 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((3 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((5 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (5 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((3 as libc::c_int) << 30 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!(0 as libc::c_int as u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0x10000 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (26 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              26 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00E020.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((4 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((5 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((1 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((5 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((5 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((8 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((9 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((10 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((8 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((9 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((12 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((13 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((9 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((9 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((12 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((13 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((14 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((15 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((13 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((13 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((14 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((15 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((16 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((17 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((15 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((17 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((15 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((16 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((16 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((17 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((18 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((19 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((17 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((19 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((17 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((18 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((17 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((18 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((19 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((18 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((17 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((17 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((18 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((18 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((17 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((20 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((21 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((19 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((21 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((19 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((20 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((19 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((20 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((21 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((19 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((18 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((19 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((18 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((18 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((19 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((22 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((23 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((21 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((23 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((21 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((22 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((21 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((22 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((23 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((22 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((21 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((21 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((22 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((22 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((21 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((24 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((25 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((23 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((25 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((23 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((24 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((23 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((24 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((25 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((24 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((23 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((22 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((23 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((22 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((24 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((22 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((24 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((23 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((3 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((2 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((25 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((25 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((25 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((25 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((24 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((25 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((24 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((24 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((25 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    ovl_Boss_Ganon2_DL_00CCD8 =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00BC98.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       64 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (64 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      64 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (64 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((64 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((1 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (12 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (7 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (7 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((3 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((5 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (5 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00CC98.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    ovl_Boss_Ganon2_DL_00EC40 =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00E2E0.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    gEffUnknown12Tex.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((2 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (12 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (2 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (5 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((3 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((5 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (5 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (22 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              22 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00EAE0.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((4 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((5 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((0 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((0 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((5 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((4 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((8 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((9 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((6 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((8 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((6 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((9 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((10 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((11 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((11 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((10 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((11 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((12 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((13 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((10 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((12 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((13 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((14 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((15 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((12 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((14 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((12 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((15 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((16 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((17 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((18 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((17 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((18 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((16 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((18 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((16 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((17 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((19 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((19 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((19 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((20 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((21 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((16 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((21 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((16 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((20 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((16 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((20 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((21 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((21 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((17 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((17 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((21 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((21 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((17 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((3 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((20 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((3 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((20 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((20 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((21 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((21 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((21 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    ovl_Boss_Ganon2_DL_00B308 =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00A2C8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (64 as libc::c_int *
                                                   64 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       64 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (64 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      64 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (64 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((64 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((64 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x300 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    ovl_Boss_Ganon2_DL_00B378 =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00B2C8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    ovl_Boss_Ganon2_DL_00BB80 =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00B420.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00B820.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   3 as libc::c_int >>
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int /
                                                           16 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int) /
                                                        16 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int /
                                                          16 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int) /
                                                       16 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (((32 as libc::c_int >>
                                               1 as libc::c_int) +
                                              7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0x100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((1 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (12 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (5 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((3 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((5 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (3 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (5 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((3 as libc::c_int) << 30 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x8 as libc::c_int |
                                              0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x100 as libc::c_int |
                                              0x80 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0x800 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!(0 as libc::c_int as u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0x10000 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfb as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1:
                                    (255 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (200 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (50 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (128 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (22 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              22 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00BA20.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((3 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((4 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((3 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((4 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((5 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((6 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((6 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((5 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((8 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((9 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((10 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((8 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((9 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((10 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((11 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((12 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((11 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((10 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((12 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((11 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((12 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((13 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((14 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((12 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((14 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((13 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((14 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((15 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((16 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((16 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((14 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((16 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((15 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((17 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((17 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((17 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((16 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((17 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((18 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((17 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((18 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((16 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((18 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((16 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((17 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((17 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((19 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((18 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((19 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((18 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((17 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((18 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((17 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((19 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((18 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((19 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((20 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((19 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((20 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((18 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((20 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((18 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((19 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((19 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((21 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((21 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((19 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((19 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((21 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    ovl_Boss_Ganon2_DL_0103A8 =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0x1770 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0x1770 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    gEffUnknown10Tex.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((1 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (12 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (7 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (7 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((3 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (0 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((5 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (5 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!(0 as libc::c_int as u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0x400 as libc::c_int |
                                         0x10000 as libc::c_int |
                                         0x20000 as libc::c_int |
                                         0x40000 as libc::c_int |
                                         0x80000 as libc::c_int) as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfa as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (255 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (255 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (255 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (255 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfb as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1:
                                    (90 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (100 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (110 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (128 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (3 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 3 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00FC08.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (32 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              32 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00FC38.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((4 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((6 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((5 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((6 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((7 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((10 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((7 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((10 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((12 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((14 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((13 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((14 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((13 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((12 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((14 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((17 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((17 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((17 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((18 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((3 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((19 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((3 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((19 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((18 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((19 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((18 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((20 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((20 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((20 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((21 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((9 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((9 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((21 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((21 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((22 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((22 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((22 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((11 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((22 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((23 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((22 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((23 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((11 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((23 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((11 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((22 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((24 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((18 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((18 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((24 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((18 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((24 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((25 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((21 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((9 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((21 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((9 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((25 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((25 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((21 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((17 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((26 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((27 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((26 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((27 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((17 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((27 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((17 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((26 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((24 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((3 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((24 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((3 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((24 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((26 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((17 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((26 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((17 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((17 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((26 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((19 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((28 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((18 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((28 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((18 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((19 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((18 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((19 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((28 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((29 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((30 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((31 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((30 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((31 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((29 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((31 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((29 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((30 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (15 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              15 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00FE38.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((2 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((7 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((7 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((11 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((12 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((13 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((12 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((13 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((11 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((11 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((12 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((1 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xbb8 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xbb8 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    gEffUnknown10Tex.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfa as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (255 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (255 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (170 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (255 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfb as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1:
                                    (150 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (120 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (128 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xde as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    0x8000000 as libc::c_int as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (17 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              17 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_010298.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((3 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((5 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((3 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((3 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((3 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((12 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((13 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((14 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((12 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((14 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((12 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((13 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((16 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((16 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((16 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((14 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((13 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((16 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((13 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((16 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((14 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((16 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((13 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00F408.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           2 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         2 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          2 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        2 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 2 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((1 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (4 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (7 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (7 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (31 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (31 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfa as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (255 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (255 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (255 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (255 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (11 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              11 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00FF28.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((5 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((0 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((5 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((0 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((6 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((6 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((7 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((6 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((6 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((7 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((8 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((6 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((10 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((6 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((8 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00F208.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((16 as libc::c_int *
                                                   16 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (16 as libc::c_int *
                                                   16 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       16 as libc::c_int *
                                                           2 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (16 as libc::c_int *
                                                         2 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      16 as libc::c_int *
                                                          2 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (16 as libc::c_int *
                                                        2 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((16 as libc::c_int * 2 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((16 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((16 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 6 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00FFD8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((3 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((4 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((3 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00F408.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           2 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         2 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          2 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        2 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 2 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (12 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              12 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_010038.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((3 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((4 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((3 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((3 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((7 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((8 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((6 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((6 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((7 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((8 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((5 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((10 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((5 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((11 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((9 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((11 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((9 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((11 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00F208.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((16 as libc::c_int *
                                                   16 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (16 as libc::c_int *
                                                   16 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       16 as libc::c_int *
                                                           2 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (16 as libc::c_int *
                                                         2 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      16 as libc::c_int *
                                                          2 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (16 as libc::c_int *
                                                        2 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((16 as libc::c_int * 2 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((16 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((16 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (10 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              10 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_0100F8.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((1 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((0 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((4 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((0 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((4 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((8 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((8 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00F408.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   0 as libc::c_int >>
                                                   0 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           2 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         2 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          2 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        2 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 2 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int | 0 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (5 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (16 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int +
                                              16 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_010198.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((1 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((1 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((1 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((1 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((4 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((4 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((1 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((4 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((5 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((5 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((5 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((6 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((5 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((6 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((5 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((5 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((8 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((9 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((7 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((9 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((7 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((8 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((8 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((9 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((9 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((10 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((10 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((9 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((9 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((10 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((7 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((10 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((11 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((11 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((11 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((7 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((10 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((8 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((12 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((12 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((8 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((12 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((8 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((13 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((12 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((7 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((12 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((7 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((13 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((13 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((12 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((13 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((4 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((4 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((13 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((4 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((13 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((2 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((7 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((14 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((7 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((14 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((2 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((14 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((7 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((7 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((7 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((7 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((6 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((14 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((15 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((14 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((15 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((6 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((15 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((6 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((14 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((11 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((15 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((11 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((15 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((15 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((11 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((15 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((11 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((10 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((11 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((10 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((15 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((10 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((15 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((11 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((6 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((14 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((14 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((6 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((14 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((6 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    ovl_Boss_Ganon2_DL_00F188 =
        [Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int -
                                              14 as libc::c_int -
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((2 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 14 as libc::c_int)
                                        as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            16 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            11 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    (0xffff as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               16 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        16 as libc::c_int |
                                        (0xffff as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   16 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfd as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((1 as libc::c_int - 1 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Tex_00ED48.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (2 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf3 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((if ((32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int) <
                                                 2047 as libc::c_int {
                                              (32 as libc::c_int *
                                                   32 as libc::c_int +
                                                   1 as libc::c_int >>
                                                   1 as libc::c_int) -
                                                  1 as libc::c_int
                                          } else { 2047 as libc::c_int }) as
                                             u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((((1 as libc::c_int) <<
                                                11 as libc::c_int) +
                                               (if 1 as libc::c_int >
                                                       32 as libc::c_int *
                                                           1 as libc::c_int /
                                                           8 as libc::c_int {
                                                    1 as libc::c_int
                                                } else {
                                                    (32 as libc::c_int *
                                                         1 as libc::c_int) /
                                                        8 as libc::c_int
                                                }) - 1 as libc::c_int) /
                                              (if 1 as libc::c_int >
                                                      32 as libc::c_int *
                                                          1 as libc::c_int /
                                                          8 as libc::c_int {
                                                   1 as libc::c_int
                                               } else {
                                                   (32 as libc::c_int *
                                                        1 as libc::c_int) /
                                                       8 as libc::c_int
                                               })) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe7 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf5 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            21 as libc::c_int |
                                        (1 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            19 as libc::c_int |
                                        ((32 as libc::c_int * 1 as libc::c_int
                                              + 7 as libc::c_int >>
                                              3 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   9 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            20 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            18 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            14 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            10 as libc::c_int |
                                        ((0 as libc::c_int |
                                              0x2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   2 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        (6 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            4 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   4 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xf2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (0 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (0 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               3 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (((32 as libc::c_int -
                                               1 as libc::c_int) <<
                                              2 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   12 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xfc as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (((3 as libc::c_int as u32_0 &
                                               (((0x1 as libc::c_int) <<
                                                     4 as libc::c_int) -
                                                    1 as libc::c_int) as
                                                   libc::c_uint) <<
                                              20 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         5 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  15 as libc::c_int |
                                              (1 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  12 as libc::c_int |
                                              (3 as libc::c_int as u32_0 &
                                                   (((0x1 as libc::c_int) <<
                                                         3 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  9 as libc::c_int |
                                              ((31 as libc::c_int as u32_0 &
                                                    (((0x1 as libc::c_int) <<
                                                          4 as libc::c_int) -
                                                         1 as libc::c_int) as
                                                        libc::c_uint) <<
                                                   5 as libc::c_int |
                                                   (31 as libc::c_int as u32_0
                                                        &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              5 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 0 as libc::c_int)) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    (31 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               4 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        28 as libc::c_int |
                                        (31 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            15 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        (7 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   3 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            9 as libc::c_int |
                                        ((31 as libc::c_int as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    4 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             24 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 21 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 18 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 6 as libc::c_int |
                                             (7 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 3 as libc::c_int |
                                             (0 as libc::c_int as u32_0 &
                                                  (((0x1 as libc::c_int) <<
                                                        3 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 0 as libc::c_int),};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xe2 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        ((32 as libc::c_int - 3 as libc::c_int
                                              - 29 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            8 as libc::c_int |
                                        ((29 as libc::c_int -
                                              1 as libc::c_int) as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1:
                                    ((0 as libc::c_int) << 30 as libc::c_int |
                                         (3 as libc::c_int) <<
                                             26 as libc::c_int |
                                         (0 as libc::c_int) <<
                                             22 as libc::c_int |
                                         (2 as libc::c_int) <<
                                             18 as libc::c_int |
                                         (0x10 as libc::c_int |
                                              0x40 as libc::c_int |
                                              0x300 as libc::c_int |
                                              0x4000 as libc::c_int |
                                              0xc00 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  28 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  24 as libc::c_int |
                                              (1 as libc::c_int) <<
                                                  20 as libc::c_int |
                                              (0 as libc::c_int) <<
                                                  16 as libc::c_int)) as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xd9 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (!((0x400 as libc::c_int |
                                                0x10000 as libc::c_int |
                                                0x20000 as libc::c_int |
                                                0x40000 as libc::c_int |
                                                0x80000 as libc::c_int) as
                                               u32_0) &
                                             (((0x1 as libc::c_int) <<
                                                   24 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            0 as libc::c_int,
                                w1: 0 as libc::c_int as u32_0,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x1 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (4 as libc::c_int as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   8 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            12 as libc::c_int |
                                        ((0 as libc::c_int + 4 as libc::c_int)
                                             as u32_0 &
                                             (((0x1 as libc::c_int) <<
                                                   7 as libc::c_int) -
                                                  1 as libc::c_int) as
                                                 libc::c_uint) <<
                                            1 as libc::c_int,
                                w1:
                                    ovl_Boss_Ganon2_Vtx_00F148.as_mut_ptr() as
                                        libc::c_uint,};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0x6 as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int |
                                        (if 0 as libc::c_int ==
                                                0 as libc::c_int {
                                             (((0 as libc::c_int *
                                                    2 as libc::c_int) as u32_0
                                                   &
                                                   (((0x1 as libc::c_int) <<
                                                         8 as libc::c_int) -
                                                        1 as libc::c_int) as
                                                       libc::c_uint) <<
                                                  16 as libc::c_int |
                                                  ((1 as libc::c_int *
                                                        2 as libc::c_int) as
                                                       u32_0 &
                                                       (((0x1 as libc::c_int)
                                                             <<
                                                             8 as libc::c_int)
                                                            -
                                                            1 as libc::c_int)
                                                           as libc::c_uint) <<
                                                      8 as libc::c_int) |
                                                 ((2 as libc::c_int *
                                                       2 as libc::c_int) as
                                                      u32_0 &
                                                      (((0x1 as libc::c_int)
                                                            <<
                                                            8 as libc::c_int)
                                                           - 1 as libc::c_int)
                                                          as libc::c_uint) <<
                                                     0 as libc::c_int
                                         } else {
                                             (if 0 as libc::c_int ==
                                                     1 as libc::c_int {
                                                  (((1 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((2 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((0 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              } else {
                                                  (((2 as libc::c_int *
                                                         2 as libc::c_int) as
                                                        u32_0 &
                                                        (((0x1 as libc::c_int)
                                                              <<
                                                              8 as
                                                                  libc::c_int)
                                                             -
                                                             1 as libc::c_int)
                                                            as libc::c_uint)
                                                       << 16 as libc::c_int |
                                                       ((0 as libc::c_int *
                                                             2 as libc::c_int)
                                                            as u32_0 &
                                                            (((0x1 as
                                                                   libc::c_int)
                                                                  <<
                                                                  8 as
                                                                      libc::c_int)
                                                                 -
                                                                 1 as
                                                                     libc::c_int)
                                                                as
                                                                libc::c_uint)
                                                           <<
                                                           8 as libc::c_int) |
                                                      ((1 as libc::c_int *
                                                            2 as libc::c_int)
                                                           as u32_0 &
                                                           (((0x1 as
                                                                  libc::c_int)
                                                                 <<
                                                                 8 as
                                                                     libc::c_int)
                                                                -
                                                                1 as
                                                                    libc::c_int)
                                                               as
                                                               libc::c_uint)
                                                          << 0 as libc::c_int
                                              })
                                         }),
                                w1:
                                    if 0 as libc::c_int == 0 as libc::c_int {
                                        (((0 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((2 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((3 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else if 0 as libc::c_int ==
                                                  1 as libc::c_int {
                                        (((2 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((3 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((0 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    } else {
                                        (((3 as libc::c_int *
                                               2 as libc::c_int) as u32_0 &
                                              (((0x1 as libc::c_int) <<
                                                    8 as libc::c_int) -
                                                   1 as libc::c_int) as
                                                  libc::c_uint) <<
                                             16 as libc::c_int |
                                             ((0 as libc::c_int *
                                                   2 as libc::c_int) as u32_0
                                                  &
                                                  (((0x1 as libc::c_int) <<
                                                        8 as libc::c_int) -
                                                       1 as libc::c_int) as
                                                      libc::c_uint) <<
                                                 8 as libc::c_int) |
                                            ((2 as libc::c_int *
                                                  2 as libc::c_int) as u32_0 &
                                                 (((0x1 as libc::c_int) <<
                                                       8 as libc::c_int) -
                                                      1 as libc::c_int) as
                                                     libc::c_uint) <<
                                                0 as libc::c_int
                                    },};
                     init
                 },},
         Gfx{words:
                 {
                     let mut init =
                         Gwords{w0:
                                    (0xdf as libc::c_int as u32_0 &
                                         (((0x1 as libc::c_int) <<
                                               8 as libc::c_int) -
                                              1 as libc::c_int) as
                                             libc::c_uint) <<
                                        24 as libc::c_int,
                                w1: 0 as libc::c_int as libc::c_uint,};
                     init
                 },}];
    sJntSphInit1 =
        {
            let mut init =
                ColliderJntSphInit{base:
                                       {
                                           let mut init =
                                               ColliderInit{colType:
                                                                COLTYPE_METAL
                                                                    as
                                                                    libc::c_int
                                                                    as u8_0,
                                                            atFlags:
                                                                ((1 as
                                                                      libc::c_int)
                                                                     <<
                                                                     0 as
                                                                         libc::c_int
                                                                     |
                                                                     (1 as
                                                                          libc::c_int)
                                                                         <<
                                                                         4 as
                                                                             libc::c_int)
                                                                    as u8_0,
                                                            acFlags:
                                                                ((1 as
                                                                      libc::c_int)
                                                                     <<
                                                                     0 as
                                                                         libc::c_int
                                                                     |
                                                                     (1 as
                                                                          libc::c_int)
                                                                         <<
                                                                         3 as
                                                                             libc::c_int)
                                                                    as u8_0,
                                                            ocFlags1:
                                                                ((1 as
                                                                      libc::c_int)
                                                                     <<
                                                                     0 as
                                                                         libc::c_int
                                                                     |
                                                                     (1 as
                                                                          libc::c_int)
                                                                         <<
                                                                         3 as
                                                                             libc::c_int)
                                                                    as u8_0,
                                                            ocFlags2:
                                                                ((1 as
                                                                      libc::c_int)
                                                                     <<
                                                                     6 as
                                                                         libc::c_int
                                                                     |
                                                                     (1 as
                                                                          libc::c_int)
                                                                         <<
                                                                         4 as
                                                                             libc::c_int)
                                                                    as u8_0,
                                                            shape:
                                                                COLSHAPE_JNTSPH
                                                                    as
                                                                    libc::c_int
                                                                    as u8_0,};
                                           init
                                       },
                                   count:
                                       (::std::mem::size_of::<[ColliderJntSphElementInit; 16]>()
                                            as
                                            libc::c_ulong).wrapping_div(::std::mem::size_of::<ColliderJntSphElementInit>()
                                                                            as
                                                                            libc::c_ulong)
                                           as s32,
                                   elements: sJntSphItemsInit1.as_mut_ptr(),};
            init
        };
    sJntSphInit2 =
        {
            let mut init =
                ColliderJntSphInit{base:
                                       {
                                           let mut init =
                                               ColliderInit{colType:
                                                                COLTYPE_METAL
                                                                    as
                                                                    libc::c_int
                                                                    as u8_0,
                                                            atFlags:
                                                                ((1 as
                                                                      libc::c_int)
                                                                     <<
                                                                     0 as
                                                                         libc::c_int
                                                                     |
                                                                     (1 as
                                                                          libc::c_int)
                                                                         <<
                                                                         4 as
                                                                             libc::c_int)
                                                                    as u8_0,
                                                            acFlags:
                                                                ((1 as
                                                                      libc::c_int)
                                                                     <<
                                                                     0 as
                                                                         libc::c_int
                                                                     |
                                                                     (1 as
                                                                          libc::c_int)
                                                                         <<
                                                                         3 as
                                                                             libc::c_int)
                                                                    as u8_0,
                                                            ocFlags1:
                                                                ((1 as
                                                                      libc::c_int)
                                                                     <<
                                                                     0 as
                                                                         libc::c_int
                                                                     |
                                                                     (1 as
                                                                          libc::c_int)
                                                                         <<
                                                                         3 as
                                                                             libc::c_int)
                                                                    as u8_0,
                                                            ocFlags2:
                                                                ((1 as
                                                                      libc::c_int)
                                                                     <<
                                                                     4 as
                                                                         libc::c_int)
                                                                    as u8_0,
                                                            shape:
                                                                COLSHAPE_JNTSPH
                                                                    as
                                                                    libc::c_int
                                                                    as u8_0,};
                                           init
                                       },
                                   count:
                                       (::std::mem::size_of::<[ColliderJntSphElementInit; 2]>()
                                            as
                                            libc::c_ulong).wrapping_div(::std::mem::size_of::<ColliderJntSphElementInit>()
                                                                            as
                                                                            libc::c_ulong)
                                           as s32,
                                   elements: sJntSphItemsInit2.as_mut_ptr(),};
            init
        }
}
#[used]
#[cfg_attr(target_os = "linux", link_section = ".init_array")]
#[cfg_attr(target_os = "windows", link_section = ".CRT$XIB")]
#[cfg_attr(target_os = "macos", link_section = "__DATA,__mod_init_func")]
static INIT_ARRAY: [unsafe extern "C" fn(); 1] = [run_static_initializers];
